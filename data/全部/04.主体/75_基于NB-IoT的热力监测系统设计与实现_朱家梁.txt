第一章绪论
本章为全文绪论，内容包括论文的研究背景及意义、论文的研究内容以及论 文的结构安排。
1.1	论文研究背景及意义
自从物联网国这一概念在新世纪提出以来，物联网及其相关技术不断飞速地 变化。物联网的英文名称是Internet of Things,其原始含义是物体与物体相互连 接的互联网，通过各种信息传感设备(例如，射频识别装置、智能传感器、激光 扫描设备、红外感应器等)按照事先定义的协议，进行物与物之间、物与人之间 的有效信息交互，进而实现对物的监测、定位、跟踪、管理以及控制。因此，物 联网不是互联网的独立部分，而是属于互联网技术的一个扩展领域。而随着互联 网技术的不断发展和物联网技术本身的快速发展，物联网产业进入了一个新时代。
经过十余年的发展，物联网业界已形成多种物联网通信技术。从传输距离的 区别上加以划分，主要可以分为两类：一类是短距离无线通信技术，代表技术有 Bluetooth[2\ Zigbee⑶、Z-wave[4\ Wi-Fi©]等，典型的应用场景为智能医疗、智 慧城市、智能家居等等；另一类是低功耗广域网无线通信技术(LPWAN)，典型 的使用场景是短距离无线通信难以支持的应用，例如，智能抄表、环境监控等⑹。 而NB-IoT(Narrow Band -Internet of Things产作为LPWAN当中的代表技术，是解 决物联网通信的一种全新的方法，使用NB-IoT协议的物联网设备之间的数据交 互仅消耗约180KHz的带宽网，低功耗、广覆盖等技术特点使其在广域物联网领 域大有可为。
万物互联是如今技术发展的必然趋势。实际上，与Bluetooth, ZigBee等短 距离通信技术相比，移动蜂窝网络具有覆盖范围广，移动性强与大量连接的特点， 可以带来更加丰富的应用场景，有成为物联网主要连接技术的趋势。而作为LTE 的演进技术，NB-IoT物联网技术意味着基于蜂窝物联网的更多连接，支持M2M 连接和更低的延迟，并将促进物联网和其他应用的快速普及。因此，设计与实现 基于NB-IoT协议的广域物联网系统具有重要现实意义。
物联网设备具有许多传感器设备和单芯片设备。除了有效的网络连接之外， 它们通常还需要较长的设备运行时间及待机时间等，这就需要这些设备自身具有 低功耗。WiFi和蜂窝网络等传统通信方法可能无法满足低功耗要求，而这些都 是NB-IoT通信技术可以解决的问题。NB-IoT在短短几年内发展迅速。例如，华
为公司，移远公司，中国电信以及其他制造商［9］已经陆续推出了自己的定制 NB-IoT产品，并且已将其商品化试用。
除了通信模组降低功耗以外，系统级别的软件低功耗技术发展也是日趋成熟。 功耗管理技术大体上可以分为两类：一类是静态功耗管理技术，另一类是动态功 耗管理技术口叫其中，静态功耗管理技术在编译时被应用，动态功耗管理技术 在运行时被应用，二者都以节约能源为目的。在所有的功耗管理技术当中，又以 DVS【n〕（动态电压调节）和DPM［i2］（动态电源管理）最为广泛地应用。以不影响处理 器的性能为前提，DVS技术会降低系统的电源电压和处理器的频率，而DPM技 术会将所有未使用的系统组件进入睡眠状态（低功耗状态）。
在广域物联网环境下的终端设备，往往采用电池供电的方式，而评定电池供 电系统性能的重要因素即为电池的使用寿命口比通过对多种低功耗技术的综合 运用，增加物联网终端设备的有效工作时间，提高终端的工作性能，延长终端设 备的使用寿命，具有重要而深刻的现实意义。
1.2	论文研究内容
本文的研究重点是基于硬件系统的低功耗技术。在广域物联网的环境下，结 合热力领域的实际需求，综合使用各种低功耗技术并作出相应的优化方案，全文 主要研究内容如下：
评估基于NB-IoT技术的通信链路的系统性能，依据NB-IoT模组和MCU 提供的不同工作状态，根据实际需求，在保证广域网环境下信息传输的准确性和 时效性的基础上，完成了基于NB-IoT技术的系统设计和实现。
研究动态电源管理以及动态电压调节等低功耗技术，对多种不同低功耗技术 的实现原理及应用场景进行分析比较。结合嵌入式实时操作系统对原有程序进行 改造，在现行的硬件系统上使用动态电源管理技术，并针对现实场景需要和分析 对已有程序进行必要的优化，通过硬件验证手段对优化前后的系统功耗进行比较 与总结。
解决实际工程中存在的问题，系统的设备端实现了基于动态电源管理技术的 低功耗解决方案，并实现了设备端的消息重传机制，在系统的服务端实现了针对 NB-IoT数据高并发场景的消息处理方案，有效地减少资源及功耗的浪费，进而 节约了功耗。
最后，分别对上述的方案进行了对应的功能测试，验证了方案设计的可行性 及有效性。
1.3	论文结构安排
本文一共分为五章，各章节安排如下：
第一章，绪论。主要介绍本文的研究背景与目的，分析当前物联网技术的特 点和痛点，提出本文所要研究的内容和意义。
第二章，低功耗物联网关键技术研究。主要介绍了低功耗窄带广域物联网领 域的关键技术,包括NB-IoT通信技术的相关介绍以及该技术实现低功耗的原理。 NB-IoT通信技术在应用层使用的通信协议为CoAP协议，对CoAP通信协议做 出了相关的技术分析。阐述了嵌入式动态电源管理技术以及实时操作系统技术, 为系统设计与验证奠定基础。
第三章，基于NB-IoT的热力监测系统设计。主要介绍了基于NB-IoT的热 力监测系统概要及详细设计。首先，对基于NB-IoT的热力监测系统进行总体框 架的选型和设计。其次，详细描述了硬件设备的选型及其整合方案、实时操作系 统的移植与程序优化，并在此基础上引入动态电源管理的低功耗解决方案，进一 步降低硬件部分的功耗。最后，分别对数据重传以及消息处理，提出了对应的改 进方案，进一步优化了系统的性能，有效地减少资源及功耗的浪费。
第四章，基于NB-IoT的热力监测系统实现。本章给出了基于NB-IoT协议 的热力监测系统的实现，分别对NB-IoT客户端设备、电信CDP Server以及第三 方后台应用的实现方式进行了描述。在系统的设备端实现了基于动态电源管理技 术的低功耗解决方案，并实现了设备端的消息重传机制；在系统的服务端实现了 针对NB-IoT数据高并发场景的消息处理方案。最后，分别对上述的方案进行了 相应的功能测试，验证了方案设计的有效性。
第五章，总结与展望。本章的主要内容是总结前几章的研究内容和研究成果， 并分析研究主题中仍然存在的问题和需要改进的方案。
(C) 1994-2022 China Academic Journal Electronic Publishing House. All rights reserved, http://www.cnki.net
第二章低功耗物联网关键技术
本章主要介绍窄带广域物联网领域的关键技术，包括NB-IoT通信技术以及 该技术实现低功耗的原理、CoAP通信协议、嵌入式功耗管理技术以及实时操作 系统(RTOS)技术。
2.1	NB-IoT通信技术
NB-IoT中文名称为窄带物联网，具有功耗小、覆盖广、成本低、支持海量 连接等优点，是当今物联网技术的一个重要分支，NB-IoT通信技术的主要应用 在短距离无线通信技术难以支持的场景，例如，智能抄表、环境监控及异常震动 报警等等。
2.1.1	技术概述
NB-IoT作为蜂窝网络应用的物联网底层通信技术，其技术基础是物理层经 过特定改造的FDD-LTE技术口凡系统功耗进一步降低，具有以下特点：
信号覆盖度广且深，相比于传统的GSM通信，NB-IoT技术可以将网络增益 提高20dB。NB-IoT通信技术目前支持三种部署模式，包括：独立部署模式、保 护带部署模式以及带内部署模式等口叫具体模式如图2-1所示。
连接数量大，NB-IoT通信技术能做到大量的数据连接，是由其业务模型决 定的。NB-IoT终端发送的数据包较小，并且对时延不敏感，有效地提升了物联 网设备的连接量。
功耗低，NB-IoT功耗仅仅是GSM通信的1/10,在理论环境下，使用NB-IoT 技术的物联网终端设备的电池寿命可超过十年。此外，NB-IoT技术借助PSM以 及eDRX技术可以实现通信模组的低功耗状态。
通信方式适用，NB-IoT技术的通信方式特点就是每次信息量小，但通信次 数频繁且稳定，体现出技术本身对广域物联网环境的适用性。
成本低廉，模组的生产成本已经降至三十元人民币以内，而随着相关技术的 发展，通信模组的生产成本将进一步降低。
物联网技术的发展与物联网协议的发展密不可分。自物联网协议发展以来， 已经为生产和运营提供了多种成熟的协议，包括诸多位于应用层协议上层的协议, 如AllJoyn[16], OCF[17], oneM2M网等。而NB-IoT协议并不同于以上协议,NB-IoT
主要针对数据传输，属于物理层、数据链路层协议，NB-IoT技术在应用层使用 CoAP网协议发送数据。CoAP协议、UDP协议、NB-IoT协议的层次关系，如图 2-2所示。
独立部署模式
保护带部署模式
带内部署模式
图2-1 NB-IoT三种部署方式
OCF	Alljoyn	oneM2M	••••••
CoAP	MQTT	HTTP	••••••
UDP		TCP
NB-IoT LoRa		ZigBee	••••••
图2-2协议层次关系图
2.1.2	低功耗技术
NB-IoT技术通过简化物理层的设计以达到降低实现复杂度的目的，技术本 身对物联网终端设备移动性要求较低，不要求连接态的测量及其相关操作，进而 减少了测量对象，降低了系统的功耗。NB-IoT通信技术为了实现其低功耗性能， 在封装通信模组时，对通信方式做出了进一步的改造，并提出了多种低功耗技术, 其中主要为 PSM(Power Saving Mode)技术以及 eDRX(Extended DRX)技术网。
PSM其含义就是节省功耗模式，PSM是3Gpp R12协议mi中引入的一种独 立状态，理论上，支持这种低功耗功能的物联网设备终端在空闲状态持续一段时 间后，就会进入到此状态。而在该状态下的物联网设备的射频部分停止工作，不
6
会接收任何的网络寻呼，命令下行数据在此状态不可达。与此同时，接入层也会 停止部分相关功能，以减少射频、信令处理等部分造成的额外功耗浪费，进而降 低系统的功耗。
值得注意的是，PSM状态下的终端在网络中还是标记为注册状态。因此， NB-IoT设备终端从PSM状态唤醒后，无需重新建立连接，可以直接向网络层发 送上行数据。
eDRX又称为非连续接收技术，该技术通过支持更长周期的寻呼监听，实现 进一步节能的效果。在下行数据发送频率小时，eDRX技术通过核心网和物联网 终端的协商配合，略去绝大部分的寻呼监听过程，从而达到节能的目的PR。eDRX 技术的周期一共存在16种，其中有10种周期可以在NB-IoT设备端使用，最长 的eDRX周期可以达到2.9h,与传统的短时间寻呼间隔相比，长周期的节电效果 更佳，且在该模式下的NB-IoT设备下行数据可达。
终端设备消耗的能量与数据量或速率有关。单位时间内终端设备发送的数据 量的大小对于终端的功耗起到了决定性作用。NB-IoT模组可以利用正常的连接 状态保持终端设备始终处于在线状态，也可以使用PSM状态，通过减少不必要 的下行命令并且不接受寻呼信息实现节能。在PSM模式下，终端设备仍在网络 上注册，但下行命令不可达，从而使终端长时间处于深度睡眠状态，以节省电量。 而eDRX省电技术进一步延长终端在空闲模式下的睡眠周期，减少接收模块不必 要的启动，与PSM模式相比较，大幅度提升了下行命令的可达性。
通常，物联网设备分为以下三类：需要具备较强的移动性，需要执行频繁的 切换，少量数据的设备，例如，车队跟踪管理设备。无移动性，但是有较大的数 据量以及较宽频带的设备，例如，监控摄像头设备。无需移动性，海量设备，少 量数据，并且对延迟不敏感，例如，智能抄表设备。
而使用NB-IoT技术的物联网设备无疑属于第三类，该技术是为小数据量， 低移动性并且对延迟不敏感的物联网设备而准备的。
2.2	CoAP 协议
CoAP(Constrained Application Protocol)^一种在物联网世界中类似 web 的协 议，它的详细规范定义在IETFRFC7252规范中。CoAP名字翻译来就是“受限应 用协议”，该协议适用在资源受限的物联网设备上。
2.2.1	CoAP协议除
CoAP协议网络传输层为UDP[23]o它基于REST架构网，服务器的资源地
址和互联网一样也有类似URL的格式。客户端同样使用POST, GET, PUT, DELETE方法访问服务器，对HTTP协议做了简化。相比于HTTP协议是文本格 式的，CoAP是二进制格式的，因此CoAP比HTTP更加紧凑，更轻量化。CoAP 最小长度仅仅4Byte,其长度远小于HTTP协议，如图2-3所示。CoAP协议支 持块传输、可靠传输以及数据重传，确保数据的有效传输。此外，CoAP协议支 持同时向多个终端设备发送请求，其通信方式为非长连接通信，广泛适用于广域 物联网的应用场景。
CoAP协议一下有4种消息类型kJ：
1.	CON—需要被确认的请求，如果CON请求被发送，那么对方必须做 出响应。这类似于TCP协议，对方必须给确认收到消息，用以可靠消息 传输及交付。
2.	NON一不需要被确认的请求，如果NON请求被发送，那么接收方不 必做出回应。这适用于消息会重复频繁的发送，丢包不影响正常操作。 此种消息类型类似于UDP协议，用以不可靠消息传输。
3.	ACK——应答消息，对应的是CON消息的应答。
4.	RST一复位消息，可靠传输时候接收的消息不认识或错误时，不能回 ACK消息，必须回复RST消息。
0	12	3a
0123456789012345678901234567890 1^
4—4—4—--1—4—^—i•-I—
I Ver |T I TKL ：|	Code |	Message ID	k
I—4~HH~~I—I—I—•I—i—I•-I—~I—i—i-I■-I—i—i—I~HH-d-（如果有则长度为TKL字节。
H—r-+-+—f-H•-r-4■—I•―I■—I~i—I-I—+-+-H•-I—4—1—t—I-t—-r-+-4~~F-+-+-4■—I-h—t+j
| Options （可选的）+'
dI—+-d~b-H--F-H~I■—I•-F-+-4I--4 -4 -i-I ~I~J—+-+-4I—+-+-H~I•—HH-p 1111111111 Payload	+* 1 2 3 4 5
+-4—!—4—I—+-+-4—4-I--I-+-■!—I—+-+—i~~!—4—F—i~I~~I—+-+-4~F-+--1—4~F—i~h.
图2-3 CoAP报文的消息格式
CoAP协议的消息格式：
1. Ver： 2bit,版本信息，当前是必须写0x01。
2. T： 2bit,消息类型，包括 CON, NON, ACK, RST 这 4 种。
3. TKL： 4bit, token长度，支持0〜8B长度，其他长度保留将来扩展用。
4. Code： 8bit,分成前3bit（0〜7）和后5bit（0〜31）,其中前3bit代表类型。0 代表空消息或者请求码，而2开头则代表响应码。
5. token：用于将响应与请求匹配。token值为0到8字节的序列（每条消息 必须带有一个标记，即使它的长度为零）。每个请求都带有一个客户端生 成的token,服务器在任何结果响应中都必须对其进行回应。token类似
8
消息ID,用以标记消息的唯一性。token还是消息安全性的一个设置， 使用全8字节的随机数，使伪造的报文无法获得验证通过。
6.	option：请求消息与回应消息都可以零个或者多个option,而这些选项主 要用于描述请求或响应的相应属性、类似的参数或特性，例如，是否使 用代理服务器、目标主机的端口等。
7.	payload：实际携带数据内容，若有，则前面加payload标识符“OxFF”， 如果不存在payload标识符，那么就代表这里的payload长度为0。
2.2.2 CoAP协议特点
作为物联网的重要应用协议，对于CoAP协议对物联网领域的适用性可以从 以下几方面进行分析：
CoAP协议的操作具有幕等性，具有协议规范化的URL,这样大多数的操作， 无论操作的次数多少，最终得到的结果都是一样的。例如，Get查询某个状态、 PUT更新某个状态、DELETE删除某个资源，甚至是POST创建某个资源。如 果协议有这样的性质，当网络不可靠时，整个系统也可以安全、稳定地运行。例 如，在NB-IoT等低功耗设备中，通常无法使用TCP长连接，设备的信息传输必 须高效，并且需要弱化对连接和网络的依赖。在这样的情形下，协议的安全性与 幕等性显得十分与必要。
CoAP协议的可扩展性强，各层次资源相互独立，耦合度低。系统可以方便 地添加新的资源和新的性能。服务器可能会逐渐添加各种类型的设备，所以这也 是物联网平台广泛使用CoAP协议的主要原因。
物联网设备的RAM以及ROM都通常非常小，运行TCP协议和HTTP协议 几乎是不可以接受的。而CoAP具有较低的头部开销和解析复杂性,相比于HTTP 协议，更加适用于物联网的应用环境。
因此，对于物联网设备而言，CoAP协议的应用无疑是一个很好的选择。
2.3功耗婢技术
功耗管理技术大体上可以分为两类，一类是静态功耗管理技术，一类是动态 功耗管理技术，其中，静态功耗管理技术在编译时应用，动态功耗管理技术在运 行时应用，二者都以节约能源为目的。在所有的功耗管理技术当中，又以动态电 压调节技术和动态电源管理技术应用最为广泛。
23.1动	态电源管理技术
动态电源管理技术一般是指在嵌入式系统中，根据系统的性能、功耗需求、 空闲时间等条件，对当前的嵌入式系统的功耗进行动态式的管理。在这个过程中， 通常需要系统具有多种工作状态模式，使嵌入式系统能够根据自身的工作状态自 动调整工作模式，从而达到降低系统功耗的最终目的ML
动态电源管理技术其实是对于系统电源管理的一种机制［2刀，通过在系统正 常运转时动态地管理电源，来达到减低嵌入式系统功耗的最终目的。在嵌入式系 统的环境下，功耗的急剧增加主要是由于当前系统中运行的任务总数急剧增加或 连接到嵌入式系统的外围设备调用频率急剧增加。而利用动态电源管理技术，可 以通过控制模块动态地调节系统内核以及外设的运行状态，有效地进行节电操作。
例如，拥有笔记本计算机的人会注意到，当他们依靠电池供电时，其便携式 设备的行为与使用交流主电源时的行为有所不同。具体来说，显示屏变暗，处理 器的时钟变慢，并且系统将尽可能长地进入待机或睡眠状态。智能手机用户也会 注意到，拨号后背景灯和按键照明会熄灭。而实际上，这些可见行为的背后是软 件和硬件技术以及节能机制在起作用。
如今，操作系统级别的动态电源管理策略，主要分为以下三类：超时策略、 预测策略以及随机策略。其中，超时策略是最早提出的动态电源管理策略，其实 现的原理简单易行，适用范围广；预测策略是对于不同的系统分配不同的模型， 在策略执行中应用统计学的相关方法对系统模型进行分析；随机策略则是结合当 前的任务状态以及对应的处理措施来建立随机模型，例如，利用常见的马尔科夫 决策来进行数学建模，通过建立的模型将随机过程呈现具体化，进而实现系统的 低功耗方案。
动态电源管理技术利用硬件的最新状态进展来扩展时钟信息以及合理调度 任务，以便在短暂的空闲时间或执行性能和功耗要求较低的任务时节省功耗。
2.3.2	动态电压调节技术
动态电压调节技术是指在不影响处理器性能的前提下，通过动态改变系统处 理器的电压和频率，有效降低整个系统的功耗PS1。具体来说，是指平衡功耗和 性能。为了降低系统的功耗，动态电压调节技术必须以执行时间为代价来延长任 务工期。
DVS(Dynamic Voltage Scaling)技术所面临的主要问题在于当系统的任务负 担较重或者出现突发事件时，实现DVS技术的算法如何应对，在不影响系统性 能的前提下获取良好的低功耗性能。DVS技术又细分为离线DVS任务调度以及 在线DVS任务调度UI。
10
在离线DVS算法中，确定了进程集，并确定了每个进程的周期以及其他状 态信息，可以根据以上的条件提前确定低功耗调度方案。在实际应用场景中，以 上状态信息可能在一定范围内变化，通常以最坏情况为基准确定任务调度方案。
一般情况下，离线调度容易取得比较好的降低系统功耗的效果，这是因为有 很多因素都是预先确定的。通过对于预先设计的方案进行优化，系统按照设计完 备的流程运行即可。
但离线DVS算法的缺点也正在于此，即存在对进程集的强依赖性。而如果 进程集的进程数量或者具体进程的状态发生变化，原先设定的任务调度方案相对 于当前的任务进程集而言，就很可能不再是最优的调度方案了，这也是离线DVS 算法在很多应用场景中的使用受到限制的原因。
在线DVS算法的调度方案是根据实际处理的进程状态而实时变化的。在线 DVS算法不需要预先知道每个进程的周期以及其他状态信息，并且允许进程集 在任务执行的过程中随时发生改变。
例如，Weiser算法网］基本原理是：将CPU的时间一一分为统计窗口。所有 窗口的长度是相同的。每次通过一个窗口时，都会计算该窗口中的CPU利用率 uo如果u小于0.5,则表示CPU比较空闲；如果u大于0.7,则表示CPU比较 繁忙。如果CPU利用率过低，请求降低CPU执行频率以减少系统功耗。如果 CPU利用率过高，为了确保系统中每个进程的实时性能，请求增加CPU执行频 率。这样实时地通过CPU的利用率，动态调节CPU的执行频率，以达到减低系 统功耗的效果。
2.3.3	备用支持技术
可靠性是系统设计的关键性特征。而在任何工作的系统中，故障的发生是不 可避免的。计算机系统中会发生不同类型的故障。它们大致分为永久性故障和临 时性故障［31
永久性故障是不可恢复的故障，例如，系统组件中一些硬件出现的故障，而 这些故障可能无法通过机器自身恢复，可以通过人为引入硬件冗余，来降低永久 性故障对于系统的不良影响HL
临时性故障是指可恢复的故障，临时性故障通常是由于辐射干扰引起的。当 按照比例减小电源电压以及CPU的工作频率时，瞬态故障发生的概率会随着增 加，从而导致整个系统的可靠性降低。因此，在进行系统设计时，应当始终保持 系统的可靠性在能接受的范围之内，而不是一味去追求降低系统的整体功耗，否 则得不偿失。
备用支持技术可以有效地解决因为系统硬件存在的瞬态故障而引发的问题。
11
备用支持技术的基本原理是：当使用低功耗技术进行进程调度时，系统对于每一 个正在执行的工作进程都创建一个备用的进程，当出现瞬态故障时启动备用进程, 以保证工作的正常执行。
2.4	实时操作系统技术
实时操作系统(Real-Time Operating System),简称RTOS[33]o与传统操作系 统的主要区别在于实时操作系统更加会强调操作的实时性，即：对外部中断的响 应和处理速度、任务调度采用抢占式调度方式133随着嵌入式应用需求的发展， 嵌入式实时操作系统因为其在实时性，稳定性，可靠性方面的出色表现，被广泛 应用于通信，军事测量和通信等高科技领域。
实时操作系统中都要包含一个实时任务调度器，这个任务调度器与其它操作 系统的最大不同是强调严格按照优先级来分配CPU时间，并且时间片轮转不是 实时调度器的一个必选项。实时操作系统能够在事先设定的时间限制之内应对并 处理触发中断，快速解决较为紧急的事件，因而特别适合对于实时性要求较高的 场合。
提出实时操作系统的概念，可以解决以下两个问题：一个是早期的CPU任 务切换的开销太大，实时调度器可以避免任务频繁切换时导致的CPU时间的浪 费；另一个是在一些特殊的应用场景中，必须要保证重要的任务优先被系统执行。 在这样的背景下，设计了实时操作系统，典型的实时操作系统有VxWorks, RT-Thread, rC/OS 等等。
实时任务调度器是实时操作系统的一个必选项，但不代表只要设计出来一个 实时调度器就足够了。实时操作系统的特性是在整个操作系统的设计思路上都要 时刻关注实时性。这些设计思路包括：
1	.实时的消息、事件处理机制
在常规操作系统中，消息队列是根据FIFO(先进先出)模式调度的。如果有多 个接收方，则接收方还会根据FIFO原理接收数据。但是，实时操作系统将提供 基于优先级的处理方法，两个任务的优先级分别为5和10,并同时等待信号量。 如果优先级遵循模式，则优先级为5的任务将首先接收信号量，体现出实时操作 系统的不同之处。
2	.提供内核级的优先级翻转处理方式
实时操作系统调度器最经常遇到的问题就是优先级翻转，因此对于类似信号 量一类的APL实时操作系统都会能提供阻止优先级翻转的机制，防止操作系统 出现死锁。
3	.减少粗粒度的锁和长期中断的使用
12
在windows和Linux操作系统的驱动程序中，由于同步的需要，中断可能会 被长时间关闭。在这里，长期可能是毫秒到数百微秒，但实时操作系统通常不允 许长期中断。对于非实时操作系统而言，如果接收到外部中断，在处理中断的整 个过程中，操作系统总是可以关闭中断，但实时操作系统的正常方法是将中断作 为事件通知给另一个任务。处理完关键数据后，中断处理器立即打开中断，被驱 动的中断处理器继续以高优先级任务的方式执行，而低优先级任务则只能继续等 待处理器的使用权。
4	.系统级服务的实时性保证
对于某些系统级服务，例如，文件系统操作，非实时系统缓存用户请求，而 不直接向设备写入数据，或建立一系列线程池来分发文件系统请求，但在实时系 统中允许高优先级数据先写入。在文件系统提供的整个服务期间，首先处理高优 先级请求。此高优先级策略在操作完成之前完成。这种设计实际上牺牲了系统的 性能，但实时系统强调的是整个系统级的实时性，而不是某个模块的实时性，所 以系统服务也要实时。
由于应用程序场景的差异，一些用户需要实时驱动程序，而某些用户则需要 高性能驱动程序。因此，实时操作系统实际上需要提供多种配置形式，以满足具 有不同实时要求的用户。
5	.避免提供实时性不确定的API
大多数实时操作系统不支持虚拟内存。主要原因是页面错误会增加任务调度 的不确定性。许多实时操作系统都支持分页，但虚拟内存很少使用，因为页面故 障的代价非常高，延时通常可以达到毫秒级别，并且会涉及大量代码，导致用户 程序执行中的不确定性增加。实时操作系统的确定性是一个重要指标。在某些极 端情况下，动态内存分配甚至可能被禁用，以确保系统不会受到动态任务更改的 干扰。
随着设备性能的不断提高,许多实时性要求很高的场景被切换到通用的操作 系统中。例如，Linux操作系统在嵌入式设备上推广，许多使用实时操作系统的 嵌入式设备都改为Linux,因为硬件性能的提高会将系统延迟降低到用户可以接 受的水平，但在某些特定的场景下，如物联网、航空航天、军事、工程工业自动 化和其他领域仍然需要实时操作系统。
2.5	本章小结
本章首先介绍低功耗物联网领域的关键技术，包括NB-IoT通信技术的相关 介绍以及该技术实现低功耗的原理。其次，针对NB-IoT通信技术在应用层使用 的通信协议为CoAP协议进行了阐述。最后，对嵌入式动态电源管理技术以及实 时操作系统的技术进行了分析，为本文奠定基础。
14
第三章 基于NB-IoT的热力监测系统设计
本章基于NB-IoT标准协议,设计一种广域物联网环境下热力监测系统方案, 并从系统架构以及各功能模块等方面进行具体设计。
3.1	系统架构设计
在当今的物联网生态体系当中，智能物联网设备之间相互通信的方式是多种 多样的，这些交互方式基本是由智能物联网设备所采用的物联网协议所支持的通 信模型决定，例如，HTTP协议支持的客户/服务端模型、MQTT协议支持的订 阅/发布模型等口叫从第二章的研究和分析中可知，NB-IoT协议所采用的通信模 型是客户/服务端模型，存在两种基本的通信角色，即NB-IoT客户端设备和对应 的服务端。
基于NB-IoT协议的热力监测系统主要包含三个部分,即NB-IoT终端设备、 IoT云平台、第三方应用服务器，NB-IoT系统结构如图3-1所示。因为NB-IoT 模块与设备终端是组合在一起的，所以对NB-IoT系统中存在的底层硬件设备统 称为NB-IoT终端设备。终端设备通过NB-IoT模块联网，使用NB-IoT的底层通 信协议将数据信息进行编码并发送至基站。
其中，基站为设备提供无线通信，而核心网则是由分组核心网EPC等组成， 这些是目前已有的基础通信核心网设备。运营商IoT平台则是由关键信令控制设 备以及IoT平台一起组成，该平台是对外提供接口的物联网平台。第三方应用服 务器通过IoT平台提供的接口，与IoT平台完成对接，通过订阅通知机制获取来 自NB-IoT终端设备的数据，通过命令下行接口来实现定义事件的触发。NB-IoT 的功能层次如图3-2所示。
基站	核心网	IoT平台
图37 NB-IoT系统架构图
15
具体应用层
运营商IoT平台
NBToT网络
底层传感设备
图3-2 NB-IoT功能层次图
NB-IoT网络架构主要包括：行业终端、NB-IoT模组、基站、核心网以及IoT 云平台等部分。其中，基站部分重用站点基础设施，有效降低部署成本；核心网 部分支持终端安全接入，有效适配时延不敏感终端，并优化了拥塞控制以及流量 调度机制；IoT平台支持应用层协议适配，并具有事件订阅管理机制。NB-IoT 网络架构图如图3-3所示。
图3-3 NB-IoT网络架构图
3.2	硬件设备选型
本文设计了一种基于NB-IoT协议的热力监控管理系统，整个系统的硬件部 分包括四类感知识别层外设（热力管网压力监测，流量监测，热力管网测温，井 盖数字化状态监控），控制芯片以及窄带物联网NB-IoT通信模块，控制芯片分别 与所述感知识别层外设和所述的NB-IoT通信模块相连接，感知识别层外设在所 述控制芯片的控制下采集环境信息数据，控制芯片用于控制所述NB-IoT通信模 块输出所述感知识别层外设采集到的环境信息。整个系统硬件部分供电均由电池 组完成，控制主板部分与感知识别层外设分别由对应的电池组供电支持。
针对热力系统的实际需求,对基于NB-IoT协议的热力监测系统中的NB-IoT 客户端设备进行硬件选型，包括NB-IoT模组的选取、MCU的选型、适用于热 力领域的智能传感器设备选型等，最后形成硬件设备部分的完整方案。
16
3.2.1	模组选型
在热力行业具体需求中，需要支持包括热力管网压力监测，流量监测，热力 管网测温，井盖数字化状态监控的业务场景，而这些业务场景的共同特点在于场 景移动性支持不强、短距离无线通信难以支持、更依赖于电池供电。NB-IoT通 信技术对于上述业务场景体现出极强的适用性。
NB-IoT单个基站城市内的覆盖范围可达直径2到4公里；郊区可达20到 40公里；由于其频率范围比较低，其中中国电信频率为800MHz,其信号强度可 增强20dB到27dB,具有较强地下穿透能力。因此，利用NB-IoT技术实现热力 管网环境上述多种常见的业务场景，具有十分现实的意义。
选取合适的NB-IoT模组，作为整体系统的通信模块，负责将环境感知层采 集到的数据以一定的格式上传到NB-IoT网络层，进而将数据上传到电信云平台。 与此同时，该模组也可以接受NB-IoT网络层下行的指令，以实现对于物联网设 备的下行控制。
目前，市面上常见的NB-IoT模组包括利尔达的NB模组,移远的NB模组， 高新兴物联的NB模组等。几款模组的性能以及相应的AT控制指令集合类似, 并无较大的差异。其中利尔达NB-IoT物联网模组是基于华为海思芯片组开发的， 它具有低功耗、小体积、强抗干扰能力等优势，几乎可以满足广域物联网领域的 全部需求，开发者可以利用该模块迅速地设计及开发所需的物联网产品。基于实 验技术层面的需求，本系统选取利尔达的NB模组，利尔达NB-IoT模组如图3-4 所示。
图3-4 利尔达NB-1 oT模组样图
该产品包括2路UART接口，1路ADC接口，1路SIM/USIM卡通信接口， 软件支持3GPP TR 45.820以及其他的AT拓展指令。在模组的内部嵌入UDP、 IP、CoAP等常用的网络协议栈，可以满足热力领域系统任务集当中存在的全部 需求。
17
NB-IoT模组作为物联网终端设备中的通信模块，主要用于接入运行商的 NB-IoT网络，将数据以模组内置协议栈的格式发送至NB-IoT对应的网络基站, 并接收来自于网络层的命令下达。封装成型的NB-IoT模组凭借其多种不同的工 作状态以及封装好的多种协议栈，可以更好地发挥NB-IoT模组低功耗与广覆盖 的特性。
NB-IoT模组引脚具体对应位置如图3-5所示。
图3-5 NB-IoT模组引脚图
3.2.2	MCU 选型
低功耗是对物联网产品的基本要求，功耗的评估对于物联网终端设备显得尤 为重要。而实现低功耗方案的关键在于MCU对于系统中执行任务以及各个模块 的合理调度，选取适合硬件系统的MCU就显得尤其关键，本系统选择的MCU 为STM32L系列。
STM32L低功耗系列，是ST(意法半导体)公司为了对嵌入式系统功耗以及成 本有着极高要求的场景而设计的系列产品，器件集成了通用串行总线(USB)的连 接功能，以及32MHz工作的高性能ARM Cortex-M3的32位RISC内核频率 (33.3DMIPS),存储器保护单元(MPU),高速嵌入式存储器(高达128KB的闪存和 高达16KB的RAM)以及连接到两个APB总线的各种增强型I/O和外设。同时, 该传感器包括丰富的GPIO外设接口，包括但不限于SPI通信接口、RS485接口、 IIC通信接口、ADC转换接口，极大程度上支持各式的外设传感器，满足实验需 求。
虽然STM32F系列在性能表现上会更胜一筹，但是在广域物联网环境条件
18
下，该系列设备显得功能冗余，反而会造成不必要的功耗浪费。因此，本文在实 际开发以及硬件验证的过程中,均使用STM32L系列作为硬件系统的控制模块。
3.2.3	传感器选型
为满足广域物联网系统任务调度方案中所涉及到的所有任务，在环境感知层 方面，需要使用的传感器包括但不限于：用于采集热力管网数据的ADC压力变 送器及温度变送器，用于收集流量数据的丹弗斯流量表，以及用于异常震动监测 的三轴加速度传感器。
这里，以提供各种低功率状态的三轴加速度传感器LIS3DH为例，说明环境 感知层的工作模式。这种设备具有低功耗操作模式，可实现高性能节能和智能嵌 入式功能。LIS3DH具有多种动态可选范围，可以在1HZ至5KHz的范围内输出 数据速率下测量加速度。该传感器可由自身的状态唤醒或者是自由落体唤醒，以 中断的方式与处理器通信，而中断信号产生的阈值以及时间跨度均可由开发者所 设定。该设备具有多级别的FIFO缓存，以降低主处理器的功耗，设备封装标准 极高，适用温度范围满足实验所需。
LIS3DH传感器会提供以下三种不同的低功耗状态：
1	.掉电模式。在该模式下，传感器当中几乎所有的内部模块都将关闭以实 现最小化功耗，仅存在SPI等部分数字通信接口仍然处于正常工作状态。 开机并启动LIS3DH传感器后，设备将默认配置为此模式。
2	.正常模式。该模式为LIS3DH传感器的正常工作状态，在传感器中的所 有元器件都处于工作模式，可以保证传感器具有极高的数据精确度，同 时，处于该模式下的传感器系统功耗也最高。
3	.低功耗模式。处于低功耗模式时，传感器设备仍然可以正常地工作。低 功耗模式与正常的工作模式的不同之处在于，低功耗模式会以牺牲部分 数据的精确度为代价来到达减少功耗的目的。
在数据的分辨率允许的情况下，可以使用LIS3DH传感器的低功耗模式，已 达到节省功耗的目的。
除了 LIS3DH传感器，在本章中所设计到的其他智能传感器都会提供多种不 同的工作状态以及灵活的采样频率、测量精度选择等，可以根据系统对于功耗以 及性能在不同时刻的不同需求，对各种智能设备的使用做出合理性优化。
3.2.4	硬件部分设计方案
目前而言，在整个热力行业，基于NB-IoT的结构模块化终端产品的开发都
19
在进行中，本文对于功能模块主要包括热力管网压力监测，流量监测，热力管网 测温，井盖数字化状态监控四个部分。本文以NB-IoT终端产品结构模块化为基 础，在保证硬件系统性能的前提下，通过设计合理的低功耗任务调度算法，降低 系统功耗，延长物联网终端设备寿命。硬件部分设计方案如图3-6所示。
图3-6硬件部分设计方案图
硬件设备整体方案采用模块化设计，物理层控制主板上内置MCU,控制 NB-IoT通信模块以及其他感知识别层的传感器，控制主板中烧录控制程序，保 证整个系统能够正常运转。感知识别层的外设模块主要分为以下四类：井盖数字 化状态监控模块、流量监控模块、热力管网压力测量模块和热力管网测温模块。 其中，井盖数字化状态监控模块通过SPI接口与控制主板相连接，流量监控模块 使用RS485接口，热力管网压力测量模块和热力管网测温模块则使用ADC接口。
控制主板在开启工作后，通过扫描以下四类接口对应的串口位置来获取所连 接感知识别层模块的类别，以便在获取类别之后调用对应的子程序开启响应的工 作。模块化的四类产品的相同之处在于都采用内置MCU的控制主板，通信模块 同为NB-IoT模块，并且都与热力行业的需求息息相关。
具体而言，本文采取模块化设计方案达到一板多用的效果，即使用同一块携 带NB-IoT通信模块的控制主板的情况下，通过接入不同的感知识别层的外设模 块，接入电源，模组初始化之后，系统可以进入正常的工作状态，实现对于环境 信息的传输与处理，且不受其他外界条件所影响。
硬件系统模块化的实现，本文采用的主板为STM32L151类型单片机，控制 主板连接并控制NB-IoT通信模块，主板上面设有SPI接口，HC接口，RS485 接口，ADC接口等多种类型的数据接口。对应本文所针对的应用场景，在控制 主板投入使用前，烧录已经编译的单片机程序，当系统上电之后，模组初始化, 程序采用串口中断监测对应位置数据接收状态的方式来判断本次控制主板所连 接的感知识别层的外设模块类别。由于本文具体应用场景分别使用不同的数据传
20
输方式，即每种应用场景使用与控制主板所连接的数据接口类型不同，且每种实 施案例的应用场景不同，采用串口中断的方法可以根据不同的接口对感知识别层 的外设模块类别做出一对一映射式判断。在控制主板有效识别出应用场景类别之 后，调用对应的子程序，开启系统的运作，对于目标环境信息进行有效地传输与 处理。而每当需求更改时，即需要获取的环境信息类别发生变化时，仅需要更换 感知识别层的外设模块，之后在对应的另一个环境重新做模块连接即可，接入电 源，模组初始化之后，系统可以再一次进入正常的工作状态。在此过程中，硬件 控制主板并没有发生任何变化，NB-IoT通信模块并未发生变化，控制主板中存 储的程序依旧可以使用，无需人为再次烧录，所需改动仅仅在于感知层外设以及 环境的变化，即为通过模块化设计实现一板多用的效果。
从程序的角度解释硬件系统模块化的实现如下：
adc_conftguration()；
spi_configurationO ；
rs485_configuration()； shtll_configurationQ ； getFlagO； 〃获取标志位 delay_ms(l000)；
switch(flag){	〃根据标志位判断外设类别,并启动相应NB-IoT配置
case 1:	NBjidc_configuration() ； break；
case 2:	NB^pi_configuration() ； break；
case 3:	NB_rs485_configurationQ ； break；
case 4:	NB^htll_configuration() ； break； default: printf("error\n")；
}
〃根据对应条件改变标志位的值
getFlagO (
if(adc对应串口有数据)&&
(数据符合实际范围)
then flag = 1；
else if(spi对应串口有数据)&& (数据符合实际范围) then flag = 2；
else if(ra485对应串口有数据)&& (数据符合实际范围) then flag = 3 ；
21
else if（shtll对应串口有数据）&&
（数据符合实际范围）
then flag = 4；
else flag = 0；
〃判断串口是否接收数据的方法举例
while(l)
(
if(USART_GetFlagStatus(USARTl, USARTJFLAGJIXNE)==SET) (
RxBufferl [RecLenl++/=USAR T^eceiveData(USART1)；
yvhile(RecLenl ==100)；
}
for(i=O； i<100； i++)
{
if((RxBufferl[i]=='O,)&&(RxBufferl[i+lJ=='K'))
(
GPIOJiesetBits(GPIO_LED, DSl^IN)；
Delay(0x3FFFFF)；
所谓的数据符合实际范围是指，根据实际情况，数据应该分布在符合外界物 理环境的实际范围，具体而言以热力管网温度测量为例，ADC接口回传的温度 数据典型值范围在30摄氏度至110摄氏度之间，而如果发生接口接触不良等特 殊情况，可能会出现浮空输入导致回传数据错误，进行对应的数据监测可以有效 地避免此类事件的发生，进而在一定程度上减少上传数据误报次数，提高系统性 能的同时节省系统功耗。
硬件部分的工作流程为：系统上电，模组初始化，使用NB-IoT模块获取当 前时间，程序判断时间是否在供暖期内，如是，进入深度睡眠模式，如否，则模 组正常工作，NB-IoT模块平时工作在睡眠模式，定期唤醒发送数据来达到降低 功耗的目的。MCU根据程序的设定接收传感器传输的数据并存储，程序判断接 收到的数据是否存在异常，对存在异常的数据进行丢弃。更改已经存储数据的格 式，使之符合云平台的数据接收标准，MCU控制NB-IoT模块发送数据，使用 协议为CoAP,数据途经NB-IoT基站，IoT核心网，数据传输至IoT云平台，最
终到达前端页面进行数据展示。
3.3实时操作系统的移植
gC/OS-III是专门为单片机设计的嵌入式操作系统，非常适用于小巧的控制 器，将该系统移植到STM32L系列单片机当中，并重置系统的任务管理、时钟 控制以及中断响应，使得硬件系统能够更有效地运行多任务模型，更顺畅地进行 任务调度。
3.3.111c / OS-III系统的移植
向嵌入式设备移植实时操作系统主要基于以下几点考虑：
1	.嵌入式的实时操作系统可以实现不同任务之间的任务调度，使在系统当 中共存的任务能够以一定的规律有序地运行。
2	.嵌入式实时操作系统可以有效地实现对于底层硬件设备的有效控制，而 通过这一部分功能，系统可以更加有效地完成对系统电源的动态功耗管 理过程。
3	.嵌入式实时操作系统能够实时地采集到系统中各个任务的状态信息，例 如，性能状况、工作条件等需要收集比对的信息，使得系统可以及时地 获取任务进程的工作状态，并进行及时的功耗管理。
gC/OS-ni系统可在多种类型的MCU或者ARM系统上运行。操作系统的代 码可以裁剪，实时性强，可以很方便地进行系统移植。gC/OS-III操作系统在最 大的程度上支持C语言的开发，因而具有良好的嵌入式程序移植性能，支持标 准C语言开发的IDE均可以开发和使用。gC/os-in系统已经实现开源，系统的 结构清晰、程序的架构良好，系统的内核支持编辑，最大程度地方便开发者的使 用。将pC/OS-III引入STM32L系列单片机当中，可提高嵌入式系统的稳定性与 实时性。
将gC/OS-III系统移植到STM32系列开发板。首先，需要对嵌入式系统的 系统时钟进行修改，将FiC/OS-ni系统中原有的系统时钟屏蔽掉，使用Cortex-M3 内核标准中定义的SysTick时钟；之后，需要使用gC/OS-III系统的中断配置函 数代替原有的中断；最后定义系统的任务优先级以及相应的配置。gC/OS-III系 统移植到STM32系列开发板的流程如图3-7所示。
23
图3-7实时操作系统的移植过程图
在将^C/OS-III系统移植到STM32L系列开发板的过程中，首先需要实现的 是系统定时器以及系统终端的相关配置。gC/OS-III系统需要配置一个滴答定时 器，该定时器可以实现每1ms自动中断响应一次，为操作系统提供系统时钟、 任务调度时钟以及软件定时器时钟等。具体的做法是：将tiC/OS-ni系统中原有 的系统时钟屏蔽掉，使用Cortex-M3内核标准中定义的SysTick时钟函数接口， 将该接口嵌入到RC/OS-in操作系统当中，以重新配置系统时钟，具体实现函数 如图3-8所示。
void OS_SysTicklnit(void) r
RCC_ClocksTypeDef clock;
INT32U temp;
RCC_GetClocksFreq(&clock);
temp =(INT32U)clock;
SysTick_Config(temp);
图3-8 系统时钟配置
24
3.3.2系统任务管理及中断响应
在修改系统时钟之后需要重新配置系统的中断实现，删除原有的ST标准库 当中相关的中断配置，即stm3211xx_it.c文件下的所有内容，使用rC/OS-HI操 作系统当中的中断配置函数来代替，以达到使用操作系统来管理和控制系统终端 响应的目的。
当向STM32L系列开发板移植了 pC/OS-III操作系统之后，系统当中所存在 的所有任务程序的创建以及执行都会由操作系统所接管。任务程序的创建需要使 用操作系统所提供的标准函数接口，这样便于系统对任务进度的管理与把控。一 般而言，任务程序有以下几个状态：休眠态、就绪态、运行态、挂起态、中断服 务态，任务程序的状态转移图如下图3-9所示：
图3-9 rC/OS-I II操作系统任务状态转移图
在nC/os-hi操作系统当中，系统中的任务状态如上图所示，而任务的执行 过程则通过gC/OS-III操作系统当中的库函数实现对于以上工作状态的转换。 KVOS-in操作系统的任务状态转移过程与linux操作系统的进程状态转移过程基 本一致，但在任务状态转换的过程中所调用的库函数有所不同。其中，pC/os-in 的任务休眠状态即为挂起状态，当系统中的任务处于休眠状态时，该任务不可以 被操作系统进行任务调度，经常使用OSTaskDelO函数来使某个任务进入休眠状 态，而任务退出休眠状态则采用OSTaskCreate()函数。
在gC/OS-III操作系统中任务的中断状态，通常是由任务的运行状态转换而 来，若中断发生，中断会挂起正在执行的任务并去处理中断服务程序。中断服务 程序中可能有某些任务等待的事件。在这种情况下，一般需要有中断事件或者是 由来自于其他正处于运行状态的任务发出的信号量，使得处于中断状态的任务重 新进入就绪状态，以等待系统的再次调用，FiC/OS-III操作系统任务切换流程如 图3-10所示。
25
图3-10 nC/OS-l I I操作系统任务切换流程图
在nc/os-ni操作系统中，系统通过调度程序以确定系统中任务的运行顺序。 gC/OS-III是基于优先级的抢占式内核的操作系统，系统中每个任务所分配优先 级由该任务的重要性所决定。其中，抢占是指当发生任务间的通信时，如果具有 较高优先级的任务被其他任务通知启动，并且较高优先级的任务已经处于就绪状 态，那么该任务将会在下一时刻得到处理器的控制权，并将就绪状态转换为运行 状态。例如报警任务与其他普通的工作任务相比优先级更高，那么报警任务在接 收到来自其他任务的通知之后，可以通过抢占的方式去获取处理器的控制权，进 而实现任务切换。
3.4基于DPM的低功耗解决方案设计
动态电源管理技术的本质其实是对于系统电源管理的一种机制，通过在系统 正常运转的时候动态地管理电源，达到减低嵌入式系统功耗的最终目的。在系统 硬件设计部分加入动态电源管理技术可以有效地降低系统功耗。
3.4.1	系统任务集合
为了使本章节的阐述更加清晰，根据现有的广域物联网环境并结合热力领域 26
的实际需求，设计这样一个窄带物联网硬件系统，该系统可以实现对于热力管网 环境的监测控制，提供的功能包括但不限于采集热力管网环境的温度数据、压力 数据、流量相关数据以及井盖异常震动数据,硬件部分与对应的服务器双向通信, 硬件部分通过NB-IoT通信模组实现系统的数据上报以及命令下达。
1	.任务1：热力管网温度数据采集，该任务由具有低功耗模式的温度变送 器完成，任务计划每2小时采样一次热力管网温度信息，通过MCU计 算得到实际物理环境数据与本地数据进行比对，若温差大于等于0.5C, 则启动任务5进行数据上报，若温差小于0.5C,则不启动通信任务，同 时更新本地数据。
2	.任务2：热力管网压力数据采集，该任务由具有低功耗模式的压力变送 器完成，该任务原理类似于任务1,数据上报的压力差阈值为（MMpa。
3	.任务3：震动异常数据采集，该任务由LIS3DH传感器完成，任务的数 据采集以及数据传递均通过SPI的通信方式完成。值得注意的是，该任 务并非周期采样，而是不定时发生中断，当LIS3DH传感器判断有异常 震动发生时会输出高电平中断信号，系统微控制单元在接收到中断信号 之后会启动任务5。
4	.任务4：流量数据采集，该任务采集的数据包括：瞬时流量数据、累计 热计量值、入口温度、出口温度等多种类别数据，多功能流量表以发送 数据包的形式通过RS485接口与系统微控制单元进行通信。每隔2小时， 由系统为控制单元唤醒流量表，流量表在被唤醒后将数据包发送到系统 微控制单元，待取出关键数据后启动任务5进行通信。
5	.任务5： LPWAN通信，该任务由系统的通信模块，即NB-IoT模组完成， 任务1至4在采集到数据后并且MCU确认数据需要发送时，都需要经 过通信模块完成相应的发送任务。
6	.任务6：系统后台，该任务由MCU完成，在系统上电后，该任务保证系 统的各模块完成相应的初始化工作，并且根据各模块的工作状态对应地 调节各模块的工作模式。此外，该任务还利用任务间通信接收来自其他 任务的报警信息。因此，后台程序是整个任务调度方案能否顺利实现的 关键。
为了在广域物联网环境实现基于状态的低功耗解决方案，结合工程的实际情 况,在硬件系统中，通过模块化设计实现了该工程中需要的所有进程,具体包括： 异常震动采集进程，热力管网ADC温度数据采集进程，热力管网ADC压力数 据采集进程，流量数据采集进程，NB-IoT模组进程以及后台调控进程，各个进 程的周期如表3-1所示。
27
表37任务集合表
进程	周期单位/min	进程性质
热力管网温度采集进程Pl	120	非守护进程
热力管网压力采集进程P2	120	非守护进程
异常震动检测进程P3	不确定	非守护进程
流量数据采集进程P4	120	非守护进程
通信进程P5	不确定	非守护进程
后台进程P6	不确定	守护进程
3.4.2系统模块化低功耗状态调节
动态电源管理技术在嵌入式系统降低功耗方面有着十分显著的作用，其本质 是对于系统电源管理的一种机制，通过在系统正常运转的时候动态地管理电源， 达到减低嵌入式系统功耗的最终目的。特别令人关注的是，该技术可在确保满足 运行任务实时性的情况下即时调整电源参数。广域物联网系统模块化分一般包括: 控制模块、供电模块、指示模块、通信模块以及传感器模块。具体系统划分简图 如图3-11所示。
图3-11广域物联网系统模块化分简图
正如前文中所提到的，动态电源管理技术在本文中的主要应用对象是 NB-IoT模组（通信模块）,STM32L151的MCU（控制模块）以及各种智能传感器（环 境采集模块）。结合项目的实际工作流程，在系统中运行合理的动态电源管理技 术，可以实现在保证系统正常平稳运行的前提下，合理安排各个模块进入低功耗 模式，从而达到了既保证了系统的性能，又降低了系统功耗的效果。
目前市场上存在多款NB-IoT模组，但是模组根据使用场景不同，通常具有 以下三种不同级别的低功耗功能：
28
NB-IoT模组根据不同的使用场景主要存在以下三种不同级别的低功耗模式: 1.主动模式：在该模式下，模组当中的所有模块的功能是可用的，并且所 有的处理器是可以工作的。数据上报以及网络侧命令下达都可以执行。 而模组只有在主动模式下，才能实现与其他工作模式的转换。
2	.待机模式：在待机模式下，所有处理器均不工作，但所有外围设备接口 都可以工作。同时，由于系统时钟仍在工作，模组可以通过时钟控制和 电源控制来降低功耗。当处理器执行等待中断指令时，模组将进入待机 模式。
3	.深度睡眠模式：在深度睡眠模式下，模组中只有32KHz RTC起作用， RTC中断或RTC生成的外部事件可以更改模块的工作状态。处理器通过 设置深度睡眠，然后执行等待中断指令来设置此模式。
而NB-IoT模组三种工作状态之间的相互转换过程如下所示：
1.	模组发送数据完毕处于Connected态，启动“不活动计时器”，默认时间 跨度为15s,计时器可配置的范围为1s至lho
2.	“不活动计时器”超时，NB-IoT模组会进入IDLE态，启动定时器 (Active-Timer [T3324]),超时时间配置范围为 2s〜186min。
3.	Active-Timer超时，模组进入PSM状态以实现低功耗，1AU周期结束时 进入Connected态，TAU周期【T3412】配置范围为5411山厂31011。
很多单片机有低功耗模式，STM32L系列也不例外，在系统或者电源复位后， 微控制器处于运行状态之下，HCLK总线为系统处理器提供时钟。当系统微控制 器不再需要继续运行时，可以利用STM32L系列自带的多种低功耗模式来节省 系统的功耗。STM32L系列的低功耗模式介绍如下：
1	.停止模式：所有时钟都已停止。
2	.待机模式：1.8V内核电源关闭。
3	.睡眠模式：内核停止，仅存在部分的外设仍然处于运行状态。
STM32L系列低功耗模式具体介绍如表3-2所示。
表3-2 STM32L的低功耗模式介绍
模式	唤醒	对时钟的影响	电压调机器
睡眠	任何中断/唤醒事件	无	开启
停机	任何外部中断(外部中断寄 存器中设置)	HSI以及HSE振 荡器关闭	开启或处于 低功耗模式
待机	WKUP引脚的上升沿、RTC 闹钟事件、NRST引脚上的 外部复位、IWDG复位	HSI以及HSE振 荡器关闭	关闭
STM32L的低功耗模式设置如图3-12所示。
29
void PWR_EnterLowPowerRunMode(FunctionalState NewState)
{ 一
/* Check the parameters */
assert_param(IS_FUNCTIONAL_STATE(NewState));
if (NewState != DISABLE)
(
PWR->CR |=PWR_CR_LPSDSR;
PWR->CR |=PWR_CR_LPRUN;
)
else
{
PWR->CR &= (uint32_t)~((uint32_t)PWR_CR_LPRUN);
PWR->CR &= (uint32_t)~((uint32_t)PWR_CR_LPSDSR);
}
}
图3-12 STM32L的低功耗模式
此外，STM32L系列可以通过下面方式新一步降低功耗：
降低系统工作频率：在工作模式下，通过对预分频器寄存器的修改，实现对 于系统时钟运行速度的降低。而在进入睡眠模式之前，也可以使用预分频器来减 少外围时钟。
关闭APB和AHB总线上未使用的外设时钟：在操作模式下，可以随时停止 为外设和存储器提供时钟(HCLK和PCLKX),从而降低功耗。为了进一步降低 睡眠模式下的功耗，可以在执行WFI或WFE指令之前关闭所有外设时钟。
3.4.3动态电源管理解决方案
在2.3.1章节中提到动态电源管理技术中常用的几种策略。在上述的三类策 略当中：预测策略以及基于马尔科夫决策的随机策略均对系统的空闲时间分布有 一定的要求，在策略的适用性上面具有一定的限制性，特别是当系统遇到一些突 发事件的时候，如果缺乏对于策略的补偿措施，往往会严重影响系统的低功耗效 果。因此本文在动态电源管理技术的策略选取上主要应用超时策略。
在较为成熟的超时策略中，Timeout算法的使用最为普及。其基本思想与一 般的超时策略并无过多差异，根据系统的性能需求来设置系统对应的超时门限时 间，超时门限时间记为T,可以将T看成是一个临界的时间，每当系统的空闲时 间累计超过超时门限时间T时，系统将根据实际状态进入对应的低功耗模式。 在设计具体的超时策略时，超时门限时间T的值可能会随着系统运行状态的改 变而被重新设定，因此T的值可能不是一成不变的。
Timeout超时算法因为其原理简单、实现容易、对系统的负担较小等特点，
30
在动态电源管理技术当中得到了较为广泛的使用。特别是系统延时小这一优势， 在搭载了实时性操作系统的嵌入式设备当中，更能符合任务调度过程对于实时性
的要求。Timeout超时策略如图3-13所示。
系统初始化
系统处于正常的工作模式
—<：量断系统中任务是否执行完£>
1是
空闲状态计时器启动
系统进入休眠状态-存在中断唤醒
图373 Timeout超时策略图
在本文的动态电源管理中采用了 Timeout超时策略，因为该策略在实际的应 用过程中受限制较小，对整个系统的稳定性没有较高的要求，不会因为外界环境 变化等因素而对低功耗设计效果产生严重的不良影响。而在实时操作系统的设计 当中，响应延时是该系统能否达到预期设计效果的重要参考因素，Timeout超时 策略极大程度满足系统的实时性要求。
基于前文所介绍的动态电源管理方案以及在广域物联网环境下的系统任务 集合，结合物理网硬件部分的设计方案，将动态电源管理技术应用于系统任务集 合当中，得到具体的任务调度方案如图3-14所示。
31
图3T4动态电源管理的任务调度方案
3.5	数据传输及陋
作为低功耗广域物联网领域的应用，数据上报以及命令下达为系统设计当中 的基本功能实现,在此基础上,针对长周期监控上报类任务的数据丢包这一问题， 设计NB-IoT数据的消息重传机制；针对来自NB-IoT客户端的高并发请求，设 计服务端消息处理方案。
3.5.1	数据上报
近些年来，物联网业务类型众多，每种类型的业务都有自身的特点，从3Gpp 定义的特点来看，主要将NB-IoT业务模型场景分为3类：
数据上报类：主要应用于物联网终端设备主动上报数据的场景，终端上报数 据结束后，很快进入PSM状态，直至终端再次上报数据时从PSM状态唤醒。
命令下达类：主要用于满足向物联网终端下发控制命令的场景，为了使终端 能够快速地接收到下发命令并对收到的命令做出响应，该类场景下终端默认不开 启PSM模式，仅使用eDRX功能模式。
综合应用类：主要应用于物联网终端设备既需要数据上报又需要命令下达的 复杂场景。
由于目前NB-IoT终端配置PSM或eDRX相关参数定时器的方式不够灵活， 无法做到使用PSM状态与IDLE状态之间的自由切换，本文所使用的NB-IoT业 务模型为第一类场景。
32
NB-IoT基站通过以下两种协议来链接基站：
1.	CoAP协议通信链路：MCU（NB设备）一NB模块（UEXNode—核心网 —IoT渠道一APP效劳器」手机终端APP
2.	UDP协议通信链路：MCU（NB设备）一NB模块（UE）~~eNode—核心网 —UDP效劳器一手机终端
结合2.2.2章节所述的CoAP协议特点分析以及对物联网环境的适用性分析， 本实验使用第二种方式来链接基站。
和常见的嵌入式通信设备类似，NB-IoT终端设备也采用串口与MCU直接 进行通信。首先，在此模式下，开发者的物联网终端设备可以通过NB-IoT通信 模组发送请求数据到相应的CoAP服务器;之后,NB-IoT通信模组接收来自CoAP 服务器的命令下达。在此过程中，使用者无需了解NB-IoT终端设备的数据与网 络数据包之间数据转换的具体实现方式，通过简单的参数配置，就可以实现 NB-IoT终端设备与CoAP服务器间的双向通信；最后，通过云平台提供的通用 接口将数据导入后台应用程序。
3.5.2	命令下达
NB-IoT虽然支持双向数据透传，和传统2G网络有所不同，为节省电量， 模块随时可以向服务器发送数据。但是，服务器并不能在任何时候将数据发往串 口，例如，当NB-IoT模组处于PSM状态时，来自服务端的下行命令将不可达， 这也是NB-IoT网络的所具有的特点。
命令下达主要分为以下两种方式：
立即下发：立即发送收到的命令，如果终端设备此时处于离线状态，那么以 立即下发为实现方式的命令下达将失效。立即下发方式对命令实时性有要求的场 景具有较强的适用性，例如，天然气开关阀、监控器开关等。
缓存下发：平台收到命令后放入队列暂存。当终端设备再次上线的时候，平 台检测到设备的上线状态，将会依次下发暂存于命令队列中的命令。缓存下发方 式适用于对实时性要求不高的场景，例如，配置智能抄表的参数。
两种方式的使用取决于NB-IoT客户端设备在模组方面的低功耗策略，如果 NB-IoT客户端设备在进入低功耗状态时使用了 PSM技术，则该状态下的服务端 下行命令不可达，因此需要选择缓存下发的方式实现命令下达，而如果NB-IoT 客户端设备并未开启PSM技术，则选择立即下发方式，对于命令的实时性要求 较高的场景更加适用。本文中NB-IoT终端设备使用了 PSM技术，因此命令下 达方式为缓存下发。
33
3.5.3	数据重传设计
在实际的工作环境中，NB-IoT客户端设备往往会存在长周期的监控上报类 任务，而这一类任务的严重的弊端在于较长一段时间内，NB-IoT客户端设备与 上游的服务端仅仅存在一次数据上报的交互，而一旦因为网络拥塞、服务端升级 等问题导致这次数据交互失效，NB-IoT客户端相当于在较长一段时间内与服务 端失联。因此，在系统设计中加入NB-IoT客户端的消息重传设计显得十分有必 要性。
在系统设计中引入NB-IoT设备消息重传机制，该部分包括在嵌入式端的消 息重传机制以及系统服务端的命令下达，通过定义事件要求NB-IoT客户端设备 重传消息。通过引入NB-IoT设备消息重传机制，可以在提升系统性能的同时, 有效地减少资源及功耗的浪费。
根据第二章所介绍的CoAP协议的消息类型，其中CON类型的数据包是需 要被确认的请求，如果发送的CoAP协议数据包为此类型，那么接收方必须对此 做出回应。在嵌入式端加入消息的重传机制，每当NB-IoT客户端设备准备好需 要发送的数据包时，客户端需要向上游服务器发送一个CON请求，而服务器如 果接收到了这个CON请求，则会给NB-IoT客户端返回一个ACK的消息。这个 过程为NB-IoT客户端与对应的服务端之间一次正常的通信过程。
假如在上述的通信过程中遇到信号不良等情况时，就会导致NB-IoT客户端 无法收到来自上游服务器发送的ACK的消息，此时NB-IoT客户端就会认为上 游服务器并没有收到CON请求信息，进而重新发送数据包。
为了避免由于网络信号等原因导致的NB-IoT客户端一直无法收到来自上游 服务器发送的ACK,而使NB-IoT客户端陷入死循环的情形，本文设计了嵌入式 端的消息重传机制在程序中设置了重传次数的计数器，数值为m,每次NB-IoT 客户端重新发送CON请求时，将m的值加1,设置重传次数阈值为n,当m等 于n时，NB-IoT客户端随即停止此次数据的发送。在嵌入式端通过串口监视器 监视设备状态，当设备发送CON请求并收到来自网络侧返回的ACK信号时， 串口打印Succeed字样，结束本次重传；当设备收到来自网络侧返回的RST信 号时，串口打印Error字样，在未达到计数器阈值时继续本次重传；当重传次数 达到阈值时，串口打印Failed字样，结束本次重传。物联网终端数据重传机制如 图3-15所示。
34
机制启动
图3-15物联网终端数据重传机制图
为使得消息重传机制更加合理，设置初始重传间隔时间为t,此后的每一次 重传时间间隔为前一次的2倍，直到重传机制结束。
值得注意的是，即使在设备端加入此消息重传机制，仍无法完全意义上解决 数据上报丢包的问题。因此，本文在嵌入式端的消息重传机制的基础上增加了系 统服务端的命令下行，通过定义事件要求NB-IoT客户端设备重传消息。在系统 服务端应用中加入Timer定时器，通过定时监测服务端数据库对应的NB-IoT客 户端设备数据上报的落库状态，判断是否存在数据上报丢包的情形，如果存在， 则通过CDP Server提供的应用接口触发定义的事件，通过命令下达的方式通知 到NB-IoT客户端设备，使得NB-IoT客户端设备重启消息重传机制，将NB-IoT 终端的缓存数据进行有效上报。
35
3.5.4	消息处理设计
随着5G时代的到来，万物互联盛况的出现逐渐成为可能。智能物联网设备 的数量迅速地增长，势必会导致设备产生的通讯信息越来越多，对物联网服务器 系统吞吐量、响应能力等方面的要求也就逐渐体现出来。
在基于NB-IoT的物联网系统中，随着NB-IoT设备数量的不断增加，必定 会产生高并发的数据等待系统服务端的处理。当服务端面临高并发数据时，如果 不能迅速处理来自NB-IoT客户端的请求，将会导致大量的请求堆积，进而可能 导致服务器瘫痪，引发大量的经济损失。因此，设计出能够应对高并发场景的服 务端系统具有重要的现实意义。
本节将分别从消息队列以及业务线程池两个方面来提升服务端的消息处理 能力。通过对消息处理机制的优化，服务端的消息处理能力得到了极大的提升， 而来自NB-IoT客户端的数据得到了充分的利用，有效地减少资源及功耗的浪费， 进而节约了功耗。
在考虑通信系统对于消息的处理能力时，通常需要解决以下问题：
1	.消息堆积问题
消息是指在应用与其他应用间传递的数据，而消息的表现形式各式各样，可 以简单到仅仅包含文本，也可以复杂到有一个结构化的对象定义格式。因为消息 的生产者与消费者是两个分开处理消息的系统，所以无法预知二者对于消息处理 能力的快慢，一旦在某个时刻消费者处理消息的速度无法赶上生产者发送消息的 速度，必然会导致消息逐渐积压且得不到释放。而在加入消息队列这一中间件来 暂存和处理消息之后，服务端将实现流量削峰，极大程度地缓解此问题。
2	.消息的顺序性问题
在实际的业务场景中，经常会遇到需要系统严格按照消息生产时的顺序来处 理的情形。例如，网购时候产生的订单，一般都会经过创建订单、完成支付、己 发货、已收货、完成订单等环节，而这些环节的顺序严格固定，否则在业务处理 上面就是不正确的。但是，在物联网的范畴内，一方面由于网络拥塞等问题，物 联网设备的数据上报即使具有顺序性，个别的消息仍会因为网络的不确定因素导 致延时，最终在消息的接收方可能仍然会呈现乱序；另一方面，物联网设备端发 送的消息相互间往往并不存在充分依赖性，在本文基于NB-IoT的物联网系统中， 即使物联网设备端发送的消息不具备严格有序的条件，只要每条消息能够在系统 服务端实现可靠投递，系统服务端对于接收到的消息进行合理的处理和反馈，即 可实现有效的设备交互。
3	.消息处理的效率性问题
它主要反映系统的响应时间和吞吐量。系统的响应时间是指系统处理发件人
36
的请求消息时所需的时间，吞吐量是指系统可以在单位时间内处理的消息数。尽 管在物联网的领域内，很多时候对状态数据的延迟要求不高，例如，环境监测项 目。但是，对于某些突发事件，例如，异常震动报警事件，对状态数据的实时性 有较高的要求。因此，提高系统服务端对消息处理的效率具有必要性。如果在一 定程度上缩短系统的响应时长，则会增加系统的吞吐量，并在一定程度上提高系 统的处理效率。
针对以上问题，本文设计了对应的消息处理方案，基于消息队列的消息处理 方法如图3-16所示。RocketMQ是一种工程中常用的消息队列，引入RocketMQ 这一消息中间件模块，借助RocketMQ可以对数据流量削峰填谷的特性，对来自 于NB-IoT设备端的大量数据进行有效缓冲，完成了数据解析与数据处理的应用 解耦。
图3-16基于消息队列的消息处理方法
系统服务端对消息的处理主要涉及数据库的操作，其中等待I/O处理往往会 占用线程大量的时间。如果使用消息队列中的消费者去处理这些耗时的操作，将 会存在消费者线程被阻塞的风险，一旦消费者拿到了这些上报数据的最终处理权, 却无法在合理的时间范畴内将这些数据消费处理，将会触发数据堆积等严重的不 良后果。
为了解决这个问题，本文系统在服务端业务处理部分加入了业务线程池，采 用多线程的方式处理数据库I/O操作，并设计了线程池调优的方案，有效减少了 I/O等待时间浪费的资源，提高了 CPU的利用率。
通过应用消息队列和业务线程池，一方面可以解除系统消息处理和消息收发 之间的耦合性，提高系统的资源利用率；另一方面也可以保证系统收到的每一条 消息都能得到快速的处理和响应，并且由原来的单位时间处理单个任务变成同时 处理多个任务，进而提高了系统服务端处理消息的性能。
37
3.6	本章小结
本章节主要阐述了基于NB-IoT的热力监测系统设计。首先，对基于NB-IoT 的热力监测系统进行总体框架的选型和设计；其次，分别详细说明了硬件设备的 选型及其整合方案、实时操作系统的移植与程序改造，并在此基础上引入动态电 源管理的低功耗解决方案，进一步降低硬件部分的功耗；最后，分别对数据重传 以及消息处理提出了对应的改进方案，进一步优化了系统的性能。
38
第四章 基于NB-IoT的热力监测系统实现
基于NB-IoT协议的热力监测系统设计，本章进行对应的系统实现。针对具 体的应用场景，对基于NB-IoT协议的热力监测系统进行原型验证。
4.1	系统概述
为了实现本文第三章所设计的基于NB-IoT的热力监测系统的全部方案，本 章节将选取热力管网环境作为具体的应用实现场景，以实现基于NB-IoT的热力 监测系统。由于目前NB-IoT标准协议主要应用于广域物联网下的长距离设备通 信，并且在设备选型时环境感知层设备均为热力领域常见传感器，因此实验采用 的应用场景是在广域物联网环境下，对热力管网环境进行监控，基于NB-IoT协 议的客户端设备对热力管网环境进行数据采集以及报警监控，NB-IoT客户端设 备与系统服务端进行有效的双向通信。整体系统框架图如图4-1所示。
图4-1 热力管网检测系统整体架构图
基于NB-IoT的热力监测系统的实现分为四个部分，第一部分为NB-IoT客 户端设备与系统服务端进行有效的双向通信实现，该部分较为基础，本文对此不 作过多深入介绍；第二部分为NB-IoT设备的低功耗实现，即基于动态电源管理 的低功耗解决方案效果验证；第三部分为NB-IoT设备消息重传机制实现，该部 分包括在嵌入式端的消息重传机制以及系统服务端的命令下行，通过定义事件要 求NB-IoT客户端设备重传消息；第四部分为服务端消息处理方案的实现，仿真 模拟服务端接收到大量来自NB-IoT客户端发送的消息，主要从系统平均响应时 间以及服务端I/O的吞吐量这两个方面对服务端的消息处理效果进行有效验证。
39
4.2	设备端实现
结合热力领域的实际需求以及本文341章节中设计的系统任务集合，对设 备端进行嵌入式编程以实现各工作进程的基本功能。
4.2.1	温度监测设备
具体地，热力管网温度计量模块工作流程如图4-2所示，项目工作环境为热 力领域管道，使用ADC类型的温度传感器对热力管网环境的温度进行监测，传 感器与控制主板上的对应接口相连接，NB-IoT模组每2小时上传一次数据，当 热力管网温度发生剧烈变化时，取其最近10分钟内平均温度进行一次有效状态 传送，与后台应用服务之间的信息传递时间为1分钟以内，所传递的数据通过电 信loT平台传送到后台应用的数据处理接口，数据传递的周期以实际供暖期为参 考依据进行设置，在非供暖期内系统进入深度睡眠模式以节约功耗。图4-3为具 体温度监测设备。
图4-2 热力管网温度数据采集任务流程图
图4-3温度监测设备实物图
40
4.2.2	压力监测设备
热力管网压力数据测量模块工作流程如图4-4所示，项目工作环境为热力管 网内，使用ADC接口采集压力变送器的数据，NB-IoT模组每2小时上传一次数 据，当测量的热力管网压力参数出现剧烈变化时，其数值变化超过设定的阀值, 设备进行即时数据连接传递，启动设备报警事件，与后台应用服务之间的信息传 递时间为1分钟以内，所传递的数据通过电信IoT平台传送到后台应用的数据处 理接口，数据传递的周期以实际供暖期为参考依据进行设置，在非供暖期内系统 进入深度睡眠模式以节约功耗，图4-5为具体压力监测设备。
图4-4热力管网压力数据采集任务流程图
图4-5压力监测设备实物图
4.2.3	流量监测设备
流量监测模块工作流程如图4-6所示，项目工作环境为热力管网流量的进出 口，使用RS485接口采集多功能流量表所传数据。NB-IoT模组每2小时上传一 次数据，当测量的热力管网流量参数出现剧烈变化时，其数值变化超过预先设定 的阀值，启动设备报警事件，所传递的数据通过电信IoT平台传送到后台应用的
41
数据处理接口，数据传递的周期以实际供暖期为参考依据进行设置，在非供暖期 内系统进入深度睡眠模式以节约功耗，图4-7为具体流量监测设备。
图4-6热力管网流量数据采集任务流程图
图4-7流量数据监测设备实物图
4.2.4	异常震动监测设备
井盖数字化状态监控模块工作流程如图4-8所示，项目工作环境为市区及近 郊地区井盖内部，使用SPI接口采集三轴传感器所传数据，当井盖异常震动状态 发生变化时，启动设备报警事件，所传递的数据通过电信IoT平台传送到后台应 用的数据处理接口，模组常年工作，平时工作在睡眠模式，定期唤醒发送数据来 达到降低功耗的目的，图4-9为具体异常震动监测设备。
42
图4-8井盖异常震动数据采集任务流程图
图4-9井盖异常震动监测设备实物图
4.3	基于DPM的低功耗解决方案实现
本章节在广域物联网环境下，基于上述章节(3.4.1)介绍的系统任务集合并结 合实际情况，对基于动态电源管理的低功耗解决方案进行硬件实现。针对的应用 环境为热力管网环境，其中具体的工作任务进程包括温度数据采集进程、压力数 据采集进程、流量数据采集进程以及异常震动监测进程等。
通过将动态电源管理技术的低功耗方案应用于热力管网的实际环境中，可以 得到热力领域的硬件系统实际任务调度方案。如图4-10所示，实际任务调度的 过程遵循超时策略，NB-IoT通信模块不工作时，根据预先设定的时限，由正常 的连接模式进入IDLE模式，并最终进入PSM低功耗模式。MCU的工作模式取 决于方案中存在的4个工作进程的状态，而对于其他工作进程的监控管理，则由 守护进程通过进程间的通信完成。当所有的工作进程处于正常工作状态并且传感 器处于高精度模式时，MCU为保证系统的性能处于高频工作模式；当系统中仅
43
存在部分工作任务时,MCU处于低频工作模式；当系统不存在任一工作进程时, MCU进入低功耗模式，同时将系统中确定与工作任务无关的I/O引脚全部关闭。
守护进程通过进程间j 的通信•实时监测系I 统中存在的其他工作;
进程的工作状态I
温度传感器模块处于 正常模式，对应的进 程处于运行状态
控制模块处于低功耗模式 通信模块处于待机模式 守护迸程处于运行状态
一除守护进程外，其他任务 进程是否都处于休眠状态一一
流量数据采集进程
是
所有任务模块完成初. 始化流程
拄制模块处于匿眼模式
该进程暂时挂起，对应，专感 器模块1处于休眠模式
ye感器是否需要高精度〉一＞
该进程昔时挂起,对应传感 器模块1处于休眠模式
该进程暂时挂起.对应传感 器模块n处于休眠模式
流量传感器模块处于 正常模式，对应的进f
程处于运行状态
传感器槿块处于低功耗模式
传感器模块n处于低功耗模式
是
震动数据采集进程进程是否进入休眠 嗨:
通信模块处于待机模式一 守护进程处于运行状态
调用通信进程发送不 同传感器模块的提供 的数据到对应网关
传感器模块n处丁•正： 区模式，对应的进f 程处于运行状态：
通过任务向通信嗓醒 通信模块，使其调整」
到主动模式
图4T0基于动态电源管理的任务调度方案
在控制模块、通信模块以及各种传感器模块均完成相应的初始化工作之后， 由于通信模块并不处于被激活的状态，因而NB-IoT通信模组会依次进入IDLE 状态以及PSM状态，此时来自服务器的命令下行数据不可达，同时，整个系统 的守护进程将一直处于运行状态，收集来自于其他工作进程的状态相关信息，为 系统的动态功耗调节提供参考依据。相关代码如图4-11以及图4-12所示。
低功耗模块配置函数
Begin
配置控制模块可由RTC时钟唤醒，也可由外部中断唤醒 调用PWR_EnterSTOPMode()使得控制模块进入停止模式 此处为控前模块唤醒之后的起点，进行唤醒之后的初始化配置 调用stop_Configuration()进行中断状态的相关管脚配置 stop_Configuration() Begin
设置PA分组和PB分组的时钟
PA组关闭除了工作进程所需以外的管脚
PB组关闭除了工作进程所需以外的管脚
End
End
图4-11低功耗模块配置函数伪代码
44
动态电源管理任务调度函数
Begin
int counter = 0;
rs485_conf iguration()；
adc_configuration()；
spi_configuration()；
NBIoT_configuration();
SysTick_lnit();
End
for系统中存在的每一个工作进程
Begin
如果工作进程处于工作状态并且需要高精度，counter = counter + 1；
否则，继续此循环
End
Begin
如果counter ==最大工作进程数，STM32高频运行
否则，检查counter的值是否为零
如果为零，系统进入低功耗状态，启动低功耗模块配置函数
如果大于零，系统低频运行
End
图4T2基于动态电源管理的任务调度方案伪代码
4.4	服务端实现
基于上述章节的系统选型，介绍系统服务端的具体实现方式。
4.4.1	网关实现
NB-IoT设备应用层部分使用CoAP协议传送至指定目标IP,而在本文的系 统架构中，指定目标IP以及对应的端口号地址指向的是中国电信CDP Server, 该平台在整个系统中充当网关的角色，对NB-IoT设备产生的数据进行收集、暂 存以及转发等操作。
具体地讲，中国电信CDP Server负责收集在该平台上面已经在注册的 NB-IoT设备上报的数据包，并会将数据包存储到CDP平台对应的数据库当中， 该数据库具有时效性，每当NB-IoT设备上报的数据包对应的时间戳超过七天, 平台对该数据将不再显示，数据将被删除。
45
除了对于NB-IoT设备上报的数据包进行接收和暂存外，该平台还会为开发 者提供两种获取该平台上暂存的数据的方式，包括主动获取以及订阅通知的方式。 主动获取方式为开发者使用自身所开发的服务，结合自身需求与服务端的负载能 力,主动去电信平台获取对应的NB-IoT设备设备数据，而采用订阅通知模式则 是开发者使用所开发的服务被动式的等待平台的数据推送。而无论开发者采用任 何一种具体方式去获取平台的数据，得到的消息协议格式均为HTTP协议，这说 明在该平台内部存在着CoAP协议与HTTP协议之间的协议转换。在本文所描述 的架构中，由于在服务端应用中存在对应的报警事件定义，例如，异常震动数据 的上报，系统服务端应用与中国电信CDP Server的接入方式为订阅通知，即有 平台侧向应用侧进行数据推送，数据推送的格式为json,当推送的数据当中存在 触发服务端事件定义时，服务端应用将采取对应的措施。
4.4.2	服务端消息陋
RocketMQ的部署结构如图4-13所示，其中涉及到了 RocketMQ的全部核心 组件，并且在该部署结构下的所有组件均可实现水平拓展。
图4-13 RocketMQ的部署结构
RocketMQ核心组件包括：
1	.生产者(Proucer)负责生产消息，向消息服务器发送由系统生成的消息。
2	.消费者(Consumer)负责消费消息，从消息服务器拉取消息并将其推送至 用户的应用程序中。
3	.消息服务器(Broker)是消息存储中心，主要作用是接收来自于生产者的消 息并进行存储，而消费者从这里拉取消息。
4	.名称服务器(Name Server)用来存储Broker的元信息，并给生产者及消费 者提供消息的路由信息。
消息中间件模块引入了 RocketMQ的消息队列，借助RocketMQ可以对数据 流量削峰填谷的特性，对来自于NB-IoT设备端的大量数据进行缓冲，完成了数 据解析与数据处理的解耦。本文设计的消息中间件模块是根据具体业务为数据对
46
象制定相应的Topic, Worker线程中调用RocketMQ的Producer把数据处理模块 中生成的数据对象缓存到RocketMQ消息队列中。在业务处理模块中，RocketMQ 的Consumer Group根据对应的Topic拿到数据对象，并在Consumer中执行其具 体的业务逻辑从而消费掉消息队列中的消息。但是，在请求密集的时间段， Producer会往消息队列中缓存大量的消息，此时，若Consumer处理缓存消息的 速度跟不上Producer生产消息的速度，将出现大量消息堆积的情况，因此本文 所述的服务器系统性能的另一瓶颈在于服务器消费者一端的消息处理能力。
在服务端业务处理的逻辑中，很多时候会存在复杂而耗时的数据库操作，其 中等待I/O处理往往会占用线程大量的时间，而如果使用消息队列当中的消费者 去处理中这些耗时的操作，将会存在消费者线程被阻塞的风险，一旦消费者拿到 了这些上报数据的处理权，但是又无力在合理的时间范畴内将其操作完毕，将会 触发数据回滚操作，造成数据重复消费等不良后果。为了解决上述的问题，本文 系统在服务端业务处理部分加入了业务线程池，采用多线程的方式处理数据库 I/O操作，用于接收及处理复杂而耗时的数据库操作，有效减少了 I/O等待时间 浪费的资源，提高了 CPU利用率。
系统服务端由Java语言搭建，Java语言从1.5版本开始可以通过Executor 框架来控制线程的启动、执行和关闭，极大地简化了并发编程的操作。该框架中 Executors类提供了 4种可以用于创建线程池的静态工厂方法，但是框架内自带 的线程池都存在一些比较明显的缺陷：会造成OOM异常或者是stack overflow 异常，因此本文服务端线程池采用自行定义的线程池来实现业务。自定义线程池 构造函数如图4-14所示。
public ThreadPoolExecutorfint corePoolSize,
int maximum PoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runable> wordQueue, ThreadFactory th read Facto ryz	；
RejectedExecutionHandler handler）	-
图4T4自定义线程池构造方法
在设置自定义线程池的最大线程数时需要避免极端情况的出现，最大线程数 设置过大，可能会导致出现较高的内存使用量，耗尽处理器的资源；最大线程数 设置过小，可能会导致消息处理不及时，系统的吞吐量及消息处理能力无法得到 提升。在实际应用中可以使用公式4-1来设置线程池的最大线程数，而核心线程 数值设置为最大线程数的20%o
thread = % * -。+ 勺	（4-1）
其中，Nthread表示线程池的最大线程数，而Ncpu表示处理器的核心数目，g
47
表示为预期的CPU使用率，w与t分别代表任务的理论等待时间及计算时间。
4.5系统验证
基于NB-IoT的热力监测系统的验证原型分为一下几个部分：第一部分为 NB-IoT设备的低功耗验证，即基于DPM的低功耗解决方案效果验证；第二部分 为NB-IoT设备消息重传机制验证，该部分包括在嵌入式端的消息重传机制以及 系统服务端的命令下行，通过定义事件要求NB-IoT客户端设备重传消息；第三 部分为服务端对消息处理效果的验证，仿真模拟服务端接收到大量来自NB-IoT 客户端发送的消息，主要从系统平均响应时间以及服务端I/O的吞吐量这两个方 面对服务端的消息处理效果进行有效验证。
4.5.1	设■功耗ME
按照4.3章节的基于动态电源调节技术的低功耗方案描述，将其应用到现行 的硬件系统当中，经过实验测定，该低功耗方案在实际工作中的电流如表4-1所 Z]\ O
表4-1基于动态电源调节技术的低功耗方案电流表
工作状态	电流大小i/mA	持续时间Vs	备注
配置阶段	15-20	20	每次通电只需要经历 一次即一直工作
NB-IoT模组正常工 作并且发送数据	130-140	5	监测到硬件系统的异 常震动，唤醒MCU及 NB-IoT模组，调用通 信进程发送数据
发送完毕后MCU进 入停止模式，NB-IoT 模组进入IDLE状态	43-45	10	数据发送完毕之后，通 信进程进入IDLE状态
系统全部进入低功耗 状态	0.32		全部模块处于休眠或 低功耗模式
按照上表中呈现的实际数据，可以计算在应用基于动态电源管理的低功耗算 法后，该物联网终端设备的实际功耗情况。一般情形下物联网终端设备是没有异 常震动报警信息产生的，多数情况下处于低功耗状态，供暖期每隔2h发送一次 数据确认状态，非供暖期每隔一天发送一次数据确认状态，设备功耗的计算过程 如下：
48
P（设备常态）=0.32ma*24*60*60s=7.68ma - h
P（发送数据周期）=135ma*5s+44ma*10s*=0.310ma • h
P（供暖期一天尸7.68ma • h+0.310ma , h*12=11.40ma , h
P（非供暖期一天）=7.68ma • h +0.310ma=7.99ma • h
PL年尸7.99ma , h*243d+l 1.40ma , h * 122d=3332.37ma , h
根据上述计算，理论上该装置一年的耗电量在3332毫安时左右。同应用基 于状态的低功耗算法之前相比，可以有效降低系统功耗达到35%。实验使用的电 池组电量为12000毫安时，经计算该装置可有效工作3年以上。
4.5.2	数据重传验证
本文设计了嵌入式端的消息重传机制，在程序中设置重传次数的计数器，初 始数值为0,每次NB-IoT客户端重新发送CON请求时，将计数器的值加1,设 置重传次数阈值为5,当计数器达到重传次数阈值时，NB-IoT客户端随即停止 此次数据的发送。为使得消息重传机制更加合理,设置初始重传间隔时间为10s, 此后的每一次重传时间间隔为前一次的2倍，直到本次重传结束。在嵌入式端通 过串口监视器监视设备状态，当设备发送CON请求并收到来自网络侧返回的 ACK信号时，串口打印Succeed字样，结束本次重传；当设备收到来自网络侧 返回的RST信号时，串口打印Error字样，在未达到计数器阈值时继续本次重传； 当重传次数达到阈值时，串口打印Failed字样，结束本次重传，避免陷入死循环 的窘境。
在嵌入式端的消息重传机制的基础上增加了系统服务端的命令下行，通过定 义事件要求NB-IoT客户端设备重传消息。CDP Server平台模拟仿真命令下达如 图4-15所示，系统服务端应用程序实现命令下行如图4-16所示。
图4-15 电信CDP Server模拟命令下达
49
“ fa? L>te*>Adew?_hap5
:Sr JRz Syltem L:bf»T-
* 透 trz
：楼 ccmisvawei.servsre.BppAccffjsSsajrny
柒 ccm.k»;a>»*^serv>:e.biKd-Tssk
•榭 cec>H:awe'.ser<>:exon«T>3ns3eitve»y
>,. CreateDsviteCmiSCarcsTaskjaza
］，Cr.re土KweCoKFacd.iavsj
.i I*vc*aDevi«S±rzic*s ja .b
* Modii^{>e(Xee£ommar-ijava
)Qus <yDsviceCmdC »^ce FTm Ljav«
J； QuefyC^vi^Co-Tvnsndsjjva
电 comJx»we：.s«v»c«.casaCsferfcn
* ccmJxswt .service.eeviceGrcu^^ana5emen:
击 <cm>um*riier<w：eJ：r<weMen«Cffme«
弟 C5XJX3*：.**，，，-ije”ggd・
& conxhv««eu5e>v>c«.rr«Mge?u:r<ng
市 ccm.h<;ai«'.se:vice.w6icrietonM«negenwnt
.'缶 ccm-buawestMtMeslage?usb
.Qs
,•分 r<t5ource
港，e，gme-
p^iic static v»id win'St-ing；］	throws excepticn ■；
.,., ：：«-ias/ -i-.'i'iencitatiw:
HttuJtil http- r>tu
3 .InitSSlXonf lgFcrTwoU»y();
；：i；rtiutri*ic»ri5n -r.cxsn
St-i-g sc-1“》- legini- -'--.i'-.U);
Mk* >-- Tb*t tX f:：：，-."喏-re- y：-：：e* hs-T nsss	-e： f3)e.
String :;- Ccnsrsnr. CVfATf_0FVICf_CX3;
String =“d • Ccnszent.VPIO;
-
•；--；-g	i iXl_ ii*r< «; CAI1.M UKL;
integer K*»4r< -inoeit ■ J;
,','r.irns.t	?,»•	. r".^ci, «^en you us* vhe a*x.
• ■•--™	A♦-«fter >“iae4 X、ts«	*■■■■<	” pr^iie that ha-ti b*»n or:*: ti :<T hF.
■ , . . ^ . . . . .
jtrlr.g iir--lf；iXd • -Bfi6htn»s» ;. -r -	1,
String twt；»d • -SET_C£VIC；
CbjetWode g-a: -，ZcnUtl：.eovg”Ofr"ct?8：，E；"«r! F：u*：V；|
fapwString, Object> F0-az，y*：、E - new Hast«»p-.>;);
i;* »«<-* d.pu；;"i«rylcelc', ser-i；eXd)；
XrZ：xw、cT.pE*<hy, :
pars!®：m»：3r:d.put；,p4ra4,/ f'•■■：■.7);
图4-16应用程序实现命令下达
在系统服务端应用中加入Timer定时器，通过定时监测服务端数据库对应的
NB-IoT客户端设备数据上报的状态，判断是否存在数据上报丢包的情形，如果 存在，则通过CDP Server提供的应用接口触发定义的事件，通过命令下达的方 式通知到NB-IoT客户端设备，NB-IoT客户端设备上线后接收到命令，重启消息 重传机制，将NB-IoT终端的缓存数据进行有效上报。Timer是Java类库中提供 的调度器类，关键函数如图4-17所示。
private void mainLoop() {
while (true) {
try (
TimerTask task;
boolean taskFired;
//获取任务队列的锁
synchronized(queue) {
while (queue.isEmpty() && newTasksMayBeScheduled) queue.wait();
if (queue.isEmptyO)
break;
long currentTime, executionTime;
task = queue.getMin();
synchronized(task.lock) {
if (task.state == TimerTask.CAN CELLED) { queue.removeMin();
continue; // No action required, poll queue again
)
)
if (ItaskFired) // Task hasn't yet fired; wait queue.wait(executionTime - currentTime);
)
if (taskFired) // Task fired; run it, holding no locks task.run();
} catch(lnterruptedException e) {
)
)
)
图4T7 Timer类关键函数代码
50
4.5.3服务端消息姬I验证
本次实验验证使用了一台八核高性能服务器构建系统服务端应用，服务器配 置信息参数为：CPU主频为8.00GHz,采用Intel(R) Core(TM) i7处理器，16G 内存，IT硬盘。本次实验测试程序使用Java编写，JDK版本为1.8。测试通过 开源压力测试工具Jmeter模拟物联网终端设备大量的数据连接，实验使用多台 压测机器在局域网中对服务端应用进行消息处理的性能测试。压测机器具体为2 台四核CPU的计算机，其配置信息参数为：Intel(R)Core(TM)i5处理器，8G内 存，512G固态硬盘，操作系统为WinlO系统。
本次实验将原生服务端应用、加入RocketMQ中间件的应用以及消息队列与 业务线程池相结合的应用三种方案进行比较。从系统服务端的平均响应时间以及 服务端I/O的吞吐量这两个方面来进行实验结果的比对。实验采用开源的测试工 具Jmeter所模拟的物联网终端设备，每个设备每1s发送20个数据包，三种方案 在不同的并发量条件下的处理情况如图4-18所示。
(SE) U
4000
3000
2000
1000
0
0	1000 2000 3000 4000 5000 6000 7000 8000
并发量(个)
图4T8三种方案的平均响应时间对比
当并发量小于1000时，使用RocketMQ结合业务线程池的方案并没有体现 出较大的优势，这是因为使用RocketMQ消息中间件会在一定程度上产生额外的 系统开销。当并发量大于2000时，使用RocketMQ结合业务线程池的方案开始
51
逐渐体现出优势，因为该方案将复杂耗时间的逻辑交给Consumer去处理，这样 就可以极大程度地缩短系统的平均响应时间。随着请求量的不断增大，在应用侧 加入业务线程池的作用则逐渐开始体现，业务线程池对复杂耗时的操作进行处理, 使得系统服务端处理消息的速度得到明显的提升，进而可以缩短系统的平均响应 时间。
在服务端I/O的吞吐量方面，如图4-19所示，当系统的并发量达到4000时， 原生的服务端应用方案平均吞吐量达到最高值，而当系统并发量进一步增加时， 原生的服务端应用方案的吞吐量呈现下降的态势。当系统的并发量达到5000时， RocketMQ消息中间件会产生消息堆积，使得加入RocketMQ中间件的应用方案 遇到吞吐量增加的瓶颈。而使用RocketMQ中间件结合业务线程池的方案则可以 有效地解决消息堆积这一问题，使得这一方案在系统并发量达到8000时仍然运 行平稳。进一步地进行压力测试之后发现，RocketMQ中间件结合业务线程池的 方案对于系统并发量的极限在于12000左右，导致这一瓶颈的主要原因是实验使 用的硬件性能限制。三种方案的处理速度减缓位置以及承受并发量的极限值对比 如图4-20所示。
O 00
9
O O O 8
o o o O o o o O o o o O 6 5 4 3
O 00
2
00 O
X-
0
0	1000 2000 3000 4000 5000 6000 7000 8000 9000
并发量(个)

图4T9三种方案的平均响应时间对比
52
(4-wt禁架次聒冬节k
12000
10000
8000
6000
4000
2000
0
处理速度减缓位置
承受并发量最大值
图4-20三种方案的性能对比
4.6本章小结
本章实现了基于NB-IoT协议的热力监测系统的设计，分别对NB-IoT客户 端设备、电信CDP Server以及第三方后台应用的实现方式进行了描述。在系统 的设备端实现了基于动态电源管理技术的低功耗解决方案，并实现了设备端的消 息重传机制，在系统的服务端实现了针对NB-IoT数据高并发场景的消息处理方 案。最后，分别对上述的方案进行了对应的功能测试，验证了方案设计的有效性 及实用性。
53
(C) 1994-2022 China Academic Journal Electronic Publishing House. All rights reserved, http://www.cnki.net
第五章总结与展望
5.1	论文工作总结
随着物联网相关技术的发展水平越来越高，发展速度越来越快，基于物联网 技术的数据远传应用受到的关注也越来越多。传统的基于广域网环境的物联网数 据远传由于其自身的缺陷，例如，传输范围较为有限、可提供的接入量不足、信 号的强度衰减过快等原因，已经越来越不适应大数据时代对于物联网技术的要求, 而NB-IoT通信技术对上述缺点做出了诸多方面的改善，该技术的广覆盖、多连 接、低功耗等技术优势完美适用于当今广域物联网环境。
本文在深入研究了 NB-IoT等低功耗通信技术的基础上，研究了多种基于动 态电源管理技术的降功耗方案以及基于电压/频率调节算法的降功耗方案，基于 窄带物联网环境并结合热力领域实际需求确定了任务调度集合，并以此为前提设 计了对应的基于动态电源管理技术的硬件降功耗方案，实现了对于现有环境下的 物联网终端设备的低功耗验证。
本文的研究成果主要包括以下四个方面：
1	.完成基于NB-IoT技术的通信链路的研究与应用
依据NB-IoT模组和MCU提供的不同工作状态，根据实际需求在保证广域 网环境下信息传输的准确性和时效性的基础上，完成基于NB-IoT技术的系统设 计与实现。
2	.基于动态功耗管理技术以及动态电压调节等低功耗算法实现
在硬件系统的基础上，通过实时操作系统的移植与程序改造，将动态电源管 理技术的硬件降功耗方案，应用于现有环境下的硬件系统。
3	. NB-IoT监测系统的数据重传机制
在现行的NB-IoT监测系统中加入数据重传机制，包括在嵌入式端加入的消 息重传机制以及通过系统服务端的命令下行，通过定义事件要求NB-IoT客户端 设备重传消息。
4	. NB-IoT监测系统的消息处理方案
加入消息队列的消息处理方案，提升了 NB-IoT监测系统的消息吞吐量；加 入应用线程池的消息处理方案，缩短了 NB-IoT监测系统的消息响应时间；二者 相结合有效地提升了 NB-IoT监测系统的消息处理能力。
55
5.2进一步研究工作
本文基于现有的硬件系统以及多种低功耗任务调度算法，在制定符合实际情 况的系统任务集合基础上，针对现实场景需要和合理的分析，通过实时操作系统 的移植与程序改造，对于动态电源管理技术进行必要的优化以使其更加适用现行 的硬件系统。在NB-IoT监测系统中加入了数据重传机制以及消息处理机制，有 效地解决了工程应用中存在的实际问题。但是，由于时间有限，对于飞速发展的 物联网领域来说，本文还存在以下的不足之处：
第一，本文设计的低功耗方案适用于单核处理器，后续希望可以将多核处理 器的执行特点以及现有的降低系统功耗理论研究相结合，设计出可以提高多核处 理器工作效率的低功耗任务调度方案，并对用于多核处理器的任务调度方案进行 更为严谨的测试及验证。
第二，由于平台以及NB-IoT设备数量的限制条件，在验证NB-IoT监测系 统的消息处理方案对于数据高并发量的平均处理响应时间以及对数据并发量承 受的最大限度时均使用了实验室的开发环境模拟NB-IoT设备，即使用少数笔记 本计算机进行程序开发和数据模拟，并没有使用真实的具有大量物联网终端设备 的场景。后续希望可以在更为真实的广域物理网场景中进行高并发测试，以取得 更为准确的测试效果。
第三，本文对于备用支持技术的研究还属于初级阶段，由于绝大多数的降低 功耗算法都是以完美的硬件系统为前提，并没有考虑到物联网终端会发生瞬态故 障的可能性，而备用支持技术可以有效解决瞬态故障这一问题。后续希望可以加 强对该类算法的研究与应用。
56
参考文献
[1]	L.A.Amaral, E.De Matos, R.T.Tiburski, F.Hessel, W.T.Middleware Technology for loT Systems: Challenges and Perspectives Toward5G[J]. Internet of Things(IoT) in 5G Mobile Technologies, 2016(21): 333-367
[2]	Rakesh Nath Tiwari, Prabhakar Singh, Binod Kumar Kanaujia. Asymmetric U-shaped printed monopole antenna embedded with T-shaped strip for bluetooth, WLAN/WiMAX applications [J]. Wireless Networks, 2020, Vbl.26 (1), pp.51-61
[3]	Anonymous. Zigbee Alliance Announces Ikea To Join Board Of Directors [J]. TWICE, 2020, 35(1).
[4]	Anonymous. Z-Wave Alliance Promotes Enhanced Certification for Next-Gen Devices[J]. TWICE, 2019, 34(12).
[5]	Mendes-Pinto Daniel,Rodrigues-Machado Maria da Gloria, Navarro Tulio Pinho, Dardik Alan. Association Between Critical Limb Ischemia, the Society for Vascular Surgery Wound, Ischemia and Foot Infection (Wifi) Classification System and Arterial Stiffiiess.[J]. Annals of vascular surgery, 2020, 63.
[6]曹磊.NB4oT推动“万物互联”[J],中国无线电,2019(12): 22-23.
[7]	Zayas A D, Merino P. The 3GPP NB-IoT system architecture for the Internet of Things[C]// IEEE International Conference on Communications Workshops. IEEE, 2017: 277-282.
[8]刘玉姣.NB・IoT技术及应用探讨[J].数字技术与应用,2018(06): 37・38.
[9]三大运营商齐发力NB-IoT获全面支持[J].传感器世界,2018, 24(01): 39.
[10]H. Aydin, R. Melhem, D. Mosse, and P. Mejia-Alvarez.Dynamic and aggressive scheduling techniques for poweraware real-time systems.[J]. In Proceedings of the 22nd IEEE Real-Time Systems Symposium, London, UK, December 2001.
[11]	Liu Hui, Li Xunming, Wang Weida, Han Lijin, Xin Huibin, Xiang Changle. Adaptive equivalent consumption minimisation strategy and dynamic control allocation-based optimal power management strategy for four-wheel drive hybrid electric vehicles [J]. Proceedings of the Institution of Mechanical Engineers, 2019, 233(12).
[12]Nagma Khattar, Jagpreet Sidhu, Jaiteg Singh. Toward energy-efficient cloud computing: a survey of dynamic power management and heuristics-based
57
optimization techniques [J]. The Journal of Supercomputing, 2019, Vbl.75 (8), pp.4750-4810
[13]李泉.锂离子动力电池管理系统关键技术研究[D].湖南：湖南大学,2017.
[14]毛文博.窄带物联网与LTE及5G系统干扰共存研究[D].北京：北京邮电大 学,2019.
[15]顾铁钥.低功耗物联网优化技术研究[D].北京：北京邮电大学,2019.
[16]李永华，王思野.AllJoyn技术原理及物联网程序开发指南[M].北京:清华大 学出版社,2016
[17]万昊.基于OCF的物联网资源管理模型的研究[D].北京：北京邮电大学, 2018.
[18]	Cengiz Gezer, Erhan Ta§kin. An overview of oneM2M standard[A]. // 2016 24th Signal Processing and Communication Application Conference (SIU)[C], Turkey: IEEE, 2016: 1705-1708.
[19]李彬，陈京生，孙毅，祁兵，石坤，奚培锋.基于轻量级CoAP协议的需求响 应业务承载机制及优化[J].电网技术:1-9[2020-02-19].
[20]	Franck Muteba, Karim Dj ouani,Thomas Olwal. A comparative Survey Study on LPWA loT Technologies: Design, considerations, challenges and solutions [J]. Procedia Computer Science, 2019,155.
[21]刘晓峰.3GPP R12标准进展分析[J].电信网技术,2013(09): 51-55.
[22]郭宝，刘毅，张阳.NB-IoT无线吞吐率及低功耗技术探讨[J].移动通信, 2017(11): 79-84.
[23]刘东山.NB-IoT物联网的CoAP协议及实际部署应用[J].信息通信,2019(07): 236-237.
[24]王惟一.基于移动互联网的智慧运维应用[D].陕西：西安电子科技大学, 2019.
[25]刘紫青，程燕，关联，等.CoAP协议研究[J].电视技术,2013,37(07): 192-196.
[26]Energy - Hydrogen Energy； New Findings from Southwest Jiaotong University in Hydrogen Energy Provides New Insights (An energy management strategy based on dynamic power factor for fuel cell/battery hybrid locomotive)[J]. Energy Weekly News, 2018.
[27]班华堂.嵌入式系统的动态电源管理架构[J],通讯世界,2017(15): 273-274.
[28]	H. C. Foong, Y Zheng, Y Kheng Tan and M. T. Tan, C6Fast-TransientIntegrated Digital DC-DC Converter With Predictive and Feedforward Control」Circuits and Systems I: Regular Papers [J]. IEEE Transactions on vol. 59, pp. 1567-1576,
58
2012.
[29]	P. Chowdhury and C. Chakrabarti. Static task-scheduling algorithms for battery-powered DVS system[J] lEEETransactions on Very Large Scale Integration Systems,vol.l3, no.2, pp.226 - 237, 2005.
[30]	Mark Weiser, Brent Welch, Alan Demers, etc. Scheduling fbr Reduced CPU Energy[C]. USENIX Association. Proceedings of the 1st Symposixim on Operation Systems Design and Implementation. New York: ACM Press, 1994: 13-23.
[31]邓昌义，郭锐锋，张忆文，等.基于平衡因子的动态偶发任务低功耗调度算 法[J].吉林大学学报(工学版),2017(02): 591-600.
[32]Dakai Zhu, Hakan Aydin. Reliability-Aware Energy Management fbr Periodic Real-Time Tasks[C] IEEE Transactions on Computers. IEEE, 2009(58): 1382-1397.
[33]Dai-biao Yan. Materials Distribution Monitoring and Management System Based on Sensing Card[C]. Advanced Science and Industry Research Center.Proceedings of 2017 2nd International Conference on Computer, Mechatronics and Electronic Engineering(CMEE 2017). Advanced Science and Industry Research Center:Science and Engineering Research Center, 2017: 516-521.
[34]杜忠啊.RTOS在嵌入式系统中的应用[J].山东工业技术,2013(13): 64.
[35]王洪敏.物联网相关技术及其发展的研究[J].渤海大学学报(自然科学版), 2012, 33(3): 265-26.16
59
(C) 1994-2022 China Academic Journal Electronic Publishing House. All rights reserved, http://www.cnki.net
