第一章绪论
1.1研究背景及其意义
随着网络技术的不断演进，上世纪六十年代美国军方主导建立的高级研究项 目军事实验网ARPANET逐步发展成为现代互联网，目前Internet已经成为全世 界最大的互联网络。在网络发展过程中，用户的通信需求也从简单的可达性需求 逐渐发展成为具有复杂QoS保障的需求，与此同时，随着用户业务需求的增长， 依赖不同通信技术的网络不断产生、消失、融合，如今不同结构的通信网络构成 了一种结构层次多样、协议相互交融的异构网络环境。
异构网络由多种网络堆叠组成，其中每个转发节点都拥有多种通信接口，每 种接口属于一种网络，节点之间通过同种网络接口或者跨网协作进行通信。各种 网络的异构性体现在物理层技术、频谱资源使用以及通信协议等各个方面⑴。在 这种接入环境复杂、通信方式繁多的网络环境中，提高异构网络的服务质量保障 是其首先需要考虑的因素。如果异构网络节点无法实现有效信息传输，则无法为 用户提供安全稳定的服务，那么其网络价值将会迅速贬值，其效果也将不如常规 网络。异构网络的接入带来了大量的信息数据流，给网络链路造成了巨大的负荷， 如果异构网络中资源配置不合理，数据传输过程中频繁进行网络切换将会造成额 外的开销。因此，如何合理布局网络资源、提高链路利用率并且保障服务质量在 国防和民用场景均是异构网络研究方面的热点问题⑵。
异构网络大规模组网过程中存在组网控制复杂和网络资源低效两大问题，组 网控制复杂主要是因为不同传输设备的硬件差异较大，无法遵循统一的协作与管 理规则，而网络资源利用低效则是由于不同异构网络无法对其他网络资源得到感 知，因此对于在异构网络上开展各项应用以及业务流量处理等问题上，不能最大 化利用现有资源做出最佳调度［叭为了解决以上问题，面向异构网络的软件化思 想被提出［*1,通过将软件定义网络中控制转发分离以及开放可编程接口等优势 引入异构网络中，使得网络由一个逻辑集中式的控制平面对异构网络资源进行统 一管理，通过开放的编程接口和协议，控制器可以探测异构网络转发平面的网络 态势，实现了分布式转发平面网络的资源协作与高效利用。
正如网络功能虚拟化技术借助SDN出色的软硬件解耦能力变的更加灵活可 用一样，在异构SDN网络中实现网络虚拟化将可以提供更加智能的网络服务⑹。 网络虚拟化技术⑺与计算虚拟化类似，相比于计算虚拟化是在一台物理服务器上 运行多台虚拟服务器，网络虚拟化是将多个逻辑独立的虚拟网络同时运行在一个 共享的底层物理网络之上，但各个虚拟网络之间互不影响。网络虚拟化技术是如 今的互联网云计算服务的基石之一，在这样的环境中，基础网络设施供应商（例 如中国移动、中国电信）可以通过虚拟化技术为网络服务供应商（例如阿里云） 提供按需的虚拟网络资源，后者可以直接在虚拟网络资源上部署数据中心等。相 对的，虚拟化可以多级构建，阿里云数据中心也可以作为设施提供者，为更细分 的服务提供商（例如抖音短视频平台）提供差异化的网络服务。这种由网络服务 供应商申请资源，底层设施提供者根据申请将资源虚拟化后并出售的模式，在复 杂庞大的网络环境中利用中发挥出巨大的优势。
因此，在面向异构SDN网络中进行虚拟化，每一个虚拟网络本质上都是共 享物理网络上的一份资源片，虚拟网络请求一般包括网络节点需求（例如计算资 源、存储资源等）和网络链路需求（例如带宽约束、最大容忍时延等），将部分 物理网络资源分配给虚拟网络请求的算法，称之为虚拟网络映射/嵌入算法 （VirtualNetworkMapping/Embedding, VNM/VNE）凶。如何通过合适的虚拟化资 源分配算法，解决虚拟网络映射问题的解决，成为了目前网络虚拟化中关注的重 要问题【9］。
同时，在异构网络环境中，多种通信子网融合共同为用户提供更加可靠的服 务。因此节点之间可能具有多种通信方式，当数据在不同的通信子网中传输时， 将会产生网络切换，频繁的网络切换会加重通信节点的运算负荷［⑼，从而在一定 程度上降低整个网络性能。在当前的算法研究中，大部分研究者的算法策略均是 针对特定场景和需求进行建模，其研究成果不能直接应用于异构网络环境，因此 本文的研究面向异构SDN网络中资源虚拟化技术和资源映射技术，旨在针对异 构网络中网络切换这一特点改进虚拟网络映射算法，在实际应用中具有重要的意 义和价值。
1.2国内外研究现状
关于虚拟网络映射的研究己经活跃了很多年，在此期间，研究人员首先提出 了虚拟网络嵌入/映射的概念。网络基础设施提供者通过虚拟网络映射方法，针 对不同虚拟网络请求（Virtual Network Request, VNR）中的虚拟节点和虚拟链路 的约束条件，将虚拟网络中的虚拟节点映射到底层的物理节点和物理链路中，从 而完成为虚拟网络请求分配基础设施网络资源的过程固。
随着研究的深入，研究人员对虚拟网络映射算法进行了细致而全面的总结 【32］,目前学术界对于算法分类的标准具有很多，如图1-1所示。其中基于算法
优化策略可将算法分为三大类，分别是精确式映射算法【⑶、启发式映射算法［⑷以 及元启发式映射算法。

图1-1虚拟网络映射算法分类
(1) 精确式映射算法
精确式映射算法通过使用精确的数学语言对物理网络和虚拟网络请求进行 建模，并且依据约束条件采用数学规划软件直接求出网络映射的最佳方案。
文献［15］对节点和链路建立了节点-链路方程的ILP模型，以最小化资源支出 和负载均衡为目标，通过MCF约束模型同时求得节点和链路的映射方案。
文献［16］将虚拟网络映射问题建模为分段映射的MIP模型，与其他两段映射 算法不同，该算法考虑了节点映射和链路映射的协调性，以一种更适合链路映射 的方式为节点选择映射方案，由于MIP模型的求解时间较长，作者将约束条件 松弛进行求解并设计了两种在线映射算法。
虽然精确式映射算法理论上对于网络建模可以计算出最优解，但其时间复杂 度较高，在实际中只能用于小规模虚拟网络映射问题，正如以上精确式映射研究 方案为例，其作者均设计了启发式的优化方案用来降低算法求解时间，因此精确 式映射算法在实际应用中局限性较大，寻找其优化方案则是更加重要的方向。
（2）	启发式映射算法
通过以上研究成果我们已经可以看出启发式映射算法是VNE研究中的热点 方向，其通过近似求解策略来换取映射方案的时间开销，但在一定程度上降低了 其求解最优解的能力。
文献［17］对虚拟网络映射问题进行了明确的数学定义和建模，并创造性的提 出了一种经典的先映射节点，再映射链路的两段式启发算法，论文中同时讨论了 路径分割和迁移带来的问题及其求解策略，并且将支持链路分割或链路迁移的链 路映射算法的求解问题归结为MFP（多商品流）问题，虚拟网络映射算法的研究 由此进入了快速发展阶段，大量研究者针对不同网络场景，提出了相应的VNM 优化算法。
文献［18］提出仅针对节点计算资源做出限制并不利于总体优化程度，于是提 出了节点的选择必须考虑相邻链路的可用带宽资源总和。文献［19］［20］则比上述 思想更进一步，考虑了更多的拓扑属性对于节点的选取规则。
文献［21］提出了使用全局资源容量作为评估指标，在迭代过程中充分展现了 算法对于网络资源的影响能力。
一般来说启发式算法的映射方案能够在多项式时间内求出来，这得益于随机、 贪婪等近似策略在节点映射阶段时的使用以及MFP流问题和约束最短路径等策 略在链路映射阶段时的使用，通常而言，研究人员会针对自身场景和目标建立不 同的近似方案，因此启发式算法比精确解算法有更好的推广和应用前景。
（3）	元启发式映射算法
元启发式算法又被称为仿生算法，目前已经被许多研究学者引入VNE领域。 相较于启发式映射算法，元启发式算法为近似策略的选取提供了另一种全新的思 路，即结合随机搜索以及群体智能来逼近最优解。在VNE问题中引入的算法包 括：遗传算法〔22］、蚁群优化算法［23］、粒子群优化算法［24］、模拟退火算法［25］、人工 蜂群算法［26］、蒙特卡洛树搜索算法［27］,强化学习算法［28］等。
与启发式算法相比，元启发式算法映射时间一般略高，但优化程度随着迭代 的轮次将不断提升。综上所述，三种不同种类算法的对比如表所示。
表1-1映射算法对比表

精确式算法
启发式算法
元启发式算法
方案优化程度
最优
取决具体策略
随时间递增
映射计算时间
最高
最低
中间
除此之外，了解另外的分类依据是有帮助的，因为这些算法分类并非互斥而 是互有交叉，这有助于我们针对场景选择适合自己的模型和策略。上述参考文献 中的研究成果可以归结到以下分类中的一种。
(1) 单域模型和跨域模型
单域模型是指底层物理网络位于一个单独的域中，而多域模型是指底层物理 网络是由多个互相孤立的域组合而成，域间通信需要额外代价，同时不同域之间 的网络成本和收益也不尽相同。因此大多数研究者将目光聚焦在单域模型上，其 优点是研究人员可以将精力集中于映射算法本身对资源分配的影响。
(2) 离线映射和在线映射
离线映射是指由服务提供商抽象出的虚拟网络请求是预先确定的，而在线映 射的虚拟网络请求的到来是不可预先确定的，这进一步加大了资源映射分配趋向 最优的难度。
(3) 两步映射和一步映射
一步映射(或称同阶段映射)是指在虚拟网络映射求解过程中节点和链路并 无明显的求解先后顺序，而两步映射(或称分阶段映射)是指在虚拟网络映射求 解过程中节点和链路有明显的求解顺序，一般而言是节点映射优先。
(4) 静态映射和动态映射
动态映射是指虚拟网络映射完成后，可以根据特定需求对映射安排进行调整, 例如链路迁移、链路分割等。静态映射是在方案选取之后，则不再进行任何形式 的修改和补充。
(5) 集中式网络和分布式网络
集中式网络映射方案是指算法掌握了全局的网络资源，例如SDN网络控制 器可以通过南向接口收集底层网络信息，然后统一做出运算处理。大多数研究都 默认进行了集中式的映射模式，这样可以简化对于场景的讨论，使得算法更加纯 粹，但在实际应用中，这种策略可能会导致计算节点的拥塞，需要底层网络的通 信条件要好。而分布式映射模式中，多个节点通过信令交互、收集彼此信息，从 而每个节点都可以获得从其他节点扩散而来的信息并构建整个网络拓扑。
(6) 不可分割链路和可分割链路
不可分割链路指的是虚拟网络中的每条虚拟链路仅可以映射到一条底层物 理网络路径上，当底层物理资源不充足时便无法完成映射；可分割链路是指虚拟 链路可以通过分成几条小流量虚拟链路，每条小流量链路可以分别映射到不同的 物理路径中，能更加细粒度的利用物理资源，从而有利于映射的成功，但链路分 割对网络的部署和维护提出了严峻考验。
根据应用场景的不同，虚拟网络映射问题的建模方式也不尽相同，因此问题 的优化目标也并非固定，但总体来说求解目标中最广泛的是站在物理网络提供商 的角度，降低物理网络映射代价，即通过尽量少的物理网络资源完成尽量多的虚 拟网络请求，从而获得更高的虚拟网络收益。另一种常见的优化目标是站在服务 提供商的角度，其虚拟网络映射致力于满足网络请求的服务质量QoS,通常将带 宽和时延作为约束目标。除此之外，有一些研究站在可靠性〔29-32】方面，其目标为 最大化底层物理网络对于资源的重新分配能力，使得网络故障后更容易快速恢复。
基于本小节的国内外研究现状和表1-1中呈现的内容，在虚拟网络映射算法 研究中，针对不同的网络场景，找到合适的优化策略对于算法的性能和效果具有 决定性的因素。在复杂的网络环境和动态变化的虚拟网络请求背景下，基础设施 提供商必须在有限的等待时间内找出合适的映射方案并完成虚拟网络服务的部 署，因此有效的启发式算法和元启发式算法是具有研究意义的。
13主要研究内容
异构SDN网络转发平面是由多个不同的网络堆叠组成的，其中每种网络在 物理层技术、频谱资源使用以及通信协议等方面都存在一定的差异。异构网络链 路资源丰富，为网络虚拟化提供了良好的基础。通过虚拟网络映射技术，物理 SDN网络可以将部分资源映射到虚拟网络中，从而为用户提供需求各异的服务。 然而，在异构网络中实现虚拟网络映射仍然有许多问题需要解决，论文通过分析 异构网络的特点以及当前国内外关于虚拟网络映射算法的研究成果，引入了异构 网络切换代价，并在此基础上，针对两种不同的虚拟网络建立请求，分别设计了 两种异构SDN虚拟网络映射算法，并进行了仿真实验。
本文的主要研究内容如下：
(1) 基于链路剩余带宽的启发式在线网络映射算法。传统虚拟网络映射模 型中，没有考虑到节点间多链路特点以及链路异构切换影响。论文首先定义了异 构网络切换代价，然后将其引入物理资源支出模型中，并且以最小化物理网络支 出作为算法优化目标，使得算法评估的物理资源消耗情况更加符合异构网络。同 时针对多链路特点，提出了一种路径松弛算法，使得算法在链路映射中可以在多 种通信链路中选择较优的链路进行映射。论文提出的算法相较于传统的启发式虚 拟网络映射算法，能够提高虚拟网络请求成功率，提高网络资源利用率，减少物 理网络消耗的资源。
(2) 基于蚁群算法改进的带宽和时延感知的虚拟网络在线映射算法。现有 的蚁群映射算法中，蚂蚁寻路往往没考虑到异构切换影响，并且不能很好的适用
6
于多重图搜索。论文通过将异构切换代价引入信息素模型中，使得蚂蚁在搜索中 更倾向于寻找同构链路，同时改进了蚁群算法信息素更新过程，使得物理资源消 耗较少的优秀链路留下的信息素更多。论文提出的算法能够提高虚拟网络请求成 功率，优化蚁群搜索方案，提高网络资源利用率，减少物理网络资源支出。
1.4论文结构安排
论文整体结构安排：
第一章简要介绍了论文的研究背景以及意义，然后就国内外对虚拟网络映射 算法的研究现状做出了简要的总结和分类，并分析了当前研究的主要工作，并对 本文的组织结构和内容进行了简要的概述。
第二章主要介绍了本文研究中所涉及到网络环境和相关技术背景，首先介绍 了异构网络软件化的相关架构，接着介绍了如何将合适的网络虚拟化技术引入该 架构，从而解决网络资源分配的问题，并给出了一种可以用于实际环境中的异构 SDN网络虚拟化的架构。最后重点针对虚拟网络映射问题的数学模型、映射目 标以及性能指标做岀了详细的解释。
第三章介绍了一种基于链路剩余带宽资源的启发式虚拟网络在线映射算法， 该章节首先对异构网络环境中的映射问题进行了数学建模，包括映射模型、约束 条件、性能指标以及优化目标。接着对算法中两段映射分别做出了描述并介绍了 其中的改进内容，最后通过仿真结果分析得出了结论。
第四章介绍了一种同时考虑链路带宽和链路时延的在线虚拟网络映射算法。 算法基于蚁群优化这一元启发式算法做出改进，该章节首先基于链路带宽和时延 重新定义了优化目标和约束条件，其次介绍了蚁群算法，并将其引入解决虚拟网 络映射问题中来并建立了相关的映射模型，最后通过仿真证明了该算法的有效性。
第五章对论文整体的研究工作进行了系统性的总结，对于尚且需要改进的地 方做出了简要说明，并展望了后续的研究工作和方向。


第二章异构SDN虚拟网络映射关键技术
2.1异构SDN网络虚拟化架构
2.1.1软件定义网络架构
传统IP网络经过多年发展已经逐渐完善，对于复杂多变的网络环境具有良 好的鲁棒性，同时也解决了用户多种多样的网络需求，这主要得益于多年发展过 程中协议和技术的不断完善，不可否认的是，虽然传统IP网络的有点众多，但 也并非是完美的，恰恰是由于“缝补”式策略，如今整个因特网已经陷入了架构 僵化、协议复杂、层次混乱等众多问题，例如由于IPv4地址的逐渐耗尽，网络 研究人员引入了 NAT技术来解决该问题，虽然NAT确实是一种简单有效的解决 问题的方式，然而该技术的出现却导致了更为优秀的IPv6解决方案难以得到普 及。与此同时，不同厂商间的网络设备各自为战，当一个网络设备出问题时，通 常只能由同类型设备替换，因为各种网络设备管理配置各不相同，无法做到良好 兼容，这无疑给网络管理人员提出了巨大挑战。

图2-1传统网络架构vs软件定义网络架构
软件定义网络架构便在这种环境下提出了，SDN的概念一经提出，便以其 转发控制分离的架构理念引发了广泛关注卩叭通过转发控制分离，将网络设备的 转发部分和控制部分解耦，控制部分抽离集成于单独的SDN控制器中，转发设 备则专注于数据转发。控制器是SDN网络的大脑，整个通过控制器完成集中化 的控制，通过开放软件编程接口，开发人员可以灵活的控制网络转发行为，理论 上SDN控制器可以实现任何现有IP网络中的协议。转发设备称为SDN交换机， 由OpenFlow白皮书创］进行标准化，OpenFlow协议是SDN交换机和SDN控制 器进行通信的协议，不同厂商需要遵循同一个标准，极大减弱了设备厂商间的差

异性。由于网络设备可编程的特点，一旦完成软件化的设计方案，SDN网络便可 以投入部署、测试和使用中。软件定义网络架构与传统网络架构对比如图2-1所 示，软件定义网络体系架构模型如图2-2所示。


图2-2 SDN网络架构
(1) 应用层
SDN的应用层主要是部署一些服务于网络中不同用户需求的应用程序，其 实现了对网络模型的抽象以及业务的模块化表示，应用层应用包括自学习交换机、 NAT服务等简单应用功能，还包括典型的OpenStack、OSS (Operation Support System)等，SDN虽然与传统网络均有管理、控制和转发三个层面，但在SDN 网络架构下，三个层面是互相分离的。
(2) 控制层
控制层是SDN的核心，是SDN的操作系统，控制层实现了对网络底层硬件 资源的统一收集和管理以及网络状态的感知。通常情况下控制层内置了一些开箱 即用的功能，例如路由转发，交换机自学习等模块。
(3) 转发层
转发层是SDN网络架构的最底层，由交换机及其连接的线路组成。SDN交 换机通过执行SDN控制器下发的流表来完成数据转发工作，并且将控制器给它 的指令和决策缓存下来，当同样的数据包来临时便可以直接转发，如果交换机自 身无法完成处理时，便会通过南向接口询问控制器。
(4) 南北向接口
SDN网络架构下的北向接口是网络的应用层与控制层的通信接口，应用层 通过开放性的API控制控制层面做出硬件设备的拓扑和网络状态收集，从而做 出决策；南向接口是控制层和数据层的通用接口，当前主要的具体实施方案包括 OpenFlow协议等。SDN控制层通过南向接口协议向数据层下发流表项控制数据 层网络设备进行数据业务转发。
SDN的分离式架构使得网络配置更加灵活简便，对于网络硬件厂商而言， 网络底层硬件设备只需关注层间通信协议兼容和基础的数据转发功能即可，这使 得网络基础硬件更加简单有效，生产成本更为低廉。而对于网络管理人员，SDN 网络架构的提出，大大降低了其学习成本，网管人员无需再关注不同厂商的实现 细节，只需要通过SDN网络控制器进行应用层的程序管理即可实现网络管理甚 至网络的升级换代，且新型网络架构，由于其统一的管控，分离式的架构，网管 人员通过控制器能够定制各种网络参数，如路由、流量工程、QoS等。更为重要 的，对于网络用户而言，采用SDN网络架构的网络，所提供的业务保障能力更 加优秀，网络响应更为迅速。
2.1.2异构SDN网络模型
如今SDN的思想已经从有线网络延伸到无线网络卩5］应用中，包括5G网络 ［37】、802.11网络等。同时，SDN的思想也用于在异构网络【38］中解决各类资源分 配问题，目前SDN的思想已经逐渐深入到各种民用网络和军用网络卩刃中的应用 中。
将SDN架构引入异构网络中，使得网络架构由一个逻辑集中式的控制平面 和分布式的转发平面构成，转发平面没有控制逻辑，只专注于转发功能的实现； 而控制平面作为转发设备的大脑，可以实现复杂的网络功能，有助于异构网络的 管理和使用。
异构SDN网络中虚拟网络资源映射问题具有数控分类，集中控制、节点相 对固定、链路资源丰富等特点，相较于传统SDN网络，异构SDN网络控制器需 要了解的物理资源情况更加复杂，转发器的可用链路资源较为丰富，每两个转发 节点之间可能有多种异构的链路，这些链路类型不同，时延、带宽、丢包率等参 数也不尽相同。
一个典型异构SDN网络模型如图2-3所示，其中每个圆点代表一个子网接 口，被同一条竖线连接起来的无线接口属于同一个节点，各节点通过一个逻辑上 集中的控制器指导转发数据。每个节点至多有3种异构通信手段，每种类型的通 信接口分属于一种子网，其接口转发能力不同。控制器通过探测、识别、记录物 理网络节点和链路，由此掌握网络全局资源，为网络资源分配创造了基本环境。
10
控制器





在这样的异构网络模型中，A节点向B节点传输数据具有多种方式，例如可 以使用同种子网（子网3）直接传输，或者使用同种（子网1）子网通过中继节 点D传输，甚至可以先通过一种子网（子网2）到达中继节点C,然后在C节点 进行一次网络切换，通过另一中子网（子网3）到达B节点，通过这种异构子网 协作方式，可以提高节点之间的连通能力，但将会引入额外的异构网络切换开销， 在实际网络中应当尽量避免过多的网络切换。
2.1.3网络虚拟化技术概述
为了解决当前互联网络所面临的网络僵化问题，在学术界和工业界，研究人 员借鉴计算机领域中计算虚拟化技术提出了网络虚拟化的概念，其主要创新点在 于无需改变现有网络架构，而是通过添加一个虚拟化层来对现有的网络物理资源 进行统一的抽象和封装。通过这种手段，多个虚拟网络实质上分别占有了一部分 底层物理网络资源，其中每个虚拟网络之间是相互独立、互不影响的。
如今有许多网络虚拟化技术己经得到了广泛的应用，良好的虚拟化技术可以 为网络资源管理与分配提供极大的便利。具体可以从以下几个方面考虑：
（1）可管理性：底层网络至少需要标识虚拟网络，并且为其分配一定的物 理网络资源，多个虚拟网络共存时，底层设施供应商需要对物理资源进行虚拟化 和管理的同时，能够部署更多的虚拟网络。
11
(2) 隔离性：由于没有完美的网络协议，不能完全保证网络不可能被黑客 攻破，但技术上网络虚拟化技术必须能够确保虚拟网络之间互相隔离。这样既可 以保证虚拟网络之间不被影响，对用户而言也可以起到一定的安全保障。
(3) 兼容性：虚拟网络技术并非空中楼阁，其是否能兼容目前大部分或者 主流网络技术将是该技术能否成功推广的重要因素，未来网络的发展总是可变且 无法预测的，如果能够保持较高的兼容性，则会拥有更大的竞争力。目前主流的 网络虚拟化技术包括：虚拟专用网络、虚拟局域网络、覆盖网络和可编程网络虚 拟化四种。
虚拟专用网络(或称虚拟私有网络)简称为VPN,通过VPN用户可以在互 联网上搭建一个私有的通信网络，通过VPN所用协议的数字加密算法实现良好 的匿名性，避免被网络追踪。并且借助IP协议栈，其在实际应用中有很高的灵 活性和拓展性，可以架构在多种网络之上。VPN技术是服务器-客户端架构，因 此服务器可以对不同的VPN虚拟网络流进行管理，但与网络虚拟化相比，其相 当于仅仅实现了链路虚拟化。
虚拟局域网络(VLAN)技术是LAN技术的一种拓展，VLAN技术本质上 是将物理网络的广播域进行了拆分而不是虚拟化，通过标签技术将其分成多个独 立广播域的小规模的逻辑网络。VLAN技术受到地域和覆盖范围的限制，并且只 能用于以太网络中，其主要目的是建立隔离网络，阻止了流量在不同虚拟网络间 的传播。此外虚拟局域网络技术是通过识别设备的VLAN标签来实现设备互联 的，具有很大的安全隐患。
覆盖网实质上是在物理网络上再次架构一层网络，是一类网络协议的总称， 例如VXLAN、IP-IP、GRE等网络隧道封装协议可以对数据包进行封装重路由来 达到数据传输，通过这种机制实现虚拟网络节点和虚拟链路的模拟，覆盖网络实 质上即是虚拟网络映射概念的子集，根据用户的需求可以构建出能提供特定服务 的虚拟网络。目前而言VXLAN是一种成熟的虚拟网络技术，在各种云服务中心 中广泛应用。
可编程网络是随着SDN概念的提出和成熟而产生的，通过借助OpenFlow 等现有南向接口协议以及SDN控制器北向接口，可以通过软件的形式实现虚拟 化，并且该方式是灵活可变的。目前具有许多平台实现了该种形式的网络虚拟化， 在有利于部署新的服务的同时，本质上没有对网络结构和协议做出根本性的改变。 因此其兼容性较好，并且有利于未来网络发展趋势。
前三种传统网络虚拟化技术已经广泛用于如今移动互联时代的云数据中心 网络中，这些技术依附于传统网络设备，大规模部署虚拟化技术需要使用脚本进 行批量配置，但由于设备间的差异性，不同厂商的设备之间难以兼容，因此网络
12

虚拟化的配置和操作通常是异常繁琐的。同时，当场景或环境变化时需要定制脚 本进行配置，因此单纯使用传统网络虚拟化技术并不利于构建网络虚拟化平台。
而可编程网络的能力则恰好解决了上述问题，即可以在集中式架构的合适位 置引入虚拟化组件，按照流表重写技术实现虚拟节点以及链路与真实节点和链路 的映射。这种映射可以非常灵活，可以完全由软件化流程实现。当虚拟网络发生 变化时，虚拟化组件可以对映射规则下发的流表进行撤销或者重新下发新的调整 策略生成的流表。通过流表的下发和执行策略，可以简化传统网络虚拟化场景中 繁琐的运维工作，使得网络虚拟化技术具备更多的可能性。
2.1.4异构SDN网络虚拟化技术实现
在本节中，我们主要聚焦于可编程网络的虚拟化实现平台。在基于SDN的 网络虚拟化平台中，根据虚拟化组件实现的层次，可以技术实现模式主要可以分 为转发设备集成式、透明代理式、控制器集成式三种Ml,分别与计算虚拟化的裸
机【小、虚拟机监视器【创、容器［43］三类技术相对应，如图2-4所示。

图2-4 SDN虚拟化平台实现模式
1）	转发设备集成：该方式类似于计算虚拟化中的虚拟机技术，虚拟化组件 在SDN交换机中的内核转发路径上层实现，通过该虚拟化组件，每个物理交换 机可以运行多个虚拟交换机实例，每个交换机实例都是一个逻辑上独立的交换机, 接受一个控制器的指导转发，虚拟化组件根据虚拟网络的映射信息把底层流量交 付给相应的控制器进行处理。
2）	透明代理：在这种模式下虚拟化组件以独立的外置设备实现，作SDN交 换机和SDN控制器间的透明代理。每个租户向虚拟化组件提交虚拟化请求，从 而创建自己的可编程网络，每个租户都可以使用完整的地址空间，搭建自己的拓 扑，部署自己的网络控制器。虚拟化组件根据虚拟网络的映射信息，对SDN控
13
制器向SDN交换机下发的PACKET-OUT数据或SDN交换机向SDN控制器上 报的PACKET-IN数据进行“实时翻译”，对于控制器来说，虚拟化组件为其提供 底层网络拓扑，而对于底层物理网络，虚拟化组件扮演了控制器的功能。其代表 技术有 FlowVisor[44l, VeRTIGO[45l和 OpenVirtexR®等等。
3）控制器集成：该方式中虚拟化组件位于控制器中，作为控制器的一个特 殊APP出现。当虚拟化组件运行时，控制器可以接受上层用户的虚拟网络请求， 并为其建立一个虚拟网络，因为不需要使用额外的软硬件设备，因此这种模式适 合于那些对性能要求不高，但却希望得到一个支持网络虚拟化的并且可以开箱即 用的SDN控制器的用户。这种模式可以通过APP链式调用使用控制器其他APP 的功能，从而定制自己的需求。目前两个发展如日中天的SDN控制器 OpenDayLight和ONOS均内置了网络虚拟化组件。
基于容器模式实现的平台理论上性能更强，适合于在开发设计良好的大规模 控制器中集成实现。但是基于透明代理模式实现的网络虚拟化平台，不依赖于上 层控制器和底层物理转发设备的类型，因此灵活性和通用性较高，因此受到了广 大网络虚拟化技术研究人员的青睐。
综上所述，异构SDN网络虚拟化平台可以使用三层架构实现，如图2-5所 示。最上层为虚拟网络控制层，用于实际控制虚拟网络的转发功能；最下层为异 构物理网络层用于模拟异构SDN网络；中间层为虚拟化层，用于实现SDN网络 虚拟化。

图2-5基于透明代理的网络虚拟化平台
虚拟化层对控制器与交换机之间通信的信令数据进行处理，其根据定义的规 则进行消息的拦截、修改、转发等操作，而控制器只能接收到被虚拟化层转换过 的数据，却对所有的转换操作都毫无感知。
14
网络虚拟化层可以划分为几个主要部分：1）网络状态管理模块完成对于底 层物理网络的拓扑探测，以及网络状态参数的测量，包括时延，剩余带宽，丢包 率等。网络资源状态是整个系统以及映射算法的基础。2）业务管理模块负责获 取、缓存并解析虚拟网络请求，作为整个系统的输入。3）网络资源池管理模块 通过虚拟化映射算法完成虚拟网络的建立，向业务管理模块返回结果。4）网络 状态管理模块建立网络资源列表，并完成虚拟化资源的维护过程。5）网络映射 管理模块完成虚拟网络和物理网络之间的相互映射，用于在虚拟网络映射之后的 部署。
2.2虚拟网络映射算法
2.2.1虚拟网络刪算法模型
要想解决虚拟网络映射问题，需要对底层物理网络（SubstrateNetwork, SN） 和虚拟网络请求进行数学建模。底层物理网络和虚拟网络请求都可以使用带有属 性的节点（Node）和链路（Link）进行描述。
底层物理网络拓扑可用加权无向图Gs=（Ns,If,A^AD来表示，其中表示 底层网络物理节点集合，Z7表示底层网络物理链路集合，念和&表示底层网络 物理节点n®站）以及底层网络物理链路厂（Z■乃）所具有的属性（Attribute）o 在异构网络中，物理节点川具有的属性可能包括该节点的地理位置、CPU计算 能力、流表资源、支持的子网数量以及种类等，物理链路严具有的属性包括该链 路的带宽资源以及时延状态等。物理网络的一条无环路径（Path）记为卩爲，其中 s为物理路径的源节点，d为物理路径的目的节点。
虚拟网络请求可用加权无向图GV=（NV,L',C'N,C'L）来表示，其中M'表示虚 拟网络请求节点集合，E表示虚拟网络请求链路集合，C；和表示虚拟网络 请求的节点n\nveNv）以及链路厂（厂丘厂）的资源约束（Constraint）o在异构网络 中，虚拟网络节点h具有的约束可能包括该节点的地理位置范围、CPU计算能 力限制，虚拟网络链路厂的资源约束可以是该链路所需要的带宽资源大小以及时 延要求。虚拟网络的一条无环路径记为P；d，其中$为虚拟路径的源节点，〃为 虚拟路径的目的节点。
基于以上建模方式，虚拟网络映射问题的数学模型可以抽象为一个映射M, 即将一个带有资源约束的虚拟网络请求G、'映射到底层物理网络G'的一个子集。 虚拟网络映射过程可以自然的分成节点映射和链路映射两部分，即如下式所示:
15
M:G'^(N',P',RN,RL)
0:(N”，G)T(N 咖	(2-1)
0:(Z/,C；)T(P®
其中N'eNs, PeP，AN和&表示为分配给虚拟网络节点和虚拟网络链路 的资源。虚拟网络的映射一般分为节点映射和链路映射两个阶段。
2.2.2虚拟网络映射算法目标
本文在本小节中主要讨论了虚拟网络映射目标，因为虚拟网络映射是由物理 网络和虚拟网络请求两个实体组成，物理网络的所有者是基础设施提供商InP, 而虚拟网络请求的所有者是网络服务提供商SP,因此本文对映射目标的分析是 站在InP和SP的角度的，即InP目标和SP目标［471。
基础设施供应商作为网络资源的所有者，其管理维护网络需要一定的开支， 每一次虚拟网络请求都要进行一定的物理资源支出，因此InP希望在满足网络请 求的基础上，尽可能减少不必要的开支。基于这种观点，虚拟网络映射的目标可 以设为最小化物理网络支出。这样做有利于减少虚拟网络映射支出且能预留出更 多的物理资源用于其他的虚拟网络服务的映射和部署。同时，InP通过出售网络 服务来赚取利润，此时映射目标可以设置为最大化长期虚拟网络收益。或者可以 综合利润和收益，以最大化虚拟网络收益支出比为优化目标。
另一方面，从网络服务供应商的角度来看，其虚拟网络映射目标可以设置为 虚拟网络请求成功率或服务稳定度。请求成功率越高，提供的服务越稳定，则更 有利于提升用户体验，从而增加自己的利润。
2.2.3虚拟网络映射算法性能指标
虚拟网络映射的目标可以站在InP和SP两个立场进行选取，不同的研究者 可能采用不同的目标作为算法研究和优化的方向，因此有必要使用明确的参数或 公式来衡量映射算法的性能，可量化的结果有利于研究人员对算法进行相互比较, 同时也可以对算法的性能有一个直观的了解。
基于现有的虚拟网络映射算法研究，本小节介绍了主要的虚拟网络映射算法 性能评价指标。就目前研究和实践来看，一般有两种指标比较重要：映射成功率
(Accepted/Arrived)和映射收益开销比(Revemie/Cost, R/C)
(1)映射成功率
映射成功率又称为映射成功率，即算法运行过程中，所有成功映射的虚拟网 络请求占所有请求数的比例，如公式(2-2)所示：
16
Reqac=lim^		(2-2)
t=Q
T	T
其中，表示/时刻请求成功映射的VN请求的数量，£刃\仁表示/ 时刻到达的體拟网络请求的总数。在虚拟网络映射研究中，虚拟网蛰映射成功率 是最重要，也是最直观的性能评价指标。映射成功率越高，则表示该算法处理虚 拟网络映射的能力越强。
(2)虚拟网络映射收益支出比
虚拟网络被基础设施提供商映射、部署之后，将会向网络服务商收取一定报 酬作为网络收益，如公式(2-3)所示：
7?(G、'(/))= X &"")+ Z 尺厂)	(2-3)
收益通常与请求的资源有关，虚拟节点消耗资源越大，虚拟链路服务质量越 高，则相应的网络收益也会越高。其中，2?(nv)通常与虚拟节点请求的CPU资源、 存储器资源、硬盘资源相关，而人(厂)通常与虚拟网络请求的链路带宽、时延、 抖动等因素有关。
基础设施提供商在获取收益的同时，也需要为了映射虚拟网络而花费一定的 支出，如公式(2-4)所示。
C(G®)=工 C(“")+ X C(厂)	(2-4)
«veNv	V 7
网络支出所涉及的内容一般与收益相关，其中C(h)通常与映射的物理节点 CPU资源、存储器资、硬盘等资源相关，而C(厂)通常与实际分配的物理链路带 宽等因素有关。注意，不同场景对于C(G"(/))的定义不同是可能的，这主要取决 于具体算法的定义。
综上所述，虚拟网络收益支出可以综合衡量映射的效率，可以作为衡量映射 方案的合理性的参考依据，如公式(2-5)所示。
2(幼
C(G())
按照常规，收益支出比应当小于1。在网络映射的过程中，无论使用何种映 射算法和收益计算指标，只要请求成功，则收益便可直接量化为一个定值，然而 不同的映射解选择的物理资源不同，导致了其物理支出也不同。从数学的角度来 看，在离线映射过程中，通过提前预知所有的虚拟网络请求，拒绝掉收益支出比 较低的虚拟网络请求对于整体而言是较好的选择。然而实际情况中虚拟网络请求 的到达情况和分布是未知的，因此最小化物理网络支出则是更优的策略。
17

除此之外，物理资源利用率也称为物理资源负载率也可以作为衡量网络映射 的一个指标，该指标用于表示某个硬件资源(节点或链路)的负载/使用情况，如 公式(2-6)以及公式(2-7)所示。
y CPUS)
Consumed(n') _		 (2-6)
(Total (ns) ~ CPU(ns)

U(ns)和U(厂)分别表示物理节点或者物理链路的资源利用率。Consumed代 表的是映射完成之后，某一个物理节点或者物理链路的资源消耗量，Total代表 的是映射开始之前，某一个物理节点或者物理链路的资源总量。具体而言，本节 以物理节点的CPU利用率和物理链路带宽消耗作为衡量利用率的标准。一般来 说，比值越高，就代表该资源利用率越高。总体而言，物理资源利用率越高，则 表示网络能承担更多的服务，在此基础上，资源利用率离散程度越低越好，这表 示网络中关键瓶颈节点/链路较少,更有利于后续VNE算法对网络资源进行分配。
2.3本章小结
本章对论文中涉及到的主要技术点进行了简单的介绍，首先介绍了异构 SDN网络以及其用于异构网络环境需要做出的变化，并简要阐述了异构SDN网 络的模型，其次介绍了传统的网络虚拟化技术以及SDN环境下的可编程网络虚 拟化的主要技术实现方式。最后对虚拟网络映射问题进行了形式化的描述，简明 的分析了模型、优化目标性能指标并对当前的虚拟网络映射算法进行了简明的分 类阐述。
18
第三章基于链路带宽资源的在线映射算法
3.1引言
目前基于SDN技术的网络虚拟化实现方案主要聚焦于网络隔离和映射管理, 并未考虑链路带宽资源对于虚拟化的影响，例如OpenVirteX网络虚拟化平台邸】 仅仅基于最短路径算法来完成链路映射过程，这导致了大量虚拟链路被映射到跳 数最短的物理路径上，使得网络资源利用率低，大量网络资源被浪费，从而使得 虚拟网络建立请求成功率降低。
虚拟网络映射算法经过多年发展，其中的许多算法和思想可以借鉴并应用于 异构SDN网络环境的虚拟化平台实现中。首先，实际环境中的虚拟网络建立请 求到达时间是难以预测的，因此必须使用在线映射算法逐个处理请求，这种在线 映射场景不适合耗时较长的精确式映射算法，否则虚拟网络建立请求排队过长将 导致系统处理能力下降Rd。其次，异构SDN网络中链路资源丰富，因此在链路 映射过程中对于带宽资源的考虑是必要的，因此论文中的算法将充分考虑链路剩 余带宽对虚拟化的影响，从而选择资源较多的链路完成虚拟化，提高物理资源利 用率，进而提高虚拟网络请求成功率。
在网络模型层面上，传统虚拟网络映射算法中关于物理网络支出模型的建立 一般基于节点计算资源和链路带宽资源，文献［17］中的物理网络支出模型考虑了 CPU计算资源和链路带宽资源，并提出了先映射节点后映射链路的两段式启发 算法的思路，其中链路映射中使用了最短路径算法作为启发策略；文献［16］在此 基础上，又提出了将链路映射优化为MCF问题的策略；文献［50］在链路映射过 程中采用了 K最短路径的优化策略。然而在在异构网络中进行通信时，如果需要 相邻的链路间进行跨网协作通信，则中间的异构转发节点需要对数据流完成协议 的转换，且数据带宽需求越高，则转换所需的代价越高［殉。因此在异构网络中为 虚拟网络请求映射相应的物理资源时，其支出不仅仅包括节点计算资源支出以及 链路带宽支出，还应将异构切换支出考虑在内。针对上述传统映射模型对异构网 络切换因素考虑不足的问题，论文定义了异构网络切换代价，然后将其引入物理 资源支出模型中，并且以最小化物理网络支出作为算法优化目标，使得算法评估 的物理资源消耗情况更加符合异构网络的特点。
在算法实现层面上，传统虚拟网络映射模型均将网络建模为无向图而异 构网络中的物理网络模型使用无向多重图描述，这是因为异构转发节点之间不仅 具有一种通信手段，每种通信手段可以使用一条具有类型、剩余带宽的链路表示，
19 因此异构转发节点之间具有多重链路。针对传统链路映射方案中没有考虑相邻节 点间多重链路的问题，论文提出了一种路径松弛算法，使得映射算法可以在多种 通信链路中选择较优的候选链路进行映射。通过该算法，可以将大部分传统映射 方案中的研究成果适配至异构SDN网络，从而为后续算法实现创造了条件。
综上所述，论文提出了一种基于链路剩余带宽的启发式在线网络映射算法， 算法结合异构网络切换特点对映射模型和约束条件做出了改进，并且以最小化物 理网络支出为目标构建映射方案。在具体实现上，算法沿用经典的两步映射策略， 首先进行节点映射，接着进行链路映射，并且针对异构网络中的多重链路特性在 具体的启发式策略中做出了适配优化方案。仿真结果表明，相较于目前已有的采 用两段式启发策略的VNE-G-SP. VNE-R-ViNE-SP和VNE-G-LMAoKS算法，论 文提出的算法能够提高虚拟网络请求成功率，减少物理网络分配的资源，提高网 络资源利用率。
3.2问题建模与分析
本文对异构SDN网络环境下虚拟网络映射问题的建模参考了本文2.3.1节 中介绍的传统虚拟网络映射问题的建模方法。
3.2.1虚拟网络映射模型
本文使用无向多重图(Undirected multigraph) Gs = (Ns来表示底 层物理网络平面，其中各种参数具体含义如下所述。
底层网络物理节点集合定义为N'，念由底层网络节点的CPU计算能力来 描述，使用C”：表示物理节点巧(”;G Ns)当前可用的CPU资源。
底层网络物理链路集合定义为77 ,对于底层物理网络中任意链路Z；(Z； eT), 有即链路由源节点7、目的节点八链路类型/三个参数 描述。不同类型的链路具有不同的通信能力和特性，当两条相邻的物理链路类型 不同时，节点将会进行异构网络切换，从而引入数据包处理开销。因此需要尽量 少的进行异构网络切换。
由链路可用带宽来描述，对于链路，使用如表示链 路当前可用的物理带宽。
图3-1的右面部分描述了一个异构SDN网络的转发平面图，该网络中每个 节点至多有三种通信方式与其他节点进行通信，其中每种通信手段组成的网络单 独的表示为一层，通过三层堆叠构建了整个底层物理网络拓扑，其中具有相同名 字的节点物理上为一个节点，该节点包含归一化的CPU资源剩余情况，最大值
20

为100。同时，不同通信方式层的链路不同，通过连线样式区分，链路上的数字 表示物理链路剩余带宽。
与物理网络类似，虚拟网络请求可用加权无向图GJ(NH,C'N，C'L)来表示, 其中N"表示虚拟网络请求节点集合，2/表示虚拟网络请求链路集合，虚拟网络 节点约束通过CPU资源表示，C”,"表示虚拟节点附对于CPU资源的需求约束。 虚拟网络链路资源约束通过链路带宽表示，B,.表示虚拟链路/：的带宽请求约束。 图3-1的左面部分描述了两个虚拟网络请求，其中一个是包括三个节点两条链路 的线性网络拓扑请求，另一个是包括四个节点和四条链路的环形网络拓扑请求。 每个请求使用不同形状的图形区分，节点内数字代表该虚拟节点所需的计算资源, 链路上数字代表该虚拟链路所需带宽。



参数符号龄

物理网络节点，物理网络节点集合 物理网络链路，物理网络链路集合 虚拟网络节点，虚拟网络节点集合
虚拟网络链路，虚拟网络链路集合

虚拟网络Gv映射到的物理路径集合


参数梯赫
注释
q
虚拟节点 < 对于计算资源的需求

物理节点n'j可用计算资源

虚拟链路/；对于链路带宽资源的需求

物理链路可用带宽资源
基于以上物理网络和虚拟网络请求的建模方式，为实现虚拟网络映射功能, 本文中虚拟网络映射采用了 "先到先得"(FirstComeFirstEmbedded, FCFE)的 在线映射策略。与离线映射提前了解所有的虚拟网络映射请求不同，本文中每个 虚拟网络的映射顺序是由该虚拟网络的到达时间决定的。
在前一个虚拟网络请求没有被完全处理之前，新到达的虚拟网络请求必须缓 存在FIFO队列中，只有当前一个请求处理完毕，才开始下一个新请求的处理。 如图3-2所示。如果需要评估算法的执行时间性能，可设置虚拟网络请求的最大 等待时间为一个阈值，超出等待时间阈值的虚拟网络请求视为失败。

图3-2虚拟网络映射流程图
在线映射过程分为节点映射和链路映射两部分。
(1) 节点映射
首先进行节点映射，虚拟网络请求中的每个虚拟节点都要被映射到一个满足 资源约束的物理节点之上。如图3-1中，第一个虚拟网络请求VNR1的节点映射 结果为{a — A,bfD,cTB},第二个虚拟网络请求VNR2的节点映射结果为 {QTC,bTF,c->E,dTB}。如果虚拟网络请求中的所有节点映射成功，则进 行下一阶段的链路映射，否则映射失败。
(2) 链路映射
当所有虚拟节点映射成功时，开始进行固定节点的链路映射。虚拟网络请求 中的每条虚拟链路都要被映射到一条满足资源约束的物理路径之上。物理路径使 用(A,a,B)表示，其中英文字母表示链路的两端节点，中间的希腊字母表示两节
22
点之间的链路类型。如图3-1中，虚拟网络请求VNR1的链路映射结果为 {@,b)T(4a,功,(b,c)T(D,a,B)},虚拟网络请求VNR2的链路映射结果 初,b)T(C/F),(b,c)T(F』,G』,E),(cM)T(E,0,B)，aa)T(B,0,C)}。如 果虚拟网络请求中的所有链路映射成功，则该映射成功，并且更新被映射物理节 点和物理链路的剩余资源，否则请求映射失败。
3.2.2虚拟网络映射求解目标
在评估虚拟网络映射算法优劣的时候，映射收益支出比是衡量算法对于资源 利用的重要因素，对于在线映射而言，虚拟网络请求遵循先到先得的原则，如果 成功映射则会得到收益，否则收益为零。因此，对于虚拟网络请求G、'，定义它 在任意时刻/的映射收益R(Gv(t))为链路带宽收益和节点资源收益之和，如式(3-1) 所示：
&£(/))=工纬+。工5	(3-1)
其中，坊为虚拟链路厂的带宽需求，C””为虚拟节点”"的CPU资源需求， 血为节点CPU资源收益影响因子。需要注養的是式(3-1)中第一项链路带宽收益 不会被该虚拟链路所映射的底层物理路径的距离、跳数、异构网络切换次数所影 响，这是因为虚拟网络的用户仅仅关心他们的资源约束需求，并且不会为更优质 的物理链路付出代价。
正是由于这样的特性，本章映射算法的求解目标将是最小化物理网络支出， 如公式(3-2)所示。这样做能预留出更多的物理资源用于其他的虚拟网络服务的映 射和部署。
(3-2)
对于虚拟网络支出C(G()),由于不同网络的特性将会导致其经济模型不同, 因此该因子的定义可能会随着场景的变化所不同。对于本文所述的异构SDN网 络环境，本章将物理网络支出主要聚焦于链路带宽和异构子网切换次数方面。
开销如公式(3-3)所示。
(3-3)
其中公式第一部分是物理链路支出，第二部分为物理节点支出。节点支出的 定义同节点收益保持一致，即虚拟网络请求需要多少计算资源就视为支出多少物 理资源。对于第一部分的物理链路支出，又包括带宽支出和网络切换支出两部分。 带宽支出部分由虚拟链路厂映射到的物理路径上所有的物理链路支出带宽之
23 和表示。除此之外，本文引入了异构子网切换代价，切换代价与物理路径p;子 网切换次数和请求带宽有关，即切换次数越高，并且请求的带宽资源越高，则异 构子网切换代价越高，2为切换权重因子。
在最小化虚拟网络支出C(G"⑴)支出的同时，也需要满足虚拟网络请求中的 约束条件。本文使用表示加行"列的二维节点映射矩阵，其中每一行表示一 个虚拟节点加为虚拟节点数量每一列表示一个物理节点才，"为物理 节点数量|N£而厶表示虚拟节点":映射到底层物理节点叭，否则 △虫,丿)=0。
对于每个虚拟网络请求，节点映射将满足一定限制，首先是每个虚拟节点都 映射到一个物理节点上，如公式(3-4)所示。
耳 S = l,Vze{l,2,...,w)	(3-4)
因此，多个虚拟节点也不能被映射到同一个物理节点之上,如公式(3-5)所示。
S 1,巧 w {1,2,...,"}	(3-5)
i
虚拟节点nv想要映射到底层物理节点眄必须满足物理节点眄剩余可用资源 大于虚拟节点”''请求的资源。如公式(3-6)所示。
△虫，丿)(C”： -cJnO,y/w{l,2,...,"},X77w{l,2,...,7M}	(3-6)
虚拟节点":和虚拟节点";之间的虚拟链路/；将会映射到一条不可分割的物 理路径加，其中必是一系列物理链路的集合。本文使用亠表示卩行g列的二 维链路映射矩阵，其中每一行表示一条虚拟链路r, P为虚拟链路数量|引，每一 列表示一条物理链路厂，g为物理链路数量#|,如果则AL(x,y)=l,否 则 Az(x,j)=Oo
在链路映射矩阵中，对于每一行虚拟链路仃，所有映射该虚拟链路的底 层物理链路Z；必须可以组成一条物理节点":和";之间的路径，否则映射将不被 允许。与此同时，所有物理链路集合竝中的物理链路剩余带宽资源必须小于等 于带宽需求如，如公式(3-7)所示。
(x,y){B^ -Br，) > 0, Vx e {1,2,, Vy e {1,2,(3-7) 除此之外，考虑到异构子网切换带来的开销，需要进行子网切换约束。本文 使用表示卩行g列的二维链路切换矩阵，其中每一行表示一条虚拟链路厂，p 为虚拟链路数量|厂|,每一列表示一条物理链路Is, q为物理链路数量片|,该矩 阵初始化为0。当虚拟链路映射到物理路径上时，逐跳处理该链路，若该物理链
24

路y为第一跳，则As.(x,v)=i;若j，链路不是第一跳，则检查y链路与上一跳物 理链路类型是否相同，若类型相同，则视为没有发生网络切换,A.(x,v)=O,否则 发生了异构子网切换，△s(x」)=l。整条物理路径子网切换次数不大于最大切换 次数Smax，如公式(3-8)所示。
q
2 X (x, y) V Smax,色 e {1,2,…,M	(3-8)
y
综上所述，本章映射算法的求解目标将是最小化物理网络的总支出，如公式 (3-9)所示。
(3-9)
s.l.	式(3-4) ~式(3-8)
3.3链路带宽感知映射算法设计
3.3.1节点映射
本文采用贪婪节点映射算法，贪婪策略在计算复杂度上较低，是一种典型的 降低计算复杂度的策略之一。本文中的贪婪策略表现在映射虚拟节点到具有最大 可用资源的物理节点，这可以降低瓶颈节点的资源使用率。这对未来需要特定稀 缺物理资源的请求具有好处。
在节点映射过程中，需要持续记录物理网络节点和链路的可用资源，本文使 用CPU资源作为节点限制，但并不直接使用CPU⑴)作为物理节点可用资源的 表示，这是因为假设仅考虑CPU资源，则贪婪节点映射的策略并未将链路对于 节点映射的影响纳入节点映射的方案选择中，因此很容易选出跳数较远的物理节 点作为节点映射方案，这将会提高后续链路映射的物理资源支出，这也是两段式 映射方案的主要缺点。
在本文异构网络环境中，节点间通常拥有许多不同能力的通信手段，从而导 致了节点间的链路资源的多样化，而这种特性必将会影响后续的链路映射过程。 同时，由于链路多样化，削弱了贪婪策略容易选出较远物理节点带来的负面影响， 相比于随机映射策略，贪婪策略将可以尽早的使用资源丰富的节点，因此本文采 用了贪婪策略作为节点映射策略，物理节点”"的剩余可用资源将由CPU资源和 链路资源综合决定，其定义如公式(3-10)所示。
//(”' ) 7 工马、	(3-10)
r=l '
25

其中厶(“ J表示物理节点ns的所有邻接链路集合，C”、表示物理节点的剩余
CPU资源，冬表示物理链路厂的剩余带宽资源。
贪婪节点映射算法GNMA伪代码如算法3-1所示。
算法3-1贪婪节点映射算法GNMA
输入：底层物理网络G" = {N"，G ,虚拟网络请求G” = 输出：节点映射结果集
1.

2.
for n in Nv do
3
S"
4.
H严0
5.
for n in Snv do
6.
if C,r' < Cf then
7.
S”vS”“
8.
else
9.

10.
end if
11.
end for
12.
if H才 H 0 then
13.
n'[ = max对应的物理节点
14.
叫
15.
MN J	U 叫、
16.
if
17.
else
1&
虚拟节点映射失败
19.
end if
20.
end for
21.
if Nv全部映射成功then
22.
更新网络全局资源
23.
return A/v
24.
else
25.
终止服务，回收已分配资源
26.
return 0
27.
end if
3.3.2链路映射

如果不限制节点映射，则链路映射问题可以归为在底层物理网络中寻找一条 可用路径，这是一个不可拆分流问题然而，如果首先进行节点映射，则物理 链路的起点和终点已经被固定下来，由此找到一条路径的问题可以归结为约束最 短路径优先问题(Constrained Shortest Path First, CSPF) |48h 在 CSPF 问题中。 在最短路径问题中，经典Dijkstra算法可以使用跳数或者权重当作最短路径计算 的依据，然而本文的网络是多重图，Dijkstra算法不能很好的适用于多重图中最
26 短路径的计算，特别是多重图约束最短路径⑷〕。因此，本文延续Dijkstra算法的 思想，对其算法松弛环节做出了一定的优化，使其适用于求解多重图约束最短路 问题。
经典算法中路径松弛环节只有一条备选路径，然而多重图中具有多条备选路 径，因此改进松弛算法将从若干条备选路径中选出x条满足带宽约束的路径，然 后选取其中最优的一条更新距离矩阵。在衡量路径权重方面，本文也做岀了相应 的改进。首先是跳数H作为主要的权重决定因素，然后根据先驱字典，查找出其 到父节点(上一跳节点)的路径，并计算异构网络切换权重2S ,最后根据带宽 使用率计算出链路负载系数成/,则总权重为三部分之和，如公式(3-11)所示。
監严號‘+厲,”+ £%	(3-11)
其中链路负载因子£需要设置的足够小，以至于不会影响前两者对于权重的 决定地位，这样路径的选取综合考虑了跳数、切换代价，并且当两者相同时，可 以优先选取链路负载较低的链路。
算法3-2多重图松弛算法RELAXATION-MG
输入:
物理网络G,距离矩阵前驱矩阵/Ved,当前处理节点"
输出:
无
1.	for v\nu的邻接矩阵节点do
2.
w = + oo
3.
for arc in G[u][y] do
4.
依据公式3-11计算arc.weight
5.
if w > arc.weight then
6.
w = arc.weight
7.
end if
8.
end for
9.
if arc 满足约束要求 and Dist[v] > Dist[u] + w then
10.
£)/5/[v] = Dist[u] + arc.weight
11.
Pred [v] = u, arc. type
12.
end if
13. end for
通过以上分析，我们对于路径的权重和经典Dijkstra算法的松弛算法做出了 相应的改进，使得算法适用于本文的网络环境。不难看出，由上述算法计算出的 最短路径，在链路较长是无法得到最优路径，因为链路异构切换代价具有后效性, 即前面所选择的路径对于后续最优解的选取是有影响的，因此，在每次迭代中不 一定能找到全局最优解。
综上所述，本文采用K最短路径算法作为近似算法来减少搜索规模，与最短 路径算法只找到一条可用路径不同，K最短路径算法本质上是一种冗余选路，可 以依次选出最优、次优、再次优的路径。通过前文分析可知，异构网络环境下链
27

路的支出代价不仅仅由跳数决定，还与路径上的链路切换次数有关，因此在这种
情况下，可以通过借鉴K最短路径的集合选优机制从而找到相对更佳的路径，集
合中的每一条路径都具有足够带宽，通过对每一条路径计算链路代价，便可以得
到物理网络支出相对最少的路径，该路径即作为虚拟链路的链路映射解。为了计
算效率和物理网络链路的利用资源,K值不应该过大。算法流程如算法3-3所示。
算法3-3 K约束最短路径映射算法KCSPA
输入：底层物理网络G*{M,G，虚拟网络请求G、'{N、m节点映射结果集
输出：链路映射结果集
1.
ML=0
2.
for lv in L do
3
获取虚拟链路厂源节点n,和目的节点町
4.
根据MN获取”；和”;映射物理节点和
5.
根据nu和町计算最短路径集合梯
6.
重新计算路径集合代价并从小到大排序
7.
吧=0
8.
for 尤 in	do
9.
for r in p：\, do
10.
检查物理链路是否满足带宽约束条件
11.
end for
12.
if p爲满足约束条件then
13.
e7 - p：:1 u P：n.
14.
end if
15.
end for
16.
if	H 0 then
17.
e7=min(c(e7))
1&

19.
M L «	U 叫
20.
更新网络资源
21.
else
22.
虚拟链路厂映射失败
23.
end if
24.
end for
25.
if Z'全部映射成功then
26.
return ML
27.
else
2&
终止服务，回收已分配资源
29.
return 0
30.
end if

28
3.3.3算法流程
本章提出的基于链路带宽资源的在线映射算法vHSDNM-G-KSP是两阶段在 线映射算法，在虚拟网络映射过程中，算法需要逐个分析并处理虚拟网络请求。 只有完成两阶段映射之后，该虚拟网络请求才能映射成功。
对于每一个虚拟网络请求，首先将物理节点按照资源情况进行排序，然后依 据计算约束条件剔除不合理物理节点并贪婪的选择一个物理节点进行节点映射, 待节点映射完成之后进行链路映射。
链路映射过程中，根据先前的节点映射集合，找到每条虚拟链路两端虚拟节 点映射到的物理节点，然后在确定的物理节点之间计算出至多K条可用路径，并 选择具有最小物理网络支出的一条路径作为该虚拟链路的映射结果。
最后，当一次虚拟网络请求成功时，需要更新整个物理网络资源。整个流程 如图3-3所示。

图3-3算法流程图

29

3.4实验仿真与分析
3.4.1仿真环境设置
本章使用Mininet软件仿真平台搭建了异构SDN网络转发平面，使用ONOS 作为SDN控制器，在此基础上实现了虚拟网络映射算法，并在Intel Core i5- 10210U CPU, 16GB内存PC机上进行了虚拟网络映射仿真实验，异构SDN网 络底层转发平面参数在一定区间内均匀分布，详见表3-2,虚拟网络请求参数见 表 3-3 o
表3-2底层异构物理网络参数设置
参数
值
物理节点数
32
节点初始CPU容量
100
节点链路连接概率
0.5
子网1链路初始带宽容量
500
子网2链路初始带宽容量
1000
子网3链路初始带宽容量
2000
计算资源影响因子®
0.5
异构切换因子2
0.3
使用率因子£
0.03


表3-3虚拟网络请求参数设置
参数
最小值
最大值
虚拟网络请求数量
100
100
请求中虚拟节点数
2
5
请求中虚拟链路数
2
10
请求中节点间链接概率
0.3
0.3
链路带宽需求
10
500

3.4.2仿真结果分析
我们的仿真分析了在异构SDN网络环境中以下几种算法与本文的 vHSDNM-G-KSP算法在虚拟网络请求服务率、物理网络支出和映射收益支出比
方面的性能，仿真结果如下所示。对比算法介绍如表3-4所示。 表3-4对比算法表
对比算法
主要策略描述
VNE-R-ViNE-SPU]
随机节点映射+最短路径链路映射
VNE-G-SPM
贪婪节点映射+最短路径链路映射
VNE-G-LMAoKS。。]
贪婪节点映射+K最短路径链路映射
30

为了将上述算法应用到本文的仿真场景中，本文对上述算法做了一定的修改, 比如都添加了节点计算需求以及异构链路切换代价等。




VNE-G-SP
VNE-R-ViNE-SP
VNE-G-LMAoKS -6*- VHSDNM-G-KSP

The number of VRNs
图3-4虚拟网络映射成功率
图3-4表示了在相同的初始网络资源情况下，随着虚拟网络请求数目的增加, 四种算法分别运行10轮的平均映射成功率变化情况。图中横坐标表示当前时刻 虚拟网络请求到达的总数，纵坐标表示虚拟网络映射成功率叫，其值范围为 [0-1]。映射成功率是反映虚拟网络映射算法性能最直观的指标，接受率下降的越 慢，则表示该算法处理虚拟网络请求的能力越强。
从总体趋势来看，四种算法的映射成功率均随着虚拟网络请求的不断增加而 呈现波动下降趋势，在上述参数的仿真环境中，本文提出的vHSDNM-G-KSP总 体来看效果最好，在处理了 100个随机的虚拟网络请求之后，其映射成功率仍然 保持在0.75左右，VNE-G-LMAoKS算法性能次优，映射成功率在0.65左右， 其后是R-ViNE-SP算法在0.55左右，而VNE-G-SP算法性能最差，总体映射成 功率在0.48左右。
在虚拟网络请求数目为0到30个的前期时，由于此时总数不多，因此一旦 有资源需求较高的虚拟网络请求失败，则映射成功率将会迅速下降，然后随着后 续请求的成功而逐步上升，这个时期的映射成功率曲线为锯齿形波动。在虚拟网 络请求数目为30到70个的中期时，此时有一定的基数，因此失败的请求将不会 把映射成功率拉的过低，因此该阶段的映射成功率呈现波浪形。在虚拟网络请求 数目为70到100个的后期时，此时映射成功率趋于一个稳定的阶段，可以反应 常规情况下虚拟网络映射算法的性能。当虚拟网络请求数目继续增加时，则由于 网络资源消耗较多，因此会不可避免的出现拒绝率线性下降的趋势，本文并未展 现该趋势的变化情况。
31


(a)	(b)
图3-5稀疏网络和稠密网络环境下VNR接受率
图3-5是四种算法在稀疏图和稠密图中的虚拟网络映射成功率变化情况。本 文对四种算法在极端网络环境中的性能做出了评估，主要是因为除了一般规模网 络的情况下，物理网络资源较多或者较少时，虚拟网络算法的性能也十分重要。
图3-5(a)的运行环境为稀疏网络，通过将链路连接概率降为0.15使得随机生 成的物理网络链路数较少，表示异构网络需要更多跳才能完成映射。通过图3-5 左图可知，物理链路较少时，在链路映射中使用K最短路径映射的VNE-G- LMAoKS算法与本文的vHSDNM-G-KSP算法，都大幅度优于使用最短路径链 路映射的R-ViNE-SP算法和VNE-G-SP算法，这表示在网络资源较紧缺时候， 带有一定冗余度的链路映射策略能将映射成功率提升80%左右。
图3-5(b)的运行环境为稠密网络，通过将链路连接概率提升至0.65并增加异 构网络数量为5,使得随机生成的物理网络链路数较多，节点之间联通度较高, 表示异构网络节点间具有多种通信方式，同时，由于物理资源较多，因此将虚拟 网络请求增加一倍进行仿真实验。通过图3-5(b)可知，本文提出的vHSDNM-G- KSP算法较其他算法映射成功率提升9%左右，其他三种算法性能接近。在稠密 异构网络环境下，随机节点映射策略在请求数量较小时拥有一定优势，但不利于 长期的虚拟网络映射。
综上分析，本文提出的vHSDNM-G-KSP算法在不同的网络环境下较VNE- G-LMAoKS算法略有优势，主要是因为在选择路径的时候传统K最短路径并不 会记录其历史选择情况，因此当链路映射较复杂时，其选择路径比较随机，容易 导致链路碎片化。而本文所示算法在选路过程中考虑了链路类型，更倾向于选择 跳数更少，切换次数更少的路径，由于同构路径链路容量相仿，使得资源碎片化 程度较低，更有利于后续虚拟网络请求的映射。而R-ViNE-SP算法和VNE-G-SP 均性能较差，主要是因为无论是随机节点映射策略还是贪婪节点映射策略，一旦 节点映射时选取的距离较远，则要求物理路径的每一条链路都要满足带宽容量要
32

求，只有一条最短路径容易导致链路映射失败，然而在长期的虚拟网络映射过程 中，贪婪策略优于随机策略。



图3-6映射收益支出比
图3-6是四种算法的映射收益比随虚拟网络请求增加的变化情况。在相同映 射成功率的情况下，映射收益比越高则算法对映射方案的选优程度越高。但不能 只看收益支出比越高越好，因为随着拒绝率的提高，其映射收益比可能下降。假 设从某一刻开始虚拟网络请求均被拒绝，则映射收益比完全可能保持在一个较高 的水平。

20	40	60	80	100
The number of VRNs
图3-7物理网络支出
图3-7为累计物理网络支出随虚拟网络请求增加的变化图，可以看出在映射 初期，每种算法由于映射成功率都较高，因此物理网络支岀接近，随着R-ViNE- SP算法和VNE-G-SP算法映射成功率的下降，其增长幅度变慢。vHSDNM-G- KSP算法与VNE-G-LMAoKS算法总支岀接近，其差别主要在于vHSDNM-G-
33

KSP算法的选优程度更高，因此成功映射的虚拟网络请求支出较低，使得总体物 理网络支出与VNE-G-LMAoKS算法持平。
总体来看，四种算法的映射收益比性能接近，其中三种贪婪节点映射策略的 算法的映射收益比呈现出稳定的下降趋势，而使用了随机节点映射的R-ViNE-SP 算法则由于不稳定性，导致映射收益比波动较大。在虚拟网络映射成功率相仿的 两种算法中，本文提出的vHSDNM-G-KSP算法（长期映射成功率75%）与VNE- G-LMAoKS算法（长期映射成功率65%）相比，vHSDNM-G-KSP算法长期收益 支出比为0.85左右，而VNE-G-LMAoKS算法长期收益支出比为0.8,较其提高 了 6.3%o在中间映射过程中，其最大提高程度为10%左右。

图3-8 CPU资源利用率
图3-8为节点CPU资源使用率直方图。横坐标为节点CPU资源利用率，纵 坐标为CPU利用率处于该范围的节点个数。从图中可以看出，VNE-G-SP算法 CPU利用率为零的节点较多，表示有很大一部分节点从来没有被访问过，网络整 体CPU利用率较低。VNE-R-ViNE-SP算法的CPU利用率呈正态分布的特征， 利用率主要集中在0.4左右。VNE-G-LMAoKS算法和本文提出的vHSDNM-G- KSP算法CPU利用率分布趋势相似，但本文提出的算法整体利用率较高。
34


图3・9链路带宽利用率
图3-9为链路带宽资源使用率直方图。横坐标为链路带宽资源利用率，纵坐 标为带宽利用率处于该范围的链路个数。由于异构网络整体链路资源丰富，许多 链路都处于较低的利用率，为了作图清晰没有显示利用率低于0.2的链路。整体 来看，VNE-G-SP算法带宽利用率最低，本文提出的算法带宽利用率最高。利用 率的高低与请求映射成功率正相关。从分布趋势来看，采用了随机策略的VNE- R-ViNE-SP算法的链路带宽利用率离散程度最高，本文提出的vHSDNM-G-KSP 算法，带宽利用率在0.4-0.8范围分布均匀，但在0.8-1.0范围内有较多链路，这 是因为优秀链路被选择的几率较大，因此承担了较多的虚拟链路。
综上所述，vHSDNM-G-KSP算法在常规网络规模下可以将映射成功率提升 15%,且随着网络资源丰富程度的增加，映射成功率提升的幅度更大。同时，算 法较VNE-G-LMAoKS算法平均提高了 6.3%的收益支出比，同时资源利用率也 更高。其中贪婪节点映射策略有利于长期的虚拟网络映射，而考虑异构网络切换 代价的K最短路径链路映射在异构网络环境中具有更好的性能提升。
35
3.5本章小结
在本章中，论文提出了一种基于链路剩余带宽的启发式在线网络映射算法, 算法结合异构网络切换特点对映射模型和约束条件做出了改进，并且以最小化物 理网络支出为目标构建映射方案。在具体实现上，算法沿用经典的两步映射策略， 首先进行节点映射，接着进行链路映射。在节点映射过程中使用了贪婪的启发式 策略，在链路映射过程中使用带有路径松弛的约束K最短路径策略实现了链路 选优过程。仿真结果表明，相较于目前已有的采用两段式启发策略的VNE-G-SP、 VNE-R-ViNE-SP和VNE-G-LMAoKS算法，论文提出的算法在大部分情况下能 够将虚拟网络请求映射成功率提升15%左右，且随着网络资源丰富程度增高，映 射成功率提升的幅度越高，减少物理网络分配的资源，将映射收益比提升了 6% 左右，同时网络资源利用率也有一定提高。
36
第四章基于多QoS模型的蚁群优化映射算法
4.1引言
随着网络业务的不断挖掘，越来越多的领域和场景需要端到端时延服务保障, 例如智能车联网、现代军事化战场等场景中，网络传输时延和网络传输带宽一样 重要，因此，为同时包含带宽和时延约束的虚拟网络建立请求分配资源时，底层 物理网络需要为其分配的资源不仅是节点计算资源和链路带宽资源，并且物理链 路还需要满足虚拟链路的时延约束。因此，研究同时包含带宽和时延的多QoS模 型的虚拟网络映射算法是具有意义的。
对于这种包含多QoS约束的虚拟网络请求，使用两段式启发策略进行映射 方案的求解是可行的。沿用前一章节中提出的算法思路，需要在链路映射过程中 添加时延约束条件。然而通过这种策略选取映射方案的主要缺点在于链路映射约 束较为苛刻，使得计算出的备选路径较少，难以满足虚拟链路要求，因此导致请 求失败。同时，启发式的策略一般是针对某种约束条件做出优化的，如果添加约 束条件则需要对模型和映射过程重新进行规划，使得算法不够灵活。
针对启发式算法选优路径较少以及不够灵活的问题，元启发式算法通过借鉴 自然界的一些随机现象，采用了智能体和随机搜索相结合的方式，使得能够通过 定义通用的算法框架来解决虚拟网络映射问题，例如遗传算法Qi、粒子群优化算 法〔24】、模拟退火算法【25】等。元启发式算法在搜索过程中可以产生足够数量的可行 解，解决了启发式算法不够灵活以及选优路径少的问题。蚁群算法是一种应用广 泛的元启发式算法，目前已经被用于解决诸如线性规划、组合优化等最优化问题， 适合于解决虚拟网络映射问题⑸相较于其他元启发式算法，蚁群算法的主要优 势在于其简单灵活的算法框架和优秀的正反馈机制。
文献［23］将蚁群算法引入了虚拟网络映射问题中，将信息素矩阵表示为节点 映射矩阵，蚂蚁通过信息素计算映射转移概率，由此选出虚拟节点映射的物理节 点，然后使用最短路径映射链路。文献［53］沿用上述思路，在链路映射中使用MCF 算法求解链路映射结果，并且启发函数和信息素通过链路映射中消耗的物理带宽 资源定义。在这些研究中，信息素建模均只考虑了链路剩余带宽因素，论文首先 针对传统蚁群映射算法在信息素建模中没有考虑异构切换代价这一不足，将剩余 带宽资源和异构切换代价引入启发函数和信息素模型的定义中，使得蚂蚁在搜索 过程中更倾向于寻找剩余资源丰富的同构链路。其次，论文针对链路映射过程中 蚂蚁未考虑到多重链路的问题，引入同阶段映射中增广图的概念，使得每条物理
37

链路都可以存储信息素，在多轮迭代中可以更容易逼近最优解，提高了虚拟网络 请求成功率。
综上所述，论文基于蚁群优化算法的框架和策略，提岀了一种基于蚁群算法 改进的带宽和时延感知的虚拟网络在线映射算法。通过优化信息素模型和更新流 程，使得算法适用于解决同时具有带宽和时延约束的虚拟网络建立请求。仿真结 果表明，相较于VNE-Greedy和VNE-AC算法，在多轮迭代搜索过程中，论文提 出的算法能够提高虚拟网络请求成功率，优化蚁群搜索方案，减少物理网络资源 支出，提高网络资源利用率。
4.2问题建模与分析
4.2.1网络描述
底层物理网络的描述同前第三章类似，使用无向多重图(Undirected multigraph) Gs =(NS,ASN>A[~)来表示底层物理网络平面。与前文不同的是，其 中&由链路可用带宽与当前链路时延综合描述，对于链路, 使用B©表示链路/：(/；.	当前可用的物理带宽，坨表示该物理链路的当前时延。
虚拟网络请求使用无向图GJ(M',7G，C；)来表示，其中节点约束与前 一章相同，使用C”；表示虚拟节点”;'的CPU资源请求，而链路资源约束不仅包含 了带宽约束，还包括了时延约束。具体而言，每条虚拟链路唄；€巧,如表示 该虚拟链路的带宽请求，珀表示该虚拟链路的端到端最大时延要求。
4.2.2模型求解目标
对于多QoS (时延、带宽)需求的虚拟网络请求，首先虚拟网络请求收益需 要重新被定义，由于引入时延因素，时延要求越低的虚拟网络则受益越高，因此， 对于虚拟网络请求GJ定义它在任意时刻t的映射收益R(G\ty)为链路带宽收 益和链路时延收益之比，如式(4-1)所示：
工B,
R(Gv(t^ = ^-	/4-n
同样，模型的求解目标以及约束条件需要相应做岀一定的调整，但大多数约 束条仍和前一章保持相同。在参数方面仍旧使用△”表示m^n列的二维节点映 射矩阵，使用表示°行g列的二维链路映射矩阵，使用表示P行9列的二 维链路切换矩阵。
38

其中，在链路映射矩阵中，对于每一行虚拟链路/：',所有映射该虚拟链路 的底层物理链路必须可以组成一条物理节点吋和”;之间的路径，否则映射将 不被允许。与此同时，所有物理链路集合朋中的物理链路剩余带宽资源必须小 于等于带宽需求如，且链路时延总和必须小于等于时延需求九，因此添加的时 延约束条件如公式(4-2)所示。
弓亠(3)(花)<	e {l,2,...,q}	(4-2)
综上所述，多QoS模型中的优化目标为最小化物理网络支出。如公式(4-3) 所示。
Minimize
4.23蚁群算法原理
蚁群优化算法(Ant Colony Optimization, ACO)是由Dorigo M等研究人员 通过对蚂蚁觅食的长期观察与研究而得出的智能仿生算法［52】。蚁群中的每只蚂 蚁都没有高级智慧，然而却可以通过群体合作而表现出“智能”行为，原因在于 信息素在蚁群中的使用，信息素(Pheromone)是一种蚂蚁分泌的化学物质，在 蚂蚁间的交流中扮演着“文字”的角色，蚂蚁走过的路径会将信息素留下，就如
39

同人类走过小路为后人留下了指示牌一样，这种路径上残留的信息素对后来蚂蚁 具有引路作用。
信息素的分布情况总体而言表现出一定的分布规律，距离较近的路程残存浓 度较高，反之较低。这是因为大多数蚂蚁倾向于选择较近的路程，因而留下的信 息素较多。此外，作为一种化学物质，路径上已经存在的信息素会随着时间的流 逝而不断蒸发。因此在通往目的地的路径上，优秀路径上的信息素通过积累变得 愈发浓烈，而其他路径上残留的信息素会逐渐减少。在这种正反馈机制作用下， 最终整个蚁群在群体合作下可以找到最优路径，如图4-1所示。

综上所述，蚁群算法的优点主要在于：1）灵活：其算法框架简单，在其基 本思想上针对具体问题做出改进便可以将其用于不同的问题。通过提前定义好的 启发函数模型和信息素模型，便可以算出蚂蚁到下一个所有可行状态的转移概率, 不再依靠其它辅助信息。2）并行加速：蚂蚁可以从不同的源点出发，通往不同 的目的地，在搜索过程中通过信息素进行个体间交流，不依赖其他蚂蚁个体，因 此搜索过程可以使用多线程/协程模型并行实现。3）正反馈：蚂蚁的选择概率受 到信息素的影响,信息素浓度越高则该蚂蚁更倾向于选择该路径，与此同时蚂蚁 还会在所经过路径上释放信息素，从而使得较优路径上的信息素浓度增加，加快 了算法的收敛速度，不断逼近最优解。
4.2.4蚁群优化姗算法模型
由4.2.2节分析可知，我们的模型求解优化目标是一个二元组合优化问题， 之前我们已经知道这是一个NP-hard问题，结合第三章中的启发式算法，通过贪 婪策略和K最短路径可以对该问题进行近似求解。但这种策略通常很容易收敛 到局部最优解，在解决大规模虚拟网络映射问题显得力不从心。因此，本章基于 蚁群优化算法设计了一种元启发式算法vHSDNM-ACO用来解决大规模虚拟网
40 络映射算法。实际上，对于元启发式算法其最大的挑战是如何将现有算法思路应 用于待解决的问题。


图4-2蚁群优化映射算法原理图
蚁群优化算法通常用于解决TSP问题，蚂蚁在网络中根据信息素和启发函 数，不断选择下一个未访问过的节点，最终访问完全部节点从而产生问题的一个 解。为了将蚁群算法引入虚拟网络映射问题，本文采用文献［16］中类似的方法对 底层网络进行图转化。图4-2中蓝色节点表示底层物理网络节点，节点间的实线 表示两节点间的某种通信方式，其中线上的数字表示该链路可用带宽，括号中的 数字表示链路时延。在该物理网络中加入绿色节点，每个绿色节点对应虚拟网络 请求中的一个虚拟网络节点，该节点资源视为无穷大。任一虚拟节点和每个物理 节点之间都添加一条链路，该链路资源可视为无穷大。通过这种转化，原来的物 理网络和虚拟网络综合起来变成了一个大的网络，称之为映射扩展网络，则蚁群 映射算法可以描述为蚂蚁在映射扩展网络上的寻路问题。
具体而言，对于虚拟网络请求中的每条虚拟链路，蚂蚁将从某个虚拟节点出 发，在满足约束条件的情况下，经过物理网络到达另一个虚拟节点，则蚂蚁经过 的物理网络中与源虚拟节点和目的虚拟节点相连的物理节点成为各自的节点映 射方案，其中经过的物理链路路径成为该虚拟链路的链路映射方案。当蚂蚁走过 虚拟网络请求中所有的节点后，则视为其产生了一个对于该虚拟网络请求的映射 可行解。如果不能到达，则视为映射失败。
每只蚂蚁都会在图中的链路留下信息素，通过多轮迭代，最后选择物理网络 支出最小的一个映射解作为该请求的最终映射方案。
41
4.3蚁群优化昨算法设计
通过对多QoS约束下虚拟网络映射问题的建模和分析，使用蚁群优化算法 来解决该问题的具体思路如下所示。
首先，对每个虚拟网络映射问题，将其分解为若干子问题，通过对子问题进 行排序并顺序求解来完成整个问题的求解，子问题的解决方案仅相当于整体解决 方案的一部分。接着，4„只人工蚂蚁开始进行并行迭代搜索，直到达到预定的 迭代次数N”，在每次迭代期间，每个蚂蚁通过从一个子问题过渡到下一个子问 题，逐步构造出问题的解决方案。
在每一个子请求中包含一个虚拟节点映射和若干虚拟悬挂链路，首先进行虚 拟节点的映射，节点映射本质上是潜在映射物理节点中采用随机比例策略选择一 个映射概率最大的节点，该映射概率是基于启发信息和信息素浓度计算得到的。 在每个节点映射完毕之后，将继续映射该虚拟节点和其它已映射虚拟节点的虚拟 悬挂链路，从而完成一个子问题的求解，
在每轮迭代中，每只蚂蚁重复上述过程即可完成子问题序列的映射，并形成 个对于虚拟网络请求映射的可行解，通过公式(4-3)计算每个可行解的物理网 络支出，选择其中支出最小的解作为本次迭代的最优解，该映射方案所关联的映 射信息素将会影响信息素的更新。
此外，信息素在所有环境中都会被轻微蒸发，这有助于蚂蚁发现环境中的新 轨迹而不是被困在局部最优解中。尽管如此，每个子问题在求解过程中，每只蚂 蚁根据信息素选择的最佳映射方案将会遗留在映射轨迹中，因此信息素在每只蚂 蚁求解的过程中逐渐加强。这有助于蚂蚁改进并不断完善从而获得最佳解决方案。 整个过程在最多N”次迭代过程中不断重复，最终，由&，只蚂蚁产生的最优解将 会作为最终解输出。
因此，整个过程可以分为几个基本阶段：1)子问题分解；2)子问题求解3) 最优解选取；4)信息素更新。在后文中将详细地描述上述过程。
4.3.1问题分解
虚拟网络请求可以分解为几个子请求，其中每个请求对应一个子问题， 使用SC.表示。首先根据公式(3-1)计算出虚拟网络请求G”中所有的节点需求，并 随机选择一个虚拟节点进行首先映射，虚拟节点"：映射到物理节点叭上需要满 足节点CPU映射需求，当选择第一个虚拟节点之后，剩余的虚拟节点和链路使 用剩余虚拟网络6"表示，在剩余虚拟网络中，只有一端节点的链路成为悬挂链 路，因此SC。由选择的虚拟节点以及该节点所有的虚拟悬挂链路构成。当SC。映
42

射完毕之后，将会从剩余虚拟网络中减去，即G' ^G'\SCa.不断重复上述 过程，直至G' = 0 °
通过上述问题分解过程，产生了 {SQ}序列，在每次迭代中蚂蚁依次求解子 问题序列，最终完成对于整个问题的求解。图4-3是一个子问题分解和求解的示 意图。
首先虚拟网络请求拓扑如图4-3(1)所示，首先求解第一个子问题SC。，即映 射a节点，由于是第一个节点，没有悬挂虚拟链路，所以子问题S©只需要将虚 拟节点a映射到一个物理节点上，如图4-3(2)所示，映射完毕后的结果如图4-3(3) 所示。接着图4-3(4)中分解出第二个子问题SC?,由于a节点已经映射，因此子 问题SC?包含一个虚拟节点b和一条虚拟链路，如图4-3(5)所示，首先映射虚拟 节点b, —旦虚拟节点b完成映射，其悬挂虚拟链路两端的虚拟节点都已经完成 映射，此时映射虚拟链路(a, b)就等效于在两个已映射的物理节点之间找到一条 “最佳”的物理链路。此时映射完毕后的结果如图4-3(6)所示。最后求解第三个 子问题SC3,此时剩余未处理的虚拟网络请求如图4-3(7)子图所示，由于只剩下 一个虚拟节点，因此将其作为最后一个子问题进行处理，在子问题SC,中，需要
依次处理两条虚拟悬挂链路(c, b)和(c, a),解决子问题SG之后，所有的虚拟节 点和虚拟链路都映射完毕，如图4-3(9)所示。


4.3.2子问题求解
在求解｛SQ｝序列的过程中，蚂蚁需要完成SQ问题的映射，首先构建一个 潜在的物理节点映射集合｛PN；｝,集合中的每个节点均满足虚拟节点映射需求。 定义M为当前己映射的物理节点集合。
为了在潜在映射物理节点集合\PN盲中选择最合适的物理节点PN：进行映 射，本文定义了选择概率因子打〃表示将SC。子问题映射到节点的概率。如公 式(4-4)所示。

a为信息素权重因子，指示信息素对于映射选择的影响程度，0为启发权重 因子，指启发信息对于映射选择所占的影响程度。为映射SC.问题选择的候 选物理节点(Potential Node candidates)集合，其将会受到前面映射的影响，随 着物理节点的映射，PM需要去除前面子问题中已映射的物理节点。
对于候选物理节点集合中的节点对，定义启发信息因子ZB如公式(4-5)所示。 %=q + Y BPU	(4-5)
其中，加为恋节点和";节点之间通过路径代价公式算出的最佳路径。
通过启发信息因子，具有最大剩余资源的节点的选择概率因子也将更高，从 而更有可能被选为映射节点。与此同时，信息素浓度也将会在每次迭代中影响节 点的选择概率，信息素的相关定义在下一节阐述。
每一个子问题的节点映射解将会在选择概率因子｛几b｝集合中选择，其中并 不是选择最高概率的节点，而是使用比例随机算法在待选集合中选择一个最容易 被选择的节点。比例随机算法(Fitness proportionate selection)又称轮盘赌算法 (Roulette wheel selection),是一种累积概率选择算法，在选择过程中，使用一 个选择概率因子表示一个轮盘区间，选择概率因子越高，则该节点对应的轮盘区 域越大，越可能被选中。因此，每个节点实际被选择的概率如公式(4-6)所示。
P'
p'=	—
ah	I叫
7=1
当映射节点被选择后，继续处理虚拟网络请求中该虚拟节点到其他已映射虚 拟节点的悬挂虚拟链路集合，由于集合中虚拟悬挂链路的两端虚拟节点都己经被 映射，因此悬挂链路将会映射到吋节点和城节点之间的物理路径上。直接使 用跳数作为路径权值并不是一个好的选择，因为该算法并没有将剩余带宽以及链
44

路类型进行考虑，所以本文定义了适合于本文网络的路径度量，实际上我们的目 标是选出提供最佳带宽限制的具有最少网络切换次数的最短路径，这样可以降低 物理链路中的带宽资源支出。因此，链路p的距离(Distance)如公式(4-7)所示。



4.3.3信息素模型
在进行下一次迭代之前，信息素将会挥发。在/次迭代完成之后，进入什1 次迭代之前，对于求解所有｛SQ｝,Q = l,2,...g子问题留下的信息素，定义其挥发 后的浓度如公式(4-8)所示。
%(' + l)= Q・％(/)，Qw(°，l)	(4-8)
除了信息素挥发过程，在｛SQ｝,a = l,2,...也子问题序列的求解过程中，所有 最佳映射节点｛PNT，PN7，..・,PNF\构成了最佳映射方案必却，最佳映射方案 的物理网络支出可以通过公式(4-3)计算得到，我们使用物理网络支出的倒数作为 信息素浓度增强的因子。如公式(4-9)所示。

其中p为虚拟网络请求中虚拟链路总数，g为映射物理网络链路总数，0为 信息素强度常数。另外，当尸0时，巧”(0)设置一个随机值，以便于增强第一轮 的搜索能力。
因此，假设虚拟节点数目为加，物理节点数目为”，通过定义一个加行”列 的信息素矩阵pher[m][n],蚂蚁在每次进行状态转移的过程中，通过累积的信息 素矩阵以及启发函数便可以算出每个备选映射节点的转移概率，从而完成一个节 点的映射。
在一般情况下，节点之间只有一条链路连接，即蚂蚁从A节点移动到B节 点有且只有一种路径，然而在异构子网环境中，两个物理节点之间的路径可能是 具有多种情况的，假设当前蚂蚁己经将两个虚拟节点分别映射物理节点A和物 理节点C上，此时进行悬挂链路映射时，蚂蚁有6条备用路径可选，如图4-4所 示。依据公式(4-7)可以计算出最优路径，然而随着路径跳数的增加，备用路径的 数目也将呈指数上升，因此蚂蚁在选择链路的过程中使用映射扩展图链路上的信 息素浓度和启发函数来计算转移概率。
45
因此，在信息素更新时，将使用当前最佳路径来计算信息素增量，并且在每 一次映射成功后，映射扩展图链路上的信息素也需要同步进行更新。

4.3.4算法流程
由于虚拟网络的请求规模可能增长，需求可能多样，对于携带有带宽和时延 需求的复杂虚拟网络请求，通过改进蚁群优化算法中的信息素和启发因子，从而 在多代蚂蚁迭代中快速找到次优解，从而降低物理网络支出，从而降低请求拒绝 率。
对于携带有时延和带宽需求的虚拟网络请求，每条虚拟链路的映射支出需要 综合考虑带宽、时延、异构子网切换次数。该算法首先进行请求规模的评估，当 评估结果小于某个阈值时，则采用启发式策略计算出所有备选路径并进行选优, 当评估结果大于该阈值时，则采用基于蚁群算法的策略来进行虚拟网络映射。该 阈值依据历次映射中虚拟网络的规模和映射花费时间综合算出。
当每个虚拟网络请求到来时，执行vHSDNM-ACO算法来完成整个映射流 程，其中整个算法流程由vHSDNM-ACO-Framework算法和vHSDNM-ACO- Slover算法两部分组成。
vHSDNM-ACO-Framework算法描述了算法的整体框架，包括蚁群迭代、信 息素更新、以及算法终止条件等。算法伪代码如算法4-1所示。
算法 4-1 vHSDNM-ACO-Framework
输入：底层物理网络Gm、虚拟网络请求GV{N\L'}
输出：	映射方案M =
1. 初始化全局最优映射解Mg/<0"=+8
2. 初始化迭代次数、蚂蚁数量
3. 计算虚拟节点数目nv = size’N'、
4. 计算物理节点数目ns =size
5. 初始化信息素矩阵pher[nv][nx]
6. 基于公式4-5计算每个物理节点启发因子
7.
while最大迭代次数未到do
&
初始化蚁群他
9.
for nan! in Nan, do
10.
执行算法4-2获得映射解Mant
11.
使用公式4-9更新信息素矩阵中映射解轨迹的信息素
12.
end for
13.
计算本次迭代过程中最佳映射解斶。辺
14.
if M嗣 < Mgiobai then
15.
更新全局最优映射解Mg!ohal=M!ocal
16.
end if
17.
进行信息素蒸发

end while
19.
return Mgiobai
vHSDNM-ACO-Slover算法是具体的蚂蚁搜索流程算法，其描述了每一只蚂 蚁是如何基于信息素和启发函数进行子问题逐步求解的过程。每只蚂蚁随机的从 一个节点出发，从而生成了第一个子问题。当第一个子问题求解完毕后，剩余的 子问题由则是映射那些已映射的邻居虚拟节点中未映射的节点及其悬挂链路。其 中节点的选择则是基于转移概率和轮盘赌算法，而链路的选择则是选择综合度量 最优的链路，重复子问题的解决过程，当前蚂蚁便可以得到一个可行的映射解。 如果无法完成虚拟网络请求的映射，则返回一个空解，视为本次蚂蚁搜索失败。 算法伪代码如算法4-2所示。
算法 4-2 vHSDNM-ACO-Slover
输入：底层物理网络Gs{Ns,If},虚拟网络请求G''{N',L'} 输出：映射方案Mtrail
1. 初始化映射方案
2. 随机挑选一个虚拟节点硝构造初始子问题
3. 依据转移概率矩阵在物理节点集合中挑选礦作为硝节点映射
4. 标记虚拟节点加和物理节点碼为已映射
5. 将所有未映射且与已映射节点相邻的虚拟节点放入集合Snear
6. for ": in Snear do
7. 构建可映射物理节点集合并计算其转移概率
&	根据随机比例算法选择一个物理节点”;进行映射
9. 基于公式4-7将该悬挂链路映射到一条最优可用物理路径p
10. if映射无法满足资源约束then
11. continue
12. end if
13. 将”;和路径p加入颯圖中，并将虚拟节点"：和物理节点";标记为己映射
14. 将已映射虚拟节点移除
15. 将其未映射悬挂邻居节点加入S”如”
16. end for
]7. retum
综上所述，该策略适用于映射规模较大的异构SDN网络，相对于两段式的 求解策略，该策略综合考虑了节点、链路带宽、链路时延多方面因素，充分利用 了蚁群搜索算法以及异构网络中具有丰富的不同网络类型的特点。对于大规模的 异构网络和映射需求，相对于精确式算法，该算法牺牲了一定的最优性，换取了 映射时间的减少。相对于启发式算法，通过随机搜索特性，提高了算法选优的能 力。
4.4实验仿真与分析
4.4.1仿真环境设置
本章在Mininet仿真平台中对异构SDN网络物理链路添加了时延参数设置。 详见表4-1,虚拟网络请求参数见表4-2,蚁群优化映射算法相关参数见表4-3。
需要注意的是，同前一章相同，所有的网络拓扑构建概率仅作为强参考，如 果生成的网络是非连通图，则将会随机增加链路使得物理网络和虚拟网络请求均 为连通图。
表4-1底层网络参数设置
参数
最小值
最大值
节点数
64
64
节点CPU容量
80
100
每子网节点链路连接概率
0.15
0.3
子网1链路带宽容量
500
500
子网2链路带宽容量
1000
1000
子网3链路带宽容量
2000
2000
子网1链路时延
1
3
子网2链路时延
10
30
子网3链路时延
10
100
异构切换因子2
0.3
0.3


表4-2虚拟网络请求参数设置
参数
最小值
最大值
虚拟网络请求数目
30
30
虚拟节点数
5
10
虚拟链路数
5
20
节点间链接概率
0.15
03
节点CPU需求
1
10
链路带宽需求
50
500
链路时延需求
5
500

48

表4-3蚁群算法参数设置
参数
值
信息素权重因子a
1
启发函数权重因子0
2
信息素蒸发系数Q
0.95
信息素强度Q
1
最大蚂蚁个数
16
最大迭代次数
32

4.4.2仿真结果分析
我们的仿真分析了在异构SDN网络环境下表4-4中的算法与本文的 vHSDNM-ACO算法在虚拟网络映射成功率、物理网络支出、映射收益支出比、 物理资源利用率方面的性能，仿真结果如下所示。
表4-4对比算法表
对比算法
主要策略描述
VNE-GreedyW】
贪婪节点映射+最短路径链路映射
VNE- AW】
蚁群算法
为了将上述算法应用到本文的仿真场景中，本文对上述算法做了一定的修改, 比如都添加了节点计算需求、链路时延计算需求以及异构链路切换代价等。




图4-5虚拟网络映射成功率
图4-5表示了在相同的初始网络资源情况下，随着虚拟网络请求数目的增加, 三种算法分别运行10轮的平均映射成功率变化情况。随着虚拟网络请求数目的 增加，接受率均呈现不断下降趋势，总体而言，两种元启发式算法均优于启发式
49

算法，主要原因是因为贪婪策略容易选出跳数较多的链路，而跳数越高，则时延 要求越不容易被满足，因此在多QoS模型下贪婪策略效果较差。而对于蚁群优 化算法而言，蚂蚁随着迭代轮次的增加，可以选出距离较近的节点映射，因此映 射成功率较高。本文提出的vHSDNM-ACO算法针对蚂蚁在稠密图中选优的策略 做了一定改进，使得蚂蚁更倾向于选择代价较小的路径，但总体而言，去除随机 因素等影响，vHSDNM-AC0相比VNE-AC算法在映射成功率方面提升有限，仅 提升5%左右。
1.0 -
0,8 -
0.6 -
0.4 -
0.2 -
0.0
20	40	60	80	100
The number of VRNs
图4-6映射收益支出比
图4-7累积物理网络支出
图4-6表示了三种算法映射收益支出比随虚拟网络请求数目的增大的变化 情况。根据第三章的分析可知，VNE-Greedy保持较高收益支出比是因为其请求 拒绝率较高。对比我们的vHSDNM-AC0和VNE-AC算法可以看出，在本文的
50

环境中，我们的算法在收益支出比方面优于VNE-AC算法，两者虽然物理链路 带宽支出相仿，但是vHSDNM-ACO算法产生的最优映射解的异构切换代价较 低，因而总体物理网络支出降低10%,从而使得映射收益比较高。两者的物理网 络支出变化情况如图4-7所示。
vHSDNM-ACO


图4-8节点CPU利用率
图4-8为VNE-AC和vHSDNM-ACO两种蚁群改进算法的节点CPU利用率 直方图。从分布趋势来看，两种情况都存在有大部分节点空闲的情况，但 vHSDNM-ACO算法的分布均值相对更高，总体来看，两种算法的节点CPU利 用率相当。


图4-9链路带宽利用率
图4-9为VNE-AC和vHSDNM-ACO两种蚁群改进算法的链路带宽利用率 直方图。同前一章相同，有许多链路利用率较低是因为异构网络链路资源丰富, 这些链路暂时还没有承担虚拟链路。从分布趋势来看，vHSDNM-ACO算法分布 更加平均，且链路带宽利用率更高。这是因为算法充分考虑了多重图的信息素优 化模型，使得每一轮迭代选出的最优链路都更加合理，因此带宽利用率更高。


图4-10链路信息素分布图
图4-10表示了使用vHSDNM-ACO算法对某次虚拟网络请求进行50轮迭代 搜索过程中链路信息素变化情况。通过散点图可知，虽然整个网络拥有近2000 条链路，但在一次搜索中只有近50条链路信息素浓度超过最大值的一半，这表 示大部分映射链路在该请求的搜索过程中贡献有限，而少部分优秀链路在多轮迭 代中不断累计信息素，最终映射链路结果大概率在这些链路当中选出。

图4-11映射解物理网络支出变化趋势

52
图4-11表示了该虚拟网络求解过程中所有可行解的物理网络支出变化趋势。 在初始迭代过程中，每轮选出的映射解物理网络支出均值为900左右，经过15 轮迭代，便将物理网络支出降低至750左右，降低了 16%的资源消耗。经过30 轮迭代，产生的最优映射解已经降低了 19.4%的资源消耗。最终通过50轮迭代， 降低了 22%的资源消耗。可以证明通过蚁群映射算法对降低物理网络的资源消 耗具有一定作用。
综上所述，vHSDNM-ACO算法在将映射成功率提升5%的同时，较VNE- AC算法降低了 10%的物理网络支出，同时资源利用率也更高。通过蚁群映射搜 索算法，可以在迭代过程中找到逼近最优解的可行解，对于虚拟网络映射问题是 一种有效的优化策略。
4.5本章小结
在本章中，论文基于蚁群优化算法的框架和策略，提出了一种基于蚁群算法 改进的带宽和时延感知的虚拟网络在线映射算法。论文首先根据多QoS模型完 成了映射模型和约束条件建模，并且对蚁群算法蚂蚁搜索流程进行重新规划，使 得其适用于异构网络环境下解决虚拟映射问题。在蚁群算法迭代过程中，论文提 出的算法对启发因子和信息素模型两个方面进行了改进，将剩余带宽资源和异构 切换代价纳入路径选优机制中，使得蚂蚁在搜索过程中更倾向于寻找剩余资源丰 富的同构链路。同时，针对蚂蚁搜索过程中只能通过一条路径到达下一节点的问 题，引入同阶段映射算法中增广图的概念，使得每条物理链路都可以存储信息素 通过定义多路径选优准则，可以更容易的逼近物理资源消耗较少的最优解。从而 提高虚拟网络请求成功率，降低物理网络支出，提高物理资源利用率。仿真结果 表明，相较于VNE-Greedy和VNE-AC算法，论文提出的算法能够在满足多QoS 需求虚拟网络请求的基础上，提高虚拟网络请求成功率，优化蚁群搜索方案，减 少物理网络资源支出，降低物理网络收益支出比，提高网络资源利用率。
53
第五章总结与展望
5.1本文工作总结
在传统网络环境中解决虚拟网络映射问题时，底层网络被建模为带权无向图, 节点间仅有一条物理链路可以进行通信，当两个节点间没有直连链路时，必须通 过其他节点通信，在这种情况下虚拟链路会映射到多条物理链路上，从而占用多 条物理链路资源。而对于异构SDN网络环境，其底层网络被建模为带权无向多 重图，两个节点间可能有多种平行链路，在这种情况下，如何将虚拟网络请求中 的虚拟链路映射到合适的物理链路上成为了重要的研究点。论文主要对虚拟网络 映射问题中的链路映射阶段做出了研究和改进，通过将虚拟网络请求映射到底层 异构网络中，实现异构网络资源虚拟化的合理配置。主要研究内容有以下两点：
(1) 基于链路带宽资源的在线虚拟网络映射算法
在异构SDN虚拟化架构中，网络由控制层、虚拟层和转发层组成。虚拟网 络映射问题是将虚拟网络请求映射到转发层中，不考虑其与控制层的链路情况。 虚拟网络请求的资源包括计算资源以及链路带宽资源。如何合理的分配物理带宽 资源，在满足虚拟网络请求约束条件的同时最小化物理网络支出是本方案研究的 关键问题。
论文以面向异构SDN网络研究背景，提出一种虚拟网络在线映射方法，该 方法假设请求到达速率呈泊松分布、且带宽需求在一定范围内正态分布，综合考 虑节点计算资源约束和链路带宽资源约束，以最小化底层物理网络支出构建虚拟 网络映射模型。同时，论文贪婪算法来得到节点映射这一问题的近似解，同时在 链路映射时考虑底层物理链路的异构切换代价。仿真结果表明，在相同的虚拟网 络请求数目下，该算法与最优对比算法相比，提高了 10%的映射成功率以及6.3% 的映射收益支出比，同时资源利用率也更高。
(2) 基于带宽和时延的多QoS模型的蚁群优化映射算法
首先，论文针对蚁群搜索不能识别异构链路的问题，将剩余带宽资源和异构 切换代价引入启发函数和信息素模型的定义中，使得蚂蚁在搜索过程中更倾向于 寻找剩余资源丰富的同构链路。其次，论文针对链路映射过程中蚂蚁未考虑到多 重链路的问题，引入同阶段映射中增广图的概念，使得每条物理链路都可以存储 信息素，从而可以更容易逼近最优解，提高了虚拟网络请求成功率。
论文基于蚁群优化算法的框架和策略，提出了一种基于蚁群算法改进的带宽 和时延感知的虚拟网络在线映射算法。通过优化信息素模型和更新流程，使得算
54
法适用于解决同时具有带宽和时延约束的虚拟网络建立请求。仿真结果表明，相 较于VNE-AC算法，在多轮迭代搜索过程中，论文提出的算法能够将虚拟网络 请求映射成功率提升5%左右，减少10%左右的物理网络支出，同时提高网络资 源利用率。能够更合理的使用底层物理资源，从而满足了更多具有时延和带宽需 求的虚拟网络请求。
5.2后续研究工作
论文主要对异构SDN网络资源分配中虚拟网络映射问题展开研究，在研究 过程中，仍然有很多不足需要去完善：
(1) 本文提出的最小化物理网络支出的在线映射算法是静态映射算法，并 没有考虑到链路分割和链路迁移的问题，因此在虚拟网络映射方案计算部署之后, 在虚拟网络持续时间到达之前，网络映射将不会随着时间改变，这可能导致物理 链路碎片化，进而影响全局的物理网络资源的使用效率。对于传统网络而言，链 路分割和链路迁移配置复杂，因此实际部署时难以实现。在后续研究中，可以进 一步讨论SDN环境下考虑链路分割和链路迁移的部署问题，同时提出更高效的 启发式算法。
(2) 本文提出的考虑异构子网切换代价的链路映射算法，均只考虑了同一 条虚拟链路映射到的底层物理链路组成的路径上的切换代价，仅对于多跳可达的 链路才具有一定的优势。然而对于复杂的虚拟网络请求，其上层路由可能涉及到 多条虚拟链路，此时实际走过的物理路径由两条虚拟链路分别映射的物理路径组 成。在这种情况下，异构切换代价并没有被考虑。因此对于复杂虚拟网络请求的 异构切换代价还需要在后续阶段中继续研究。
55
参考文献
[1] 王莹，周云，袁俊.下一代异构IP网络的关键技术[J].移动通信,2007, 31(002):93-96.
[2] Borges M, Vinicius, Cardoso, et al. Aspirations, challenges, and open issues for software-based 5G networks in extremely dense and heterogeneous scenarios]J]. EURASIP Journal on Wireless Communications & Networking, 2015.
[3] 谢才军.基于异构网络互联的软定义控制系统研究[D]・北京邮电大学,2012.
[4] Mendonca M, Obraczka K, Turletti T. The Case for Software-Defined Networking in Heterogeneous Networked Environments[C]// Acm Conference on Conext Student Workshop. ACM, 2012.
[5] Tauber M? Bhatti S N, Melnikov N, et al. The Case for Heterogeneous WLAN Environments for Converged Networks[C]// ICNC 2013 - IEEE Inti. Conf. Computing, Networking and Communications. IEEE, 2013.
[6] Chen N, Rong B, Mouaki A? et al. Self-Organizing Scheme Based on NFV and SDN Architecture for Future Heterogeneous NetworksfJ]. Mobile Networks and Applications, 2015, 20(4):466-472.
[7] Shneiderman B? Aris A. Network Visualization by Semantic SubstratesfJ]. IEEE Transactions on Visualization and Computer Graphics, 2006, 12:733-740.
[8] Zhu, Ammar. Algorithms for Assigning Substrate Network Resources to Virtual Network Components[C] // Infocom IEEE International Conference on Computer Communications. IEEE, 2007.
[9] Ghorbani S3 Godfrey B. Towards Correct Network VirtualizationfC]// Workshop on Hot Topics in Software Defined Networking. ACM, 2014.
[10] 邱晓娜.基于SDN技术的异构网络切换技术的研究[D].北京邮电大学,2015.
[11] Fischer A, Botero J F, Beck M T, et al. Virtual Network Embedding: A Survey [J].
Communications Surveys & Tutorials, IEEE, 2013,15(4):1888-1906.
[12] Hashmi A, Gupta C P. A Detailed survey on Virtual Network EmbeddingfC]// 2019 International Conference on Communication and Electronics Systems (ICCES). 2019.
[13] Cao H, Yang L, Liu Z, et al. Exact solutions of VNE: A survey [J]. Wireless Communication over ZigBee for Automotive Inclination Measurement・ China Communications, 2016, 13(6):48-62・
56
[14] Cao H, Han H, Qu Z, et al. Heuristic solutions of virtual network embedding: A survey [J]. China Communications, 2018, 15(3):186-219.
[15] Melo M, Sargento S, Killat U, et al. Optimal Virtual Network Embedding: NodeLink Formulation[J]. IEEE Transactions on Network&Service Management, 2013, 10(4): 356-368.
[16] Chowdhury, Rahman, M. R., & Boutaba, R. ViNEYard: Virtual Network Embedding Algorithms with Coordinated Node and Link Mapping [J]. IEEE/ACM Transactions on Networking, 2012, 20(1), 206-219.
[17] Yu M, Yi Y, Rexford J, et al. Rethinking virtual network embedding: substrate support for path splitting and migrationfJ]. ACM SIGCOMM Computer Communication Review, 2008, 38(2): 17-29.
[18] Cheng X, Su S, Zhang Z, et al Virtual network embedding through topology*aware node ranking [J]. ACM SIGCOMM Computer Communication Review, 2011, 41(2): 3 8-47.
[19] Min Feng, Lei Zhang, X. Zhu, J. Wang, Q. Qi and J. Liao, "Topology-aware virtual network embedding through the degree/1 National Doctoral Academic Forum on Information and Communications Technology 2013, Beijing, 2013, pp. 1-6, doi: 10.1049/ic.2013.0213・
[20] Feng M, Liao J, Wang J. et al. Topology-aware virtual network embedding based on multiple characteristics [A]// 2014 IEEE International Conference on Communications[C], Sydney: IEEE. 2014: 2956-2962.
[21] Gong L, Wen 乂 Zhu Z, et al. Toward profit-seeking virtual network embedding algorithm via global resource capacity [A]//IEEE INFOCOM 2014-IEEE Conference on Computer Communications[C]? Toronto: IEEE, 2014:1-9
[22] D. M. Optimization，Learning and Natural Algorithms [D], Italy: Politecnico di Milano, 1992.
[23] Fajjari I, Saadi N A, Pujolle G, et al. VNE-AC: Virtual network embedding algorithm based on ant colony metaheuristic[A]//2011 IEEE International Conference on Communications[C], Kyoto: IEEE, 2011:1-6・
[24] Zhang Z, Cheng X> SuS, et al. A unified enhanced particle swarm optimizationbased virtual network embedding algorithm [J]. International Journal of Communication Systems, 2013, 26(8):1054-1073.
[25] Kirkpatrick S, Gelatt C, Vecchi M. Optimization by Simulated Annealing [J]. Science, 1983,220:671-680.
57
[26] LiuX, Zhang Z, Lix, et al. Optimal virtual network embedding based on artificial bee colony [J]. EURASIP Journal on Wireless Communications and Networking, 2016, 2016(1): 273-281.
[27] Haeri S, Trajkovic L・ Virtual network embedding via Monte Carlo tree search[J]. IEEE transactions on cybernetics. 2018, 48(2): X10-521.
[28] Yao H, Chen X, Li M, et al. A novel reinforcement learning algorithm for virtual network embedding [J]. Neurocomputing; 2018, 284: 1-9.
[29] Rahman	Boutaba R. SVNE: Survivable Virtual Network Embedding
Algorithms for Network Virtualization [J]. IEEE Transactions on Network and Service Management, 2013, 10(2): 105-11 &
[30] Chowdhury S5 et at Dedicated Protection for Survivable Virtual Network Embedding [J]. IEEE Transactions on Network and Service Management, 2016, 13(4):913-926.
[31] Xiao A, Wang 乂 Meng L, Qiu X, Li W. Topology-Aware Virtual Network Embedding to Survive Multiple Node Failures [C]. IEEE Global Communications Conference (GLOBECOM), 2014: 1823-1829.
[32] Ayoubi S, Chen Y, Assi C. Towards Promoting Backup-Sharing in Survivable Virtual Network Design [J]. IEEE/ACM Transactions on Networking, 2016,24(5): 3218-3231.
[33] Software-Defined Networking: A Comprehensive Survey [J]. Proceedings of the IEEE, 2015, 103(1):14-76.
[34] OpenFlow Switch Specification [EB/OL]. [2014-10]. Available: https://oDenn
[35] 刘长荣.无线网络虚拟化环境下的资源分配策略研究[D]・重庆邮电大学,201&
[36] Wang H J5 Katz R H, Giese J. Policy-Enabled Handoffe Across Heterogeneous Wireless Networks[C]// Workshop on Mobile Computing Systems & Applications. IEEE, 1999.
[37] Duan X, Akhtar A M, Wang X. Software-defined networking-based resource management: data offloading with load balancing in 5G HetNet[J]. EURASIP Journal on Wireless Communications and Networking, 2015, 2015(1):181.
[38] Marotta M A, Kist M, Wickboldt J A? et al. Design considerations for software- defined wireless networking in heterogeneous cloud radio access networks卩]. Journal of Internet Services and Applications, 2017, 8(1):1 &
58
[39] 阳凯，林海涛，张爽.SDN架构在舰艇通信中的应用研究[J].舰船电子工程, 2020, v.40;No.308(02):55-58.
[40] 张歌.OpenVirtex网络虚拟化平台虚网识别机制的改进与实现[D].北京邮电 大学,2017.
[41] Simon D, Cifuentes C. The squawk virtual machine: Java™ on the bare metal [C]// Companion to the 20th Annual ACM SIGPLAN Conference on Object-Oriented Programming, Systems，Languages, and Applications, OOPSLA2005, October 1620, 2005, San Diego, CA, USA. ACM, 2005.
[42] Bressoud T C9 FB Schneider. Hypervisor-Based Fault Tolerance [J]. ACM Transactions on Computer Systems, 1996, 14(1):80-107.
[43] Merkel D. Docker [J]. Linux Journal, 2014.
[44] Sherwood R, Gibb G, Yap K K, et al. FlowVisor: A Network Virtualization Layer. 2009.
[45] Corin R D, Gerola M, Riggio R , et al. VeRTIGO: Network Virtualization and Beyond[C]// European Workshop on Software Defined Networking. IEEE, 2012・
[46] Alshabibi A, De Leenheer M, Gerola M, et al. OpenVirteX: make your virtual SDNs programmable[J]. 2014.
[47] 曹浩彤.网络虚拟化环境下虚拟网络映射算法研究[D]・南京邮电大学,2020.
[48] D Chemodanov, Calyam P , Esposito F 5 et al. A General Constrained Shortest Path Approach for Virtual Path Embedding[C]// IEEE International Symposium on Local & Metropolitan Area Networks. IEEE, 2016.
[49] Biswas S S, Alam B, Doja M N. Generalization of Dijkstra's algorithm for extraction of shortest paths in directed multigraphs [J]. Journal of Computer Science, 2013,9(3):377-382.
[50] Z. Shun and Q・ Xue, A novel virtual network mapping algorithm for cost minimizing [J]. Cyber Journals: J. Sel« Areas Telecommunications, vol, 02, no. 01, pp. 1 -9, January 2011.
[51] 罗旭.基于蚁群算法的虚拟SDN网络映射研究[D]・湖南师范大学,2017.
[52] Dorigo M, Member S, IEEE, et al. Ant Colony System: a Cooperative Learning Approach to the Traveling Salesman [J]. IEEE Transaction on Evolutionary Computation, 1996, 1.
[53] Cao W, Hua W, Lei L. An Ant Colony Optimization Algorithm for Virtual Network Embedding[C]// International Conference on Algorithms and Architectures for Parallel Processing. 2014.
59
