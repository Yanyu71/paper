第一章绪论
1.1研究背景与意义
上个世纪以来，互联网作为最伟大的发明之一彻底改变了世界的面貌，在 1969年，美国国防部首次将四台计算机相连，从此人类文明进入了网络时代。近 年来，互联网蓬勃发展，互联网用户数量保持着快速增长，在人们的日常生活中， 互联网的身影随处可见，多样化的互联网应用也走进了千家万户，深入到社会生 活的各个方面。随着移动互联网、云计算、大数据等新型概念的崛起，用户需要 更为安全灵活的服务，信息行业的发展形势需要科研人员研发全新的网络技术与 网络架构。互联网发展至今，其规模己经非常庞大，要对整个互联网进行全面革 新需要网络设备供应商提供大量的网络设备，改革的成本非常高昂。由于支撑当 今网络结构的是来自不同国家与地区的网络提供商，经济利益与政治影响力的因 素也制约着互联网改革的推进。种种限制条件已然成为了当今互联网技术革新的 难点，使得互联网难以持续健康地发展，造成了网络僵化问题［氏
当前信息行业应对网络僵化问题的方法大致上可以分为修补与重建两种思 路，修补式思路通过外加新的网络协议或组件并不断地增加网络带宽以满足新兴 的业务要求，然而对现有网络架构的修补只能解决一时的问题，未能从根本上解 决网络僵化这一难题，还带来了网络系统臃肿化的副作用，使得打补丁的难度随 着时间的推移不断增加。重建式思路的核心是针对当前网络结构的痛点，重新建 立一整套网络体系，这一思路在实验室中已取得不小的进展，诞生了多样化的研 究成果，但是付诸实践却困难重重。首先，重建一个能够与当前网络规模所媲美 的新网络困难巨大，其次对新网络的可靠性进行测试与验证的成本也是一个天文 数字，社会上诸多与当前网络结构紧密相关的既得利益者所带来的阻力也几乎是 无法克服的。综上所述，从社会与经济利益出发，网络虚拟化技术是当下网络僵 化问题最为可行的解决方案a，*］。
近年来，网络虚化技术在世界范围内得到了越来越多的重视，诸多顶级科 研机构纷纷加入到网络虚拟化的研究浪潮中。一方面来看，网络虚拟化技术通过 对底层网络硬件设备的抽象化处理并使用统一化的可编程接口，允许在同一底层 物理网络上部署采用不同技术、不同架构的虚拟网络。虚拟网络彼此之间相互独 立，可以使用各自的协议，降低了新技术对网络设备硬件的要求，满足了现有网 络的安全性与可控性，规避了打补丁与重建网络体系两种思路的缺陷。另一方面， 网络虚拟化技术还可以允许新的网络协议与服务在现有网络上进行测试验证，便
1
于从业者及时发现新技术的问题并加以修正，如今已被广泛地应用于分布式云测 试平台，极大地促进了新型网络技术的发展〔6］。最后，网络虚拟化技术有效地利 用了现有的网络设施，避免了对基础设施的大规模重建，节约了社会资源，降低 了新型网络架构的部署成本。
网络虚拟化技术将传统网络体系中的互联网业务供应商(Internet Service Providers, ISPs)的角色划分为两类，第一类为基础设施供应商(Infrastructure Providers, InPs),其职责是建设并维护底层网络设备，第二类是服务供应商 (Service Providers, SPs),其职责是利用基础设施供应商所提供的基础设施来 为用户提供网络服务，例如在线电子游戏与电子银行等等【7】。通过对现有网络功 能的解耦合，基础设施供应商建设、维护基础设施的成本被大大降低了，服务供 应商租用底层网络设施的成本也大幅下降，因此，网络虚拟化技术有效促进了各 方的利益。
虚拟网络映射是实现网络虚拟化的关键技术，也是当前的研究热点，主要目 标是将带有多种约束条件的虚拟网络请求映射到底层网络上，并为网络运营商创 造最大化的收益［&91。由于存在着多个资源约束条件，虚拟网络映射问题已被证 实为非确定性多项式难题［⑼。现有的虚拟网络映射算法大多依靠智能搜索算法 或者贪婪算法，这两类算法能够比较高效地对此类问题进行求解，但是解的质量 往往较为低下，所以设计一种兼有较强全局搜索能力与快速收敛能力的虚拟网络 映射算法是十分有意义的。
当前对于虚拟网络映射算法的研究大多着眼于静态虚拟网络的映射问题，即 到来的虚拟网络请求被成功映射后便不再对其映射方案进行任何调整。实际上， 随着虚拟网络请求动态地到达与离开，底层节点与底层链路的负载不均衡问题愈 发严重，对已完成映射的虚拟网络请求进行动态重映射可以有效地避免底层网络 资源瓶颈的产生，保证后续虚拟网络请求的接受率。现有的虚拟网络重映射算法 大多未对底层节点的重要程度进行区分，无法有效地识别造成底层网络资源碎片 化的重要节点，容易在重映射后出现新的资源瓶颈问题。因此，设计一种全面准 确的节点重要性评价指标与一种基于节点重要性的虚拟网络重映射算法是十分 有意义的。
1.2论文主要贡献
网络虚拟化技术已经成为当前网络技术中不可缺少的一部分，为了推进网络 虚拟化进程，针对虚拟网络映射算法的研究是必不可少的。因此，本文深入地研 究与分析了现有的虚拟网络映射算法与虚拟网络重映射算法，设计了一种全新的 融合式虚拟网络映射算法与一种基于节点重要性的虚拟网络重映射算法。
2
论文的主要贡献如下所示：
(1) 针对传统遗传算法中的选择操作导致优势个体扩散性过强的缺点，本 文创新性地使用带有演化规则的元胞遗传算法求解虚拟网络映射问题，具体表现 为将带有演化规则的元胞自动机引入遗传算法的选择步骤中，利用元胞自动机的 空间结构限制了个体信息的扩散，防止算法收敛于局部最优解。通过引入元胞自 动机的演化规则，本文提出的算法相对于基本的元胞遗传算法能够更大程度地降 低优势个体的扩散性，保证了种群的多样性。
(2) 针对带有演化规则的元胞遗传算法收敛速度较慢的缺点，本文创新性 地提出了一种基于粒子群算法思想的变异算子，通过一定的规则引导变异点的选 取，使得个体随着种群演化的进展在变异过程中越来越多地保留种群中最佳个体 的序列结构，有效地加快算法的收敛速度。
(3) 针对现有的节点重要性评价指标对网络拓扑属性利用不足并且无法适 用于虚拟网络重映射问题的缺点，本文创新性地通过证据融合理论将节点不同维 度的属性进行融合，提出了一种综合多维度属性的节点重要性评价指标，使得后 续虚拟网络重映射算法可以有效地识别并消除底层网络中的资源瓶颈。
(4) 针对现有的虚拟网络重映射算法未对节点重要性进行区分，容易在重 映射后造成新的资源瓶颈这一缺点，本文设计了一种基于节点重要性的虚拟网络 重映射算法，该算法周期性地通过节点负载率动态阈值筛选出负载率过高的重要 底层节点，并将过载重要节点上的部分虚拟节点迁移到负载率较低的非重要节点 上，避免了重映射后产生新的资源瓶颈的问题，有效地提高了虚拟网络请求接受 率并降低了重映射链路开销。
(5) 对以上提出的两种算法进行仿真实验，从多个性能指标维度评价了两 种算法的有效性，并与多种现有的虚拟网络映射算法与虚拟网络重映射算法的性 能进行了对比。
1.3论文组织结构
本文分为五章，具体安排如下：
第一章，绪论，主要介绍虚拟网络映射问题的研究背景以及研究意义，然后 展示了本论文的研究内容与主要贡献，最后介绍了论文的组织架构。
第二章，相关技术理论，首先介绍了网络虚拟化的概念与现状，随后描述了 虚拟网络映射的数学模型、约束条件与目标函数，最后详细介绍了虚拟网络映射 算法的分类方式与研究现状。
第三章，基于粒子群思想的元胞遗传虚拟网络映射算法，首先介绍了传统遗 传算法的基本思想，并概述了粒子群算法与元胞自动机的基本概念，随后着重阐
3
述了本文所提出的融合算法的创新点，并详细介绍了该算法的具体设计。最后使 用巨蟒（Python）语言搭建仿真环境对算法进行仿真，并与多种现有的虚拟网络 映射算法进行了对比实验与性能分析。
第四章，基于节点重要性的虚拟网络重映射算法，首先描述了问题背景，随 后着重阐述了本文提出的综合多维度属性的节点重要性评价指标的思想，并详细 介绍了基于节点重要性的虚拟网络重映射算法的具体设计。最后使用Python语 言对算法进行仿真，并与现有的虚拟网络重映射算法进行了对比实验与性能分析。
第五章，总结与展望，主要对本文的研究成果进行了总结，列举了研究过程 中遇到的各种问题以及后续的研究方向。
1.4本章小结
本章主要介绍了随着现代社会信息化和智能化的发展，网络僵化问题日益严 重，虚拟网络映射问题成为了当下的研究热点之一。因此，本课题的主要研究内 容为基础的虚拟网络映射问题与动态虚拟网络的重映射问题，本文的主要贡献为 设计了一种基于粒子群思想的元胞遗传虚拟网络映射算法以及一种基于节点重 要性的虚拟网络重映射算法，着重提高网络运营商的收益。最后，本章对论文的 组织结构进行了介绍。
第二章虚拟网络映射问题综述
2.1网络虚拟化
2.1.1网络虚拟化概述
网络虚拟化技术允许多个彼此独立的虚拟网络共享底层网络基础设施，每一 个虚拟网络都是底层实体网络的一份资源切片，由虚拟节点(例如虚拟路由器、 虚拟服务器中的中央处理器资源、内存资源、存储资源)和虚拟链路(例如虚拟 链路中的带宽资源)组成⑴】。近年来，网络虚拟化概念受到了学术界与工业界的 广泛关注，被视为当前网络体系僵化问题的有效解决方案。
早在上个世纪，网络工程从业者便意识到了将网络服务与网络硬件进行解耦 的重要性，并提出了网络虚拟化的概念。一般而言，网络虚拟化技术首先在用户 与实体网络设备之间形成了抽象层以屏蔽底层网络的技术细节，随后对外界开放 统一接口以方便用户访问抽象化的实体网络资源。在不同场景下，抽象层的作用 也各不相同，在大多数情况下，抽象层的作用是将一台承载充足计算资源的服务 器抽象为多部虚拟服务器。在少数情况下，抽象层的作用是将多台实际上彼此独 立的服务器抽象成一整台庞大的虚拟服务器。
网络虚拟化技术与云计算(Cloud Computing)以及软件定义网络(Software- Defined Networking, SDN)之间存在着一定的联系与区别［213,14,15］,云计算是分 布式计算的一种，通过网络虚拟化而将分散的网络资源整合为大规模的资源池， 允许用户不受空间限制地按需获取资源。简而言之，网络虚拟化技术是云计算得 以实现的基石，云计算的迅速发展得益于网络虚拟化技术的不断革新，例如混合 云需要可扩展的高性能虚拟网络技术来增强多个云间的资源交互性〔旳。SDN被 认为是未来数据中心的一种有前途的发展方案，受到了世界各地的学术组织以及 大型企业的关注，目前已经被应用于大型跨国企业的数据中心建设中U71.SDN的 核心理念是剥离控制平面的元素与数据平面的元素，使得所有决策权从路由器与 交换机转移至逻辑集中控制器中，网络交换机变成了简单的转发设备，控制器使 用南向编程接口与数据平面进行通信，实现表项下发、拓扑管理等网络控制功能， 并使用北向编程接口为应用层的各项应用程序展示网络的全局信息，使得软件开 发人员能够通过编程的方式灵活地调用网络中的各种资源［冈。传统的网络虚拟 化技术需要网络管理人员手动进行逐步部署，使得部署效率低下并且成本高昂， 软件定义网络集中控制的方式使得网络管理人员可以通过控制器的编程接口编
5
写程序实现虚拟网络的自动部署，显著地缩短了部署时间。因此，基于SDN的 网络架构可以更加容易地实现网络虚拟化。
网络虚拟化的优势可以概括为以下几点：
(1) 网络资源利用率高：在网络虚拟化的条件下，同一个底层网络上可以 同时部署多个互不干扰的虚拟网络，可以更高效地利用现有的网络资源，凸显了 网络虚拟化技术的高资源利用率。
(2) 基础设施成本低：网络虚拟化技术可以让基础设施供应商仅通过部署 少量设备便可以实现传统网络中需要大量网络硬件支持的网络应用，降低了基础 设施供应商与服务供应商双方的运营成本。
(3) 可靠性强：网络虚拟化技术屏蔽了物理层的技术细节，使得不同的虚 拟网络可以并行运转在统一标准的虚拟环境中，在底层设备发生故障的同时可以 迅速调用其他节点的网络资源恢复故障资源所搭载的虚拟网络，将故障对虚拟网 络服务的影响最小化，保证了安全性与可靠性。
(4) 管理成本低：网络虚拟化技术屏蔽了底层网络的技术细节，使得基础 设施供应商可以依靠更少的网络管理员维护服务器，管理成本大幅度降低。 2.1.2网络虚拟化技术
网络虚拟化技术多种多样，虚拟专用网、虚拟局域网、主动可编程网络等等 都是支持网络虚拟化的典型技术，以下对网络虚拟化技术进行了简介：
(1) 虚拟专用网络(Virtual Private Networks, VPN)是建立在由一个或多 个基础设施供应商提供的公共基础设施上的覆盖网络结构，其实质为远程访问技 术。VPN节点之间事实上不存在专用的物理链路，可以在不负担高额费用以维 护专用网络设备的前提下为用户提供安全且相对稳定的专用网络［闵。作为如今 可以保证数据安全与完整性的最可靠的技术之一，VPN在用户间需要进行通信 活动时采用隧道技术在公共网络中建立稳定、可靠、安全的专属通道以连接分散 在各地的各个VPN用户，在通信活动结束后，VPN将释放占用的虚拟专用通路 带宽资源。VPN存在着诸多的优点，首先，数据在传输过程中通常都经过加密， 其数据保密性强。其次，使用VPN进行通信不需要建设专用物理信道，极大地 节约了通信开支。除此之外，VPN的结构简单灵活，扩展性较强。但是当前大多 数VPN还存在着只适用于固定设备、在无线网络条件下连接可靠性不佳、易造 成数据丢失等等一系列缺陷［2°】。
(2) 虚拟局域网络(Virtual Local Area Network, VLAN)是一种从逻辑层 面将一个物理上的局域网络切割为数个彼此独立的广播域并将不同的用户划归 不同工作组的通信技术，允许计算机网络的管理人员对各个工作组间的路由进行 相应的设置并以此灵活地控制网络中的信息流动。VLAN将广播域限制在自身内
6
部，提高了网络带宽的使用效率并且杜绝了广播风暴的产生［2氏除此之外，VLAN 对广播域的切割还提升了网络的可靠性，避免了 VLAN自身的故障影响其他 VLAN的正常运行。
(3) 主动可编程网络(Active Programmable Network, APN)的概念由美国 国防高级研究计划局于二十世纪九十年代中期提出，是一种新型的可编程分组交 换网络结构。APN中的中间节点(例如路由器、交换机等等)具有可编程能力， 负责对网络节点资源进行分配QI。APN允许用户根据需求定制网络，相比传统 的网络体系架构，APN的优点是更具有灵活性，可扩展性，方便用户快速地部署 升级网络协议与网络服务，并且在服务质量方面有显著地提升。比较有代表性的 APN方案为宾夕法尼亚大学研究的交换件系统(Switchware) o
(4) 覆盖网络(OverlayNetwork, ON)是一种在传统计算机网络架构上叠 加的虚拟网络，可以在不对现有基础网络进行大范围改动的前提下搭载新的应用。 ON的技术思想对基础网络设备的性能需求降至最低水平，从架构上颠覆了当前 数据中心的建设模式，如今己成为未来数据中心网络的潜在技术方案之一。
2.1.3网络虚拟化架构
当前的互联网处于僵化状态，难以在其上部署新的网络架构，改造网络硬件 设备的困难程度也随着互联网的日益僵化而呈指数形式上涨，极大地限制了网络 的灵活性与可扩展性。传统网络架构中，网络硬件厂商生产的设备将硬件与软件 紧密耦合，厂商之间互不相容，对网络设备的升级牵一发而动全身，不利于新技 术的部署。除此之外，网络运营商为了保持网络稳定运行也不会允许用户对网络 设备的设置进行更改，为了促进网络体系的革新而使得诸多网络业务供应商放弃 本身竞争优势与商业利益以达成一致意见更是天方夜谭，网络虚拟化是打破这一 僵局的最佳手段。
在传统的网络结构中，网络业务全部由互联网业务供应商提供，其不仅负责 建造并维护底层网络中的各项硬件设施，还直接负责为用户提供各种各样的互联 网服务。在网络虚拟化的环境中，互联网业务供应商的角色被拆分成基础设施供 应商与服务供应商两个独立的角色QI。如图2-1所示,两个角色的功能彼此独立， 基础设施供应商只负责建造并维护网络基础设施，例如交换机、路由器、光纤、 同轴电缆等，并将其出租给服务供应商以获取佣金。服务供应商不参与底层物理 设备的建造、采购与维护工作，只着眼于通过租用的网络硬件设备为用户提供所 需要的各种互联网服务并以此获得利润Bl。


图2-1网络虚拟化架构
在实际研究中，通常将基础设施供应商所提供的交换机、路由器、服务器等 设备抽象为底层物理网络中的节点，将基础设施供应商所提供的光纤、同轴电缆、 双绞线等设备抽象为底层网络中的链路，每个底层节点都携带着一定数量的内存 等计算资源，每一条底层链路都携带着一定数量的网络带宽资源。同样地，研究 中通常将服务供应商所需要的计算设备与通信链路抽象为虚拟节点与虚拟链路, 虚拟节点与虚拟链路分别携带着特定的计算资源与带宽资源，其拓扑代表着服务 供应商所需要的拓扑结构。由于虚拟网络彼此间处于完全隔离的状态，所以在同 一时刻，多个不同结构、不同协议的虚拟网络可以共存于同一个底层网络上。每 个底层节点上可以存在多个虚拟节点，每条底层链路上可以存在多条虚拟链路, 然而归属于同一个虚拟网络的各个虚拟节点不能共存于相同的底层节点上。网络 虚拟化技术在高效地利用网络设备资源的同时大幅度地降低了新技术与新架构 的部署成本，有力地打破了当下的网络僵局。
2.2虚拟网络映射问题
作为网络虚拟化领域的关键技术，虚拟网络映射的目的是根据虚拟网络请求 的内容，高效准确地完成对底层网络资源的分配。在对虚拟网络请求进行映射的 过程中需要满足诸多的约束条件，例如节点单映射约束、节点计算资源约束与链 路带宽资源约束等等［2习。虚拟网络映射问题己经被证实为非确定性多项式难题， 与普通的非确定性多项式难题相比，虚拟网络映射问题的难点在于即使虚拟节点 全部映射成功，带有资源约束条件的链路映射问题仍然是一个非确定性多项式难 题〔26'27］。对于虚拟网络映射问题，研究人员一般通过各种优化算法降低问题的复 杂度，求得其次优解。
8

2.2.1网络模型
底层物理网络：如图2-2 (a)所示，底层物理网络可以被抽象为一个带权无 向全连通图Gs =(Ns，Es),其中皿，耳分别代表着底层网络中的节点集合与链 路集合。每一个底层节点nseNs上的剩余计算资源量记为印"(％),每一条底层 链路eseEs上的可用链路带宽资源量记作b(ej。图2-2 (a)所示的底层网络具 有8个节点和13条链路，节点旁的数字代表节点所具有的计算资源，链路上的 数字代表链路所具有的带宽资源。

图2-2网络模型
虚拟网络请求：如图2-2 (b)所示，虚拟网络请求通过带权无向全连通图 GV = {NV,EV)表示，其中Ny,坊分别代表着虚拟网络请求中的节点集合与链路 集合。每一个虚拟节点nveNv所需要的计算资源量记为cpu(nv),每一条虚拟链 路eveEv所需要的带宽资源量以b(ej表示。每个虚拟网络请求都附带有生存时 间，达到生存时间后，底层网络释放此虚拟网络所占用的各项资源。以图2-2(b) 所示的虚拟网络请求为例，该请求中包含有三个虚拟节点以及三条虚拟链路，其 中虚拟节点a, b , c所需要的计算资源量分别为20, 15, 25,虚拟链路(a,b)、 (be)、(c,a)所需要的带宽资源量分别为10, 10, 15。
2.2.2虚拟网络映射模型
虚拟网络映射指的是底层网络Gs =(NS)ES)将自身所包含的各项资源分配 给到来的虚拟网络请求Gv =(Nv,Ey)的过程，如图2-3所示，虚拟节点a、b、 c分别被映射至底层网络中的节点C、B、D上，虚拟链路(a,b)、(b,c)、(c,a) 分别被映射至底层网络中的链路(C,B)、(B,D)、(D,A)与(4C)上，图2-3中标 注的资源量为映射完成之后底层网络的剩余资源量。

图2-3虚拟网络映射
2.2.3虚拟网络映射的约束条件
虚拟网络映射算法是一类面向实际问题的算法，算法的输出结果必须满足现 实约束条件，约束条件主要存在以下几类：
(1) 节点容量约束：为了保证节点映射的有效性，当虚拟节点知被映射至 底层节点“畑时，其需求的计算资源量不能超过目标底层节点的剩余计算资 源量，如公式(2-1)所示：
cpu(nv) < cpu(^MN(nv)y nv e Nv, MN(nv)eNs	(2-1)
(2) 链路带宽约束：如果虚拟节点"与v分别位于底层节点i与丿上，并且 “与v之间存在虚拟链路内，为了保证映射方案的有效性，底层节点「与丿之间必 须存在一条通路P,并且P包含的所有底层链路e$必须满足虚拟链路d所请求的 带宽资源，如公式(2-2)所示：
e P, b(ev)<b(es)	(2-2)
(3) 单一映射约束：同一个虚拟网络中的不同虚拟节点必须被映射到底层 网络中的不同节点上，单一映射约束条件如公式(2-3)所示：
MN{nu) = MN(nv), iff nu = nv	(2-3)
2.2.4虚拟网络映射算法的评价指标
由上文所述，基础设施供应商将底层网络资源出租给服务供应商以获取收益, 服务提供商向用户提供相应的服务以获取利润，因此对于利益相关方而言，需要 占用尽可能少的资源以获取最大化的利益。常用的虚拟网络映射评价指标主要分 为如下几类：
(1) 虚拟网络请求接受率：虚拟网络请求接受率代表着被成功映射到底层 网络中的虚拟网络请求的数量与到来的全部请求数量的比值，该指标对基础设施
10

供应商的收益存在重大影响，反映了虚拟网络映射算法的优劣。虚拟网络请求接 受率的计算方式如公式(2-4)所示，分子部分代表从零时刻开始经过T时间被 成功映射到底层网络中的请求数量，分母部分代表从零时刻开始经过T时间到 来的全部请求的数量：

除了以上提到的常见评判标准，学术界还存在利用算法运行速度及算法复杂 度等其他角度评判虚拟网络映射算法表现的方法。
2.3虚拟网络映射算法分类


图2-4虚拟网络映射算法分类
如图2-4所示，为了实现网络虚拟化，国内外的相关科研机构与研究人员根 据不同的出发点与侧重点提出了多种多样的虚拟网络映射算法，接下来，本文将 对不同分类的虚拟网络映射算法进行详细介绍。
2.3.1单域与多域虚拟网络映射算法
单域与多域的划分依据是基础设施供应商的数量，传统的虚拟网络映射算法 普遍聚焦于单域条件下的映射问题，即只有单一的基础设施供应商为底层网络提 供支持。单域条件下，虚拟网络映射算法往往通过启发式算法进行求解，例如麻 雀算法、遗传算法、萤火虫算法等等。启发式算法通过大量可行解之间的相互学 习，最终可以得到质量较高的映射方案，在虚拟网络请求接受率、映射成本等方 面有较好表现。
实际上在许多场景中，由于地理位置与资源类型等客观条件的限制，单一的 基础设施供应商所拥有的资源与能力无法满足虚拟网络的相关要求，需要多个基 础设施供应商进行合作来解决虚拟网络映射问题EM。在多域虚拟网络映射算法 中，传统的解决思路为服务供应商与不同的基础设施供应商进行协商，各个基础 设施供应商依据协商结果分别对虚拟网络的不同部分进行映射，这种思路可以简 单有效地解决多域映射问题，但是也存在增加服务供应商开销的缺陷。文献[30] 引入了虚拟网络供应商(Virtual Network Provider, VNP)作为中间角色来分析底 层网络的资源状态并将底层资源分配给虚拟网络的不同部分，有效地解决了传统
12 思路中基础设施供应商与服务供应商无法充分解耦合的缺陷，但是VNP很难获 取基础设施供应商的内部信息，无法产出优异的全局映射方案，并且VNP—旦 获取了各个基础设施供应商的内部信息便会形成信息垄断，影响网络虚拟化的健 康发展。文献［31］提出了一种信息共享方案，由基础设施供应商提供其所辖网络 的部分信息以供VNP进行资源调配而不披露全部网络信息，有效地防止了信息 垄断的产生。当前的多域虚拟网络映射算法在静态环境下有着优异的表现，但在 处理动态环境下的映射问题与分布式映射问题等方面依旧存在较大的发展空间。 2.3.2二阶段与一阶段虚拟网络映射算法
根据映射步骤，虚拟网络映射算法可分为二阶段映射算法与一阶段映射算法。 二阶段算法将整个映射过程分解为两个步骤，首先进行虚拟节点映射方案的求解, 随后在虚拟节点映射方案的基础上对虚拟链路进行映射。一阶段算法又被称作协 同映射算法，可以在一个步骤内得到整个虚拟网络的映射方案，由于在求解节点 映射方案的过程中考虑到了链路资源的约束条件，一阶段算法能够得到质量较好 的映射方案［辺。
传统的二阶段虚拟网络映射算法大多基于启发式算法进行改造，文献［33］利 用改进的蚁群算法进行虚拟节点映射，并设计了一种链路资源启发式信息素将其 融入蚁群算法的搜索过程中，该算法与传统的蚁群算法相比显著地降低了时间开 销并提高了算法性能。文献［34］针对现有的算法大多未考虑负载均衡这一弊端， 提出了一种模拟退火虚拟网络映射算法，通过引入新的代价函数来反映当前映射 方案对于负载均衡的影响，有效地避免了资源碎片的产生。文献［35］提出了一种 混合群智能优化算法，该算法首先通过传统的遗传算法扩大搜索范围，随后利用 粒子群算法加强局部搜索，有效地加快了算法的收敛速度并提高了底层网络的收 益开销比。文献卩6］提出了一种自适应遗传模拟退火虚拟网络映射算法，该算法 利用模拟退火算法的思想对遗传算法中的选择操作进行了修改，有效地提高了算 法的全局寻优能力。二阶段算法较为简单直观并且易于实现，但是存在着资源开 销较大的缺陷。
当前对于一阶段虚拟网络映射算法的研究存在着较大的发展空间，文献［37］ 提出了一种协同映射算法，在链路映射的过程中同时考虑到节点与链路两方面的 资源约束条件，并将当前链路映射方案对周围链路的影响纳入考虑范围，实验证 明该算法显著地提高了长期收益以及后续请求的接受率。文献［38］将虚拟网络映 射问题定义为整形规划问题，并将拓扑相关因子加入目标函数，实现了节点与链 路的协同映射，经过仿真验证，该算法有效地提高了各项性能指标。
13
2.3.3动态与静态虚拟网络映射算法
动态虚拟网络与静态虚拟网络的主要区别在于是否包含对映射方案的动态 调整过程P9］,对于静态虚拟网络，底层网络不会对其映射方案进行改动。对于动 态虚拟网络，在以下三种情况出现时，底层网络会对虚拟网络的映射方案进行动 态调整：
(1) 由于虚拟网络请求不断地到来或离开，底层节点与底层链路的负载会 变得不均衡，资源碎片化程度加深，底层网络需要对虚拟网络的映射方案进行动 态调整以保证后续请求的接受率。根据重映射过程的触发时机，虚拟网络重映射 算法可分为被动式与主动式两种。被动式重映射算法在虚拟网络请求被拒绝时启 动，对资源瓶颈进行重映射以实现对底层网络的负载均衡。主动式重映射算法以 固定的周期扫描底层网络的负载状态，筛选岀高负载的节点或者链路并对其上的 虚拟节点或虚拟链路进行重映射，以此来进行负载均衡并消除资源瓶颈。
文献［40］提出了一种基于被动机制的重映射算法，该算法以负载不均衡度作 为评判标准进行过载节点与过载链路的筛选，并对虚拟节点与虚拟链路进行联合 迁移以优化底层网络的负载均衡度。文献［41］针对重映射资源开销过高的问题， 设计了一种基于被动机制的重映射算法，当虚拟网络请求被拒绝时，首先定位造 成映射失败的瓶颈节点以及瓶颈链路，随后针对性地降低这些资源瓶颈的负载压 力以实现负载均衡。文献［42］定义了重映射能量消耗的概念并将其作为目标函数 设计了一种重映射算法，仿真结果验证了该算法在提高后续请求的接受率与降低 底层网络能量消耗等方面有着较为突出的表现。文献［43］设计了一种具有自适应 区间的重映射算法，该算法通过底层网络的整体负载状态来确定重映射操作的启 动周期，仿真实验表明该算法能够显著地提高运营收益并且维持较低的重映射开 销。
(2) 由于虚拟网络请求中的资源需求或者网络拓扑结构需求随着时间的推 移发生了变化，底层网络需要对虚拟网络的映射方案进行动态调整以满足新的资 源需求或者拓扑结构需求。当前针对需求动态变化条件下的虚拟网络重映射问题 的相关研究较少，文献［44］利用混合整数线性规划方法对需求动态变化的虚拟网 络重映射问题进行数学建模，提出了一种启发式算法并以最小化重映射开销为优 化目标对重映射问题进行求解。文献［45］考虑到需求动态变化的条件下底层网络 的能耗问题，设计了一种启发式算法，能够在保持运营收益的前提下最大限度地 降低底层网络的能量消耗。
(3) 由于承载着某些虚拟网络的底层节点或者链路发生故障，底层网络需 要对这部分虚拟网络的映射方案进行动态调整以保证虚拟网络能够正常运行。文 献［46］设计了一种融合了恢复机制与保护机制的混合式策略以解决可生存性虚
14
拟网络映射问题，有效地提高了底层资源的利用率并保证了网络运营商的收益。 文献［47］提出的虚拟网络重映射算法利用底层网络中的路径多样性为底层链路 预留了一组备份链路，当底层链路出现故障时可以第一时间将其上的虚拟链路迁 移到备份资源上，使得故障带来的影响最小化。
2.4本章小结
本章首先介绍了网络虚拟化的基本概念、相关技术与架构，随后着重介绍了 虚拟网络映射问题的基本概念与相关模型，最后本章详细地介绍了虚拟网络映射 算法的几种分类方法。
15



























































16


第三章基于粒子群思想的元胞遗传虚拟网络映射算法
在上文中己经提到，虚拟网络映射问题属于非确定性多项式难题，启发式算 法可以很好地解决这类问题，如遗传算法、粒子群算法、蚁群算法等等。由于虚 拟网络映射存在多种约束条件，并且单一的启发式算法自身存在一定的缺陷，当 前虚拟网络映射算法的性能还有很大的提升空间。
在应用上，启发式算法具有良好的强健性，容易与其他算法相结合，融合不 同的算法让它们互相取长补短是一种有效的算法设计思路，可以弥补单一算法的 缺陷，使得算法的综合性能有较大幅度的提升。本文通过深入分析虚拟网络映射 问题的特性，提出了基于粒子群思想的元胞遗传虚拟网络映射算法(Virtual Network Embedding based on Cellular Genetic Algorithm with Particle Swarm Optimization, VNE-PCGA),该算法将带有演化规则的元胞自动机融入遗传算法 的框架，并设计了一种全新的基于粒子群算法思想的变异算子，通过在仿真平台 上的实验验证，该算法拥有良好的全局搜索能力与较快的收敛速度，能够有效地 提高虚拟网络映射问题中的各项评价指标。
3.1虚拟网络映射的相关理论研究
3.1.1关于遗传算法的研究
遗传算法由密歇根大学的研究人员于1975年提出，该算法的核心理念来源 于进化学说和遗传理论，主要参考了自然选择(selection)、杂交(crossover) > 变异(mutation)和优胜劣汰等生物学理论知识〔购。遗传算法在搜索过程中不需 要适应度函数连续可导，拥有较强的全局搜索能力与较快的收敛速度，经过“适 者生存”的迭代，最终得到问题的优质解。这里对遗传算法的基本术语进行简要 说明：
(1) 染色体：在遗传算法中，待解决问题的解被编码为染色体，通常利用 一个变量序列来表示。
(2) 基因：染色体由基因组成，染色体中的变量即为基因，基因在染色体 中的位置被称为基因位点。
(3) 种群：一定数目的个体组成的可行解集被称作种群，传统的遗传算法 在初始化的过程中随机生成一定数量的个体形成初始种群。
(4) 适应度函数：适应度函数值可以清晰地反映染色体的质量，迭代过程 中需要通过适应度函数值对种群中的个体进行评价。
17


遗传算法的流程如图3-1所示：
(1) 编码与初始化：对于待解决的问题，首先需要对问题的解进行遗传编 码，建立问题的解与染色体之间的联系，随后生成一定数量的染色体构成初始种 群。初始种群代表最初的可行解集，传统的初始种群产生方法大多基于随机产生 机制，随机生成的初始染色体基因质量普遍低下，需要很长时间才能收敛。文献 ［49］提出了一种类随机种群初始化方法，实验结果表明其有效地提高了最终解的 质量。文献［50］利用空间变换搜索策略生成初始种群，可以加快初始种群的生成 速度。
18
(2) 选择:选择操作表示从种群中选择对环境适应度较高的个体作为父母， 将其优秀的基因传导给下一代个体。选择是遗传算法中最重要的步骤之一，对于 算法整体性能的影响很大。过大的选择压力会使得种群多样性降低，导致算法过 早收敛于局部极值。过小的选择压力会使得算法的搜索过程接近于随机搜索，导 致算法难以收敛。
最为常见的选择策略为轮盘赌策略，该策略首先对种群中所有个体的适应度 数值进行归一化处理，随后计算出每条染色体的累加概率，最后依据随机数的大 小进行父代选择，个体被选择的可能性大小正比于其适应度数值的大小。采用轮 盘赌策略进行父代选择的遗传算法可以获得较高的收敛速度，但是适应度过高的 超级个体被选中的概率过大，很可能使算法陷入局部最优解。文献［51］介绍了一 种自适应排序选择策略,将当前种群的平均适应度值与最佳适应度值的比值作为 调节因子，对选择压力的大小进行动态调节。这一策略使得在进初期，选择压 力处于较低的水平以维持生态多样性，随着种群不断地进化，选择压力不断地加 大以保证算法快速收敛。
(3) 交叉：交叉操作负责随机地交换父代染色体的部分基因片段，是产生 下一代群体必不可少的操作。交叉概率的设定影响着种群进化的质量，交叉概率 过高会导致优质染色体的内部结构被破坏，交叉概率过低会抑制优质个体的扩散 速度，使得种群的演化速度较慢，常见的交叉方法包括单点交叉、多点交叉、均 匀交叉等等［52］。
(4) 变异：变异操作以一定的概率随机地改动染色体中的部分基因值，可 以有效地保持种群的基因多样性，防止算法收敛于局部极值，常见的变异操作包 括基础变异、一致变异与高斯变异。
(5) 迭代：循环迭代直到最大代数或者最优染色体的适应度数值不再有大 的改变，输出最优染色体作为问题的解决方案。
3.1.2关于粒子群算法的研究
粒子群算法(Particle Swarm Optimization, PSO)是上世纪九十年代中期由 艾伯哈特博士(RC Eberhart)和肯尼迪博士(James Kennedy)通过模拟鸟群的 捕食活动设计的一种智能搜索算法，与其他启发式算法相比，粒子群算法结构简 单，收敛速度较快，目前已经被广泛地应用于各个领域，例如云计算中的任务调 度问题与无线传感器的部署问题⑴列。这里对粒子群算法的基本术语进行简要说 明：
(1) 粒子当前位置：在粒子群算法中，每个粒子都有一个位置属性，位置 代表着问题的一个可行解，通常利用一个变量序列X来表示。
19

(2) 粒子当前速度：在传统的粒子群算法中，粒子的速度代表当前解与下 一个可行解位置之间的差值，通常利用一个变量序列汗表示。
(3) 适应度函数：适应度数值的大小反映了粒子的优劣程度。
(4) 粒子的历史最优位置：粒子的最优位置代表着当前粒子在寻优过程中 所搜寻到的适应度最佳的粒子位置，以為表示。
(5) 粒子群的历史最优位置：粒子群的历史最优位置代表着整个粒子群中 所有粒子在寻优过程中所搜寻到的最优粒子位置，以耳表示。

图3-2粒子群算法流程图

20
粒子群算法的流程如图3-2所示：
(1) 初始化粒子群：在传统的粒子群算法中，粒子的初始位置以及初始速 度均通过随机机制生成。
(2) 计算适应度值：计算各个粒子的位置对应的适应度函数值。
(3) 粒子速度更新：在传统的粒子群算法中，粒子群中的每个粒子均依靠 自身的历史最优位置以及整个粒子群的历史最优位置来调整自己的速度，如公式
(3-1)所示：
X + i =	+ c}rx^Xp-	c2r ^Xg~X^	(3-1)
其中W为粒子本身的惯性系数，Ci与C2为粒子向自身历史最优位置与粒子群 历史最优位置的方向移动的趋势，/与尸2为随机数，在零到一之间均匀分布。
(4) 粒子位置更新：粒子群算法按照速度K + i对粒子的位置进行更新，如 公式(3-2)所示：
Xj + i-Xj + Vj + l	(3-2)
(5) 迭代：循环迭代直到最大代数或者粒子群的历史最优位置对应的适应 度数值不再有大的改变，输出粒子群的历史最优位置作为问题的解决方案。
传统的粒子群算法存在着过早收敛的缺陷，针对这一问题，文献［55］提出了 一种半径粒子群算法，该算法将整个粒子群按照一定的规则划分成多个小组，每 个小组在内部独立进行搜索，有效地保持了粒子群的多样性。文献［56］改进了粒 子群算法的搜索策略，在搜索过程中的不同阶段采用不同的参数配置来增强算法 的全局搜索能力，避免了算法早熟收敛于局部极值。文献［57］通过为粒子速度设 定一定的限制范围并对超出搜索空间边界的粒子进行惩罚，显著地提高了最终解 的优质程度。
3.1.3关于元胞自动机的研究
二十世纪五十年代初，著名科学家冯诺依曼博士 (John von Neumann )通过 模拟生物的自我复制行为提出了元胞自动机(CellularAutomata)的概念，但是 这种能够自我复制的机器在当时并未引起社会的广泛关注与重视。直到上世纪七 十年代，毕业于剑桥大学的约翰康威博士 (J.H.Conway)设计的计算机游戏“生 命游戏”引起了众多科研人员的关注，其本质是一种典型的元胞自动机。“生命 游戏”能够模拟生物演化过程中的生存、灭绝等复杂自然现象，开启了学术界对 于元胞自动机的研究历程，被认为是元胞自动机研究的开端。
元胞自动机由元胞个体、元胞空间、元胞邻居以及演化规则这几个部分构成， 这里对元胞自动机的相关术语进行简要介绍：
21

(1) 元胞个体：元胞是元胞自动机的基础，进化群体中的每一个个体都为 一个元胞，分散在一维、二维或多维的晶格空间中。元胞状态可分为二进制形式 与多进制形式［斶，最常见的元胞状态为二进制形式，即“生”、“死”二维状态。
(2) 元胞空间：当前对于元胞自动机的研究大多集中于二维元胞自动机， 其元胞空间可以按照三角形、矩形或者六边形的形式进行排列，其中三角形排列 难以用计算机加以显示，必须转换为四边形网格。六边形排列最贴近自然界中生 物个体之间的交互模式，然而在表达与实现上较为困难。当前最为普遍的排列方 式为四边形排列，直观而简单，同时一定程度上模拟了自然界中生物个体之间的 交互模式。
(3) 邻居：二维元胞自动机的邻居分类方式比较丰富，最为普遍的邻居类 型有三种，如图3-3所示：




图3-3元胞自动机邻居类型
冯诺依曼型邻居以中心元胞四周的四个个体为其邻居，摩尔型邻居以中心元 胞四周的八个个体为其邻居，扩展摩尔型邻居以中心元胞四周的二十四个个体为 其邻居。
对于元胞空间边界上的元胞邻居问题，一般在研究中采用周期型边界条件, 将元胞空间的上下边界设定为相互衔接，左右边界也设定为相互衔接，形成一个 拓扑结构上的圆环面，如图3-4所示：
图34边界元胞邻居示意图
(4) 演化规则：元胞空间只能够模拟自然界中的空间结构关系，为了更逼 真地模拟自然界中的演化过程，将动态概念引入元胞自动机是十分必要的。元胞
22 自动机的演化规则实质上是一个状态转移函数，由这一时刻中心元胞自身的生存 状态以及这一时刻中心元胞的各个邻居元胞的生存状态共同决定中心元胞下一 时刻的生存状态，不同的演化规则会导致元胞自动机展示出不同的动力学行为。
3.2基于粒子群思想的元胞遗传虚拟网络映射算法设计
上文已经对遗传算法、粒子群算法以及元胞自动机进行了介绍，粒子群算法 结构简单，收敛速度较快，但是容易早熟收敛。遗传算法由于交叉与变异操作的 存在，其相较于粒子群算法拥有更强的全局搜索能力，但是传统遗传算法中的选 择操作会造成超级个体的过度扩散，使得遗传算法容易收敛于局部最优解。本文 对遗传算法中的选择操作与变异操作进行优化，提出了基于粒子群思想的元胞遗 传虚拟网络映射算法，创新性地设计了一种全新的基于元胞自动机的选择算子与 一种基于粒子群算法思想的变异算子，使得本算法可以有效地提高虚拟网络映射 问题中的各项性能指标。
3.2.1遗传算法相关参数与步骤的重定义
本文采用更为直观的二阶段方式进行虚拟网络映射，首先求解虚拟节点的映 射方案，随后在节点映射方案的基础上求解虚拟链路的映射方案，以下是根据虚 拟网络映射问题的特性对遗传算法的相关参数与步骤进行的重新定义：
(1) 基因编码方案：在本文提出的算法中，染色体编码方式采用实数编码， 例如X =(込”,0,.甘,…n代表虚拟网络请求中包含的虚拟节点数量，
表示虚拟网络请求中第m个虚拟节点所对应的目标底层节点编号，xm的取 值范围为底层节点的编号范围，一条染色体代表着一个节点映射方案。
(2) 链路映射方案：在节点映射方案确定后，为了降低算法的计算时间， 本文选择使用迪杰斯特拉算法(Dijkstra)计算基于最短路径的链路映射方案。
(3) 适应度函数：由于映射一个虚拟节点所造成的成本仅与该节点需要的 计算资源量相关，然而映射一条虚拟链路所造成的成本却与其实际占用的底层链 路数量相关，因此本文以最小化映射成本为目标，将虚拟链路所造成的映射成本 作为映射方案优劣的评判标准,染色体X的适应度数值的计算方法如公式(3-3) 所示：
/(小 z H(e”)	(3-3)
其中二进制变量在虚拟链路久被映射到底层链路色上时取值为1,否则 取值为0。
23

3.2.2初始种群的生成机制设计
如上文所述，传统的遗传算法通过完全随机的方式产生初始种群，然而在利 用遗传算法解决虚拟网络映射问题时，随机产生的个体往往无法满足节点资源约 束条件或者链路资源约束条件的限制，导致初始种群的生成速度十分缓慢，并且 初始种群中的初始个体质量较差，使得算法收敛速度较慢。
针对虚拟网络映射问题的特点，本文使用文献［5刃提出的粒子群初始化方法 对传统遗传算法中初始种群的生成机制进行了改进，有效地加快了初始种群的生 成速度并提高了初始个体的质量。
将I&拟*頁谥求资源華斛糊洌,依次分杞健选底4节点
图3-5初始种群生成机制示意图
初始种群的生成机制如图3-5所示：
第一步：将所有底层节点按照剩余的计算资源量降序排列。
第二步：将所有虚拟节点按照请求的计算资源量降序排列。
第三步：为每个虚拟节点建立候选底层节点列表，将剩余资源量大于此虚拟 节点需求的底层节点加入该列表。
第四步：将所有虚拟节点按照请求资源量从大到小依次进行映射。对于每个 虚拟节点，随机地从该节点的候选底层节点列表中选取目标底层节点，并从后续 待映射的虚拟节点的候选列表中删除该节点。
第五步：依照生成的节点映射方案，利用Dijkstra算法生成链路映射方案, 并验证链路映射方案是否满足带宽约束条件，若链路映射方案满足约束条件，则 将节点映射方案输出作为初始种群中的一个染色体，若不符合带宽约束条件，则 重新生成节点映射方案。
第六步：重复步骤四与步骤五，直到初始种群数量达到设定值或者尝试生成 初始个体的次数达到设定的最大值，若尝试生成初始个体的次数达到最大值后依 旧无法得到足够的初始个体，则输出生成的最佳个体作为该虚拟网络请求的映射 方案。
24

经过改进的初始种群生成机制可以保证生成的节点映射方案的有效性，在可 行性检查阶段只需要验证链路映射方案是否满足带宽约束条件，与传统遗传算法 中随机生成初始种群的策略相比，该方法有效地提高了初始种群的生成速度与初 始个体的质量，有利于加快算法的收敛速度并提高输出的映射方案的质量。
3.2.3基于元胞自动机的选择算子设计
在传统遗传算法的求解过程中，种群中个体之间的交互是随机的。实际上早 在十九世纪，达尔文便意识到生物种群的分布被空间结构所限制，个体间的联系 与互动不可能是任意的。生物种群的演化过程也证明了地理上的隔离很大程度上 维护了生物种群的多样性，例如澳大利亚因为地理上与欧亚大陆的隔离，使得澳 洲物种与欧亚大陆上的物种在数万年内各自沿着不同的方向进化，最终诞生了同 一物种的不同亚种。
元胞自动机作为一种动力系统的理想空间模型，通过一系列简单的演化规 则便可以模拟出自然界极其复杂的演变现象，然而利用元胞自动机理论解决虚拟 网络映射问题的研究成果极为罕见，文献［60］提出了一种基于元胞遗传机制的虚 拟网络映射算法，该算法首先改变了染色体的编码方式，采用二进制方式对染色 体中的各个节点编号进行编码，随后将每一个二进制位作为元胞个体，运用元胞 自动机的演化规则改造了传统遗传算法中的交叉操作，使得染色体间的交叉操作 在更为微观的尺度上进行，然而该算法没有考虑到空间结构对种群进化的影响， 未能显著地改善传统遗传算法容易收敛于局部最优值的问题。
本文利用元胞自动机对传统遗传算法中的选择操作进行改造，将染色体疋丿 作为元胞个体放置于元胞晶格中，Z,丿为染色体的空间坐标，种群以矩阵表示， 如公式（3-4）所示：



Y
•• n,n
每一条染色体都对应着一个生存状态, S’』取值为1或者0,以“1 ”代表 染色体处于“生”状态，以“0”代表染色体处于“死”状态，种群的生存状态 以矩阵表示，如公式（3-5）所示:
Sl,2 …S],”
$2,2 …$2,”
S”,2 ^n,n
邻域结构是影响信息扩散速度的重要因素之一，信息的扩散速度随着邻居数 量的增长而加快，在常用的邻居结构中，冯诺依曼型由于邻居数量最少，信息扩
25
散速度过慢导致算法收敛困难。扩展摩尔型由于其庞大的邻居规模，信息扩散速 度过快，如果采用扩展摩尔型邻居，在种群中个体数量较少的情况下会导致大多 数个体之间都可以进行互动，无法体现出空间结构对于种群演化的影响。因此, 本文采用周期型边界条件的摩尔型邻居作为邻居结构，如图3-6所示：
—汽讓疔Ilf字j「
X—j
發1摻滲滲撐浄鬓资:殘II邂
1
1

XqT	Xg
1
Xf,j + L
i " ■■
+1,7-1	X*,j

si

图3-6染色体邻居示意图
在周期型边界条件下，元胞空间的上下边界被设定为相互衔接，左右边界也 被设定为相互衔接，所以元胞空间边界上的元胞个体将另一侧边界上的个体作为 其邻居，以染色体/,］为例，其邻居个体的集合心］,1如公式(3-6)所示：
Xg ~ {^1,2 > ^2,1 >^2,1'^n.n ^l.n > ^n,\ > } (3-6)
在自然界中，如果种群的密度过大，个体很容易因为生存资源的枯竭与同类 之间的激烈竞争而快速消亡。与此相反，如果种群密度过小，个体很容易因为没 有足够的同类以相互协作并繁衍下一代而快速消亡。因此，一个恰当的种群密度 对于物种的生存是至关重要的。元胞空间仅仅能够表现种群内不同个体间的静态 空间结构关系，然而元胞自动机作为一种对大自然规则进行有效模拟的工具，可 以设定一系列的演化规则来定义种群密度对于个体生存状态的影响，通过不断改 变元胞个体的“生” “死”状态，实现种群的动态演化过程。
演化规则实质上是元胞生存状态的状态转移函数，文献［61］对元胞自动机的 演化行为进行了研究，将演化规则分为稳定型、周期型与复杂型三种。周期型代 表着元胞种群的生存状态随着演化过程的进展在几种状态下不停循环，稳定型代 表着元胞种群的生存状态经过一定时间的演变过程后处于一个固定状态，而复杂 型代表着元胞种群的生存状态处于混乱与秩序之间的一种复杂中间状态。文献 ［62］对三类演化规则进行了仿真实验，仿真结果证明了稳定型演化规则会导致进 化过程停止，无法取得优质解，而周期型与复杂型可以取得较好的寻优结果。
由于虚拟网络映射问题是著名的多峰问题，周期型演化规则为摆脱局部最优 值提供了可能，本文将周期型的元胞自动机演化规则引入虚拟网络映射问题的求
26

解过程中，可以进一步降低算法的选择压力，避免适应能力较强的染色体过度繁 衍造成算法局部收敛。本文设计的周期型演化规则如公式（3-7）所示：

其中必？代表空间坐标为2•打的染色体在t时刻的生存状态，s£严代表空间 坐标为必丿的染色体在t+1时刻的生存状态，明代表t时刻空间坐标为i,j的染 色体的邻居集合中为“生”状态的个体数量。
元胞自动机的空间结构将遗传算法的交叉与变异步骤限定在每个染色体的 邻居空间内，而元胞自动机的演化规则使得每一代种群中只有部分处于“活”状 态的染色体执行遗传操作，基于元胞自动机的选择算子具体流程如下：
第一步：遍历元胞空间，依次选择染色体。
第二步：判断染色体X万的状态％是否数值为“1” ,即个体处于“生”状 态。若元胞个体处于“生”状态则进入第三步，否则进入第四步。
第三步：将染色体兀丿与其邻居空间内适应度最强的个体进行交叉与变异操 作，遗传操作后的个体与操作前个体的适应度进行比较，若子代拥有更好的适应 度，则利用最优的子代个体代替中心元胞个体，否则保持中心元胞不变。
第四步：若所有个体遍历完毕则进入第五步，否则返回第一步。
第五步：按照公式（3-7）对全部染色体的生存状态同步进行更新操作。 3.2.4交叉算子设计
本文采用传统遗传算法中的部分交叉方法，通过随机数的方式产生两个交叉 点，随后交换两个父代染色体在交叉点之内的部分。由于同一个虚拟网络中的各 个虚拟节点必须位于不同的底层节点上，所以对于交叉结果中重复的节点序号， 本文选择对匹配区域以外的重复序号重新进行随机选取，直到子代个体内部没有 重复的节点，如图3-7所示：
27
交叉点1	交叉点2



8
3
7
2
9
5
11



5	2
13
8
16
1
15

,交叉

*
3
13
8
16
5
11


1 5

7
2 I 9 |
1
15
t冲突消除
10
3
13
8 I 16 |
5
11

5
6
7
2 1 9 1
1
15

图3-7交叉操作示意图
3.2.5基于粒子群算法思想的变异算子设计
传统的遗传算法由于变异点选择的随机性与盲目性，收敛速度较为缓慢。文 献［63］在解决虚拟网络映射问题的过程中将蚁群算法的反馈机制与传统遗传算 法的变异步骤相结合，通过引入底层节点信息素值这一属性，对底层节点进行了 优劣等级的划分，使得后续变异点的选择过程有所依据，从而一定程度上消除了 变异操作的盲目性，然而该算法没有考虑到虚拟网络映射方案中底层节点与虚拟 节点之间的对应问题，底层节点携带的信息素值无法有效地反映虚拟网络映射方 案所对应的拓扑结构，单纯依靠底层节点所携带的信息素数值进行变异点的选取 容易造成优秀个体的内部结构被破坏。
将元胞自动机应用于改造传统遗传算法中的选择操作能够有效地避免算法 陷入局部最优值，但是与之相伴的是算法的收敛速度减慢。粒子群算法的模型比 较简单，收敛速度较快，但是缺乏交叉与变异操作，在整个寻优过程中种群的多 样性在不断地减少，全局搜索能力较弱。本文针对虚拟网络映射问题的特点将元 胞遗传算法与粒子群算法相融合，提出了一种适用于虚拟网络映射问题的基于粒 子群算法思想的变异算子，能够在变异过程中保留优质染色体的部分序列结构， 有效地加快算法的收敛速度，使得本文提出的基于粒子群思想的元胞遗传虚拟网 络映射算法在拥有优异的全局搜索能力的同时还拥有较快的收敛速度。
传统的粒子群算法只适用于连续域内的优化问题，然而虚拟网络映射问题是 一个典型的离散优化问题，以下是根据虚拟网络映射问题的特性对粒子群算法的 相关参数与步骤进行的重新定义：
适应度函数：为了与遗传算法相结合，本文选择链路映射成本作为粒子群算 法的适应度函数，目的是将适应度函数最小化。
28

粒子的位置：为了与遗传算法相结合，本文对于粒子位置向量的定义与遗传 算法中对于染色体的定义相同，一个粒子位置向量即为~个节点映射方案，例如 X = [xl,x2,x3,...,xm,...,xn), n代表虚拟网络请求中包含的节点数量，尹表示虚 拟网络请求中第m个虚拟节点所对应的目标底层节点编号。
粒子速度：粒子的速度向量代表着粒子向某个方向移动的趋势，本文结合前 文所述遗传算法的相关定义与步骤，将粒子速度重新定义为染色体变异点的选择 方案，例如卩=(心2,込..肿其中二进制变量/决定了染色体中的第 m个基因是否为变异点，当/!取值为“0”时，表示第m个基因为变异点，需要 重新选取第m个虚拟节点所对应的目标底层节点。当孑1取值为“1”时，表示第 m个基因不是变异点，不需要重新选取目标底层节点。
粒子速度的迭代：在传统的粒子群算法中，下一时刻的粒子速度由当前状态 下粒子的惯性、粒子向自身历史最优位置移动的趋势与粒子向整个粒子群的历史 最优位置移动的趋势三部分构成。在虚拟网络映射问题中，底层网络拓扑的节点 编号是随机的，所以传统的粒子群算法中利用粒子位置差值更新粒子速度的方法 无法适用于虚拟网络映射问题。因为本文提出的元胞遗传操作遵循优秀个体替代 原则，所以粒子的当前位置即为粒子的自身历史最优位置，粒子群的当前最优位 置即为粒子群的历史最优位置，下一时刻的粒子速度由粒子惯性与粒子向全局最 优位置的移动趋势两部分构成，并且两部分的相对比例由种群演化的进程动态地 决定。
粒子速度的迭代方法可以用公式(3-8)表示:

其中乙丿代表空间坐标为7,丿的染色体，Xj代表染色体X万的速度，人表示 种群迭代次数阈值，当种群迭代次数小于阈值时，速度迭代公式与种群当前的进 化状态有关。九塚代表当前种群的适应度均值，九加代表当前种群的最佳适应 度，即链路映射成本所能取得的最小值。位置减法xgbxg代表t时刻染色体 X力与种群中的最优染色体X鴛之间的差异，若对应的维度取值相同则值为“1”, 否则取值为“0” o例如(1,6,8,5,3)€)(1,7,8,5,3)= (1,0,1,1,1)。逻辑加法尸必㊉弓号 表示分别以儿的概率维持人各个维度的值，并以号维持◎各个维度的值，且 Pi+PJ = l,例如0.3(1,0,1,0,1)㊉0.7(1,0,1,1,1) = (1,0丄*,1), “* ”表示此处以 0.3 的概率取值为0,以0.7的概率取值为1。
在种群演化的初期，由于个体间差异较大，自适应调整因子/加〃兀vg的取 值较小，变异点的选取更多地取决于各个粒子的惯性数值，可以更好地维持种群
29 的多样性。随着进化过程的推进，自适应调整因子/加的取值逐渐增大，种 群内的个体得以在变异过程中更大程度地追踪种群内的最优个体，保护自身内部 的优秀基因序列免遭盲目变异的破坏，使得算法的收敛速度加快。当种群迭代次 数大于阈值几时，速度迭代公式会引导变异操作完全保留染色体中与当前最优 个体相同的部分，并将变异点设置为染色体中与当前最优个体不同的部分，有效 地提高了算法的收敛速度。
粒子位置的迭代：各个粒子通过更新后的速度对自身位置进行调整，等同于 对染色体进行变异操作，如公式(3-9)所示：
础° =	® 殆+i)	(3-9)
当基因位点所对应的速度分量取值为0时，则将其作为变异点，随机选取其 他底层节点进行映射，否则保持不变。例如於；+1)取值为(1,0,1,1,1)时，染色体恵 在第二个基因位点处进行变异，随机改变其基因值。经过变异操作后的个体内部 可能会出现重复的节点序号，在这种情况下，本文选择重新选取变异点的取值， 直到个体中不存在重复的节点序号。
30

3.2.6基于粒子群思想的元胞遗传虚拟网络映射算法流程


图3-8 VNE-PCGA算法流程图
VNE-PCGA算法的流程如图3-8以及表3-1所示：
(1) 初始化：读取底层网络的相关信息，依据到来的虚拟网络请求内容生 成包含nxn个染色体的初始种群，将初始种群置于nxn的元胞空间中，随机确 定各个染色体的生存状态与初始速度。
(2) 种群适应度计算：计算当前种群中的平均适应度与自适应调整因子的 数值，并记录最优染色体与最优适应度。
31
(3) 选择：依次选择“生”状态的染色体，选择其邻居中拥有最优适应度 的个体作为配偶进行遗传操作。
(4) 交叉：通过部分交叉的方式互换两个父代染色体的部分片段并进行冲 突消除。
(5) 变异：以一定的概率利用公式(3-8)对经过交叉操作的个体的速度进 行更新，并利用更新后的速度向量根据公式(3-9)对交叉操作后的个体进行变异 操作。•
(6) 可行性检查：检查遗传操作所产生的两个子代个体的可行性，首先验 证子代是否满足节点资源约束条件，随后通过Dijkstra算法计算出虚拟链路的映 射方案，并验证链路映射方案是否满足虚拟链路的带宽需求。
(7) 个体更新：若子代个体为不可行解，则保持中心元胞个体不变。若子 代为可行解，则计算子代个体的适应度并检验子代个体是否优于中心元胞个体, 若子代更优，则利用最优的子代个体替代原有的中心元胞个体，并对整个种群的 最优个体以及最优适应度进行更新，否则保持中心元胞个体不变。
(8) 迭代：对种群内的所有个体遍历完毕后，按照公式(3-7)所示的演化 规则更新每个个体的生存状态，得到整个种群下一时刻的生存状态。判断迭代次 数是否达到最大值以及连续五次迭代中种群的最优适应度是否差距不足5%,若 未达到终止条件，则返回步骤(2),若达到终止条件，则执行步骤(9) o
(9) 输出：将得到的最优节点映射方案与对应的链路映射方案进行输出， 并等待新的虚拟网络请求到来。
32

表3-1 VNE-PCGA伪代码
VNE-PCGA伪代码
输入：Gs = (NSf Es), Gv = (Nv，Ey), max time Tm iteration threshold Ts, mutation probability Pm
输出：虚拟网络映射结果
1.
generated initial population
2.
Randomly initialize cellular state S： j
3.
while (丁＜陰)do
4.
T=T+1
5.
update favg and the adaptive adjustment factor
6.
for i=lTn do
7.
for j~l^n do
8.
while (Sij = 1) do
9.
get_neighborhoods(Xij)
10.
execute crossover operation
11.
if random(OJ) V T^then
12.
execute mutation operation by formula (3-8) and (3-9)
13.
end if//在“活”状态元胞的邻域内进行交叉变异操作
14.
feasibility checking&evaluate fitness
15.
if child is better then
16.
replace X^j with child
17.
update Xgib and best fitness value

else
19.
remain X[j unchanged
20.
end if//若字代个体优于父代个体则进行替代
21.
end while
22.
end for
23.
end for
24.
update the cellular state by formula (3-7)
25.
end while
26.
return 〃返回虚拟网络映射结果并更新底层网络

3.3算法仿真及分析
为了验证本文提出的基于粒子群思想的元胞遗传虚拟网络映射算法(VNE- PCGA)的有效性，本文通过搭建仿真平台实现了 VNE-PCGA算法，并从长期收 益、虚拟网络请求接受率等角度与传统的遗传算法(GA)、文献［35］提出的混合 群智能优化算法(VNE-PSO-GA)、文献［63］提出的遗传与蚁群融合算法(GACA) 进行了比较。
3.3.1仿真环境设置
Python语言作为一门注重可阅读性与效率的语言，拥有优秀的可扩展性与可 移植性，可以通过较少的代码量构建出丰富的功能。Python拥有庞大的数据分析
33 库可供使用，如sciy、matplotlib等，可以有效地执行科学计算任务。本文在 Windows环境下使用Python3.7搭建了一个虚拟网络映射仿真实验平台，并在该 平台上对各个虚拟网络映射算法进行仿真实验，仿真平台包括网络拓扑的读取与 处理模块，算法执行模块，数据更新模块与结果分析模块。
仿真环境配置为：
操作系统：WindowslO旗舰版。.
中央处理器：英特尔i7四核处理器。
内存大小：16GBo
仿真实验的流程如下：
（1）	生成仿真场景：构造底层网络拓扑与虚拟网络拓扑，设定相关的拓扑 参数，包括底层节点与虚拟节点的计算资源、底层链路与虚拟链路的带宽资源、 虚拟网络请求的持续时间等相关参数。
（2）	执行虚拟网络映射算法：通过不同的虚拟网络映射算法为不断到来的 虚拟网络请求分配底层网络中的各项资源，并对不同映射算法的各项性能指标进 行统计，包括虚拟网络请求的接受率、长期平均运营收益、收益开销比等等。
（3）	评估算法性能：根据统计数据绘制曲线图，比较不同算法在各项性能 指标方面的差异。
3.3.2实验参数设置
本文选择使用GT-ITM工具生成底层网络拓扑与虚拟网络请求，底层网络中 的节点数目为100,节点间相连的概率为50%,底层节点所携带的计算资源在［50, 100］间均匀分布，底层链路所携带的带宽资源在［50, 100］间均匀分布。虚拟网络 请求包含的节点数目在［2, 20］间均匀分布，节点间相连的概率为50%,虚拟节点 所需的计算资源在［2, 30］间均匀分布，虚拟链路所需的带宽资源在［2, 30］间均匀 分布。虚拟网络请求的到达服从泊松分布，均值为每100个时间单位到达5个。 虚拟网络的生存时间服从指数分布，均值为500个时间单位。仿真共持续50000 个时间单位，每4000个时间单位进行一次记录。
对于VNE-PCGA算法，初始种群内的个体数量设定为25,最大迭代次数设 定为15,阈值7；设定为10。因为VNE-PCGA算法采用了优秀个体替代策略，所 以交叉操作在促进种群快速演进的同时不会破坏优秀的父代个体。因此，VNE- PCGA 算法中的每一对被选择的个体都会进行交叉操作。在传统的遗传算法中， 变异操作的概率大多取值为0.05,因为全新的变异算子加强了算法的局部搜索能 力，所以加强变异操作的作用是十分必要的，因此在仿真实验中将变异概率设定 为 0.1 O
34

3.3.3对比方案介绍
本文选择以下几种算法作为VNE-PCGA算法的对比方案：
(1) 传统的遗传算法(GA) : GA通过轮盘赌的形式进行父代的选择操作， 以部分交叉的方式完成交叉操作，并通过随机变异的方式执行变异操作。
(2) 混合群智能优化算法(VNE-PSO-GA) : VNE-PSO-GA首先通过传统 的遗传算法对种群进行更新，随后对每个个体运用粒子群算法，使其向质量较高 的映射方案靠拢，重复迭代直到达到终止条件。
(3) 遗传与蚁群融合算法(GACA) : GACA为每个底层节点设定了信息 素数值，在每次迭代后增加最优个体中包含的底层节点所携带的信息素数值，并 在下一次迭代中选取个体中信息素最小的节点作为变异点，使得变异操作具有一 定的方向性。
3.3.4算法性能分析
本文对VNE-PCGA算法以及对比方案进行了仿真，选取了多个指标对算法 的性能表现进行分析。
0. 95


4	8	12	16	20	24	28	32	36	40	44	48
时间(*1000)
图3-10底层网络长期平均运营收益
图3-9与图3-10表明，当虚拟网络请求到达速率为5个/100时间单位时， 与GA、GACA、VNE-PSO-GA相比，VNE-PCGA算法的虚拟网络请求接受率分 别提高了 6%、4%、3%,长期平均运营收益分别提高了 14%、9%、5%,主要原 因分为以下三点：
(1) GA、GACA与VNE-PSO-GA这三类算法使用随机生成初始种群的策 略，生成的初始染色体难以满足虚拟网络映射问题中的节点与链路资源约束条件, 使得初始种群的产生速度较为缓慢。本文提出的VNE-PCGA使用了经过改进的 初始种群生成机制，可以有效地保证生成的初始染色体能够满足节点资源约束条 件，只需要检查是否满足链路约束条件即可。相比其余三种对比算法，本文提出 的VNE-PCGA有效地提高了初始种群的生成速度与初始个体的质量，有利于加 快算法的收敛速度并提高最终映射方案的质量。
(2) GA使用轮盘赌机制进行父代选择，如果在进化早期种群中出现了适应 度极高的个体，那么该个体会在父代中迅速占据绝对的优势，导致算法早熟收敛 于局部极值。VNE-PSO-GA将GA与改进的粒子群算法相结合，在GA执行完 毕后引导各个染色体向种群内的最优个体靠拢，虽然VNE-PSO-GA相对于单一 的GA拥有更快的收敛速度，但是依旧无法避免GA中超级个体造成的早熟现 象。本文提出的VNE-PCGA将带有演化规则的元胞自动机模型引入GA的选择 步骤中，将遗传操作限定在个体的邻域内，并通过制定的演化规则进一步降低了 选择压力，避免了超级个体造成的早熟现象，使得VNE-PCGA在固定的代数内 能够得到更好的映射方案，有效地降低了映射成本，节省了底层网络的链路资源， 使得底层网络能够接受更多的虚拟网络请求。
36

(3) GACA通过在GA的变异操作中融入蚁群算法的信息素概念对变异点 的选择进行引导，使得变异操作拥有了一定的方向性，相对于单一的GA拥有更 强的趋向于最优解的能力，但是信息素只能反映出最优解包含哪些基因值，却不 能反映出最优解内部基因的排序结构，使得GACA的实际性能相较于GA提升 较为有限。本文提出的VNE-PCGA利用粒子群算法的思想对变异算子进行改造, 使得变异操作可以随着种群演化的进展越来越多地保留最优个体的基因排序结 构，有效地加快了算法的收敛速度，降低了时间成本。


0. 50 -
0. 45 -
0	4	8	12	16	20	24	28	32	36	40	44	48
时间(*1000)
图3-11底层网络收益开销比
图3-11表明，当虚拟网络请求到达速率为5个/100时间单位时，与GA、 GACA、VNE-PSO-GA相比，VNE-PCGA算法的底层网络收益开销比分别提高 了 25%、17%、9%,主要原因是本文提出的VNE-PCGA算法能够在固定的迭代 次数内得到质量更高的映射方案，避免了将两个相邻的虚拟节点映射到底层网络 中距离较远的两个节点上，有效地降低了链路映射步骤的开销。
图3-12至图3-14展示了在不同的请求到达速率下，四种算法的性能表现, 分别以10000、2000与1000个时间单位为间隔进行记录。
37

图3-12到达速率2个/100时间单位
图3-12表明，在较低的虚拟网络请求到达速率下，底层网络资源的负载率 普遍处于较低的水平，并且四种算法都有充分的时间处理到来的请求，所以四种 算法的虚拟网络请求接受率均可以维持较高的数值。
0. 70 ~r	I	I	I	I	I	I	»	I	I	1	I	I
0	2	4	6	8	10	12	U	16	18	20	22	24
时间(*1000)
图3-13到达速率10个/100时间单位
图3-13表明，当虚拟网络请求到达速率为10个/100时间单位时，四种算法 的请求接受率均有所下降。VNE-PCGA由于融入了元胞自动机以及粒子群算法 的思想，相较于其余三种算法时间开销较大，但是迭代得出的映射方案相较于其 余三种算法质量更高，所以在仿真实验运行一段时间后，VNE-PCGA的底层链 路资源相较于其余三种算法更为丰富，从而有效地提高了后续请求的接受率。
38


图3-14到达速率20个/100时间单位
图3-14表明，当虚拟网络请求的到达速率达到20个/100时间单位时，四种 算法的虚拟网络请求接受率都大幅度下降，GACA与GA由于复杂度较低，在请 求高速到达的场景下表现优于更为复杂的VNE-PCGA与VNE-PSO-GAo本文提 岀的VNE-PCGA由于运行时间较长，难以应对高速到达的虚拟网络请求，导致 虚拟网络请求的接受率处于较低水平。
由此可见，本文提出的VNE-PCGA算法在中等以及较低的请求到达速率下 拥有较为优异的表现，在虚拟网络请求高速到达的条件下，VNE-PCGA的表现 不如复杂度更低的算法。
3.4本章小结
本章主要提出一种基于粒子群思想的元胞遗传虚拟网络映射算法，该算法将 带有演化规则的元胞自动机应用于遗传算法的选择步骤中，使得遗传操作只发生 在个体及其有限的邻域内，有效地保持了种群多样性。针对算法收敛速度较慢的 缺点，本文提出了一种基于粒子群算法思想的变异算子，引导种群内的个体在变 异操作中追踪种群内的最优个体，并在演化过程中动态地调整最优个体对变异操 作施加的影响力大小，使得算法在拥有优异的全局搜索能力的同时拥有较快的收 敛速度。本章首先介绍了遗传算法、粒子群算法以及元胞自动机的理论基础与基 本思想，随后重点描述了基于演化型元胞自动机的选择算子和基于粒子群思想的 变异算子的设计思路与内部细节，接着对算法的整体设计进行了详细介绍，最后 用Python语言搭建了仿真环境进行实验，并与现有算法的性能进行了对比分析。
39




























































40


第四章基于节点重要性的虚拟网络重映射算法
静态条件下，已完成映射的虚拟网络请求不会被重新配置，资源分配方案会 一直持续至虚拟网络请求到期。在实际场景中随着时间的推移，虚拟网络请求动 态地到来或离去，一些底层节点或底层链路的负载压力会变得过高而形成资源瓶 颈，与此同时，另一部分底层节点或底层链路的资源利用率却十分低下，底层网 络资源的负载不均衡程度加剧，虚拟网络请求的接受率也随之降低。因此，对虚 拟网络的映射方案进行动态调整是十分重要的。在底层网络中，不同重要性的节 点对于网络连通性的影响力大小不同，现有的虚拟网络重映射算法没有对底层节 点的重要性进行区分，实际操作中容易出现将非重要节点上的虚拟节点迁移到重 要节点上而造成更严重的资源瓶颈的情况，使得重映射操作对于底层网络资源碎 片化问题的改善效果不理想。
本文提出了一种基于节点重要性的虚拟网络重映射算法（Virtual Network Reconfiguration Algorithm based on Node Importance, VNR-NI）,该算法首先通 过全新设计的综合多维度属性的节点重要性评价指标区分底层网络中的重要节 点与非重要节点，随后依据底层网络的负载状态设置动态阈值以筛选出高负载节 点，接着选择高负载重要节点上承载的部分虚拟节点迁移到非重要节点上，最后 对相关的虚拟链路进行重映射。仿真实验表明，本文提出的重映射算法可以有效 地消除底层网络中的资源瓶颈并提高各项评价指标。
4.1节点重要性的相关理论研究
4.1.1关于节点重要性的研究
在底层网络中，不同的节点由于自身资源属性以及拓扑属性的差异，对底层 网络的连通性有着不同的影响力。现有的节点重要性评价指标大多只考虑了节点 的资源属性，文献［64］将节点自身的计算资源量与其相邻链路带宽资源量总和的 乘积作为节点重要性评价指标，如公式（4-1）所示，其中Eg）表示节点勺的相 邻链路的集合，许多基于贪婪算法的虚拟网络映射算法均采用了相同的节点重要 性评价方法。
H{n^ = cpu{m）工 b（es）	.
张E（n）
实际上，节点的资源属性与拓扑属性都在很大程度上决定了节点在网络拓扑
中的重要性，如图4"所示，节点A与节点C携带有数量相同的计算资源，并
且二者相链路的带宽资源总量相同，然而两者在底层网络拓扑中所处的位置不
41

同，节点C的邻居节点更多，相比于节点A更靠近网络拓扑的中心，并且有更 多的最短路径将节点C作为桥梁节点，所以节点C的重要性高于节点A的重要 性。由此可见，宙于节点在网络中的位置不同，即使拥有相同数量的资源，其重 要性也各不相同。一个准确的节点重要性评价指标需要全面地参考节点的资源与 拓扑属性，并且随着参考维度的增加，评价指标的准确性也随之增加。



图4-1底层网络示意图
节点在网络中的拓扑属性不是唯一的，不同的拓扑属性从不同的角度衡量了 节点以及相邻链路的影响力大小，节点的基本拓扑属性主要分为以下三类：
(1) 度中心性：节点的度中心属性表示与该节点直接相连的一跳邻居的数 量，可以通过公式(4-2)进行计算：
DC(n^ =工 Sy
当节点幻为节点”i的一跳邻居时，丙/的值为1,否则为0。度中心性是最为 简单直观的拓扑属性，但是只能反映出节点对于局部网络的影响力，没有考虑到 节点在网络全局中的位置信息，局限性较大。
(2) 紧密度中心性：节点的紧密度中心性表示当前节点到网络拓扑中的其 他节点的距离平均值的倒数，可以通过公式(4-3)进行计算：
71 — 1
~N 工d(m勺) >1
42
其中d(ni,nj)表示节点i与节点j之间的距离，紧密度中心性能够度量出当 前节点到网络中其他节点的距离远近，较为全面地反映了节点对于网络全局的影 响能力。
(3) 介数中心性：节点的介数中心性能够有效地量化节点控制网络中信息 流动的能力，可以通过公式(4-4)进行计算：
M(小 2 零^	(4-4)
其中SPn},nk代表节点®与节点nk之间的最短路径的数量，SP®%(阳)代表了 经过节点"i的最短路径数量。
近年来，许多研究人员对于融合资源属性与拓扑属性的节点重要性评价方法 进行了研究，文献［6习参考了谷歌(Google)搜索引擎使用的网页排名算法 (PageRank)的思想，建立了一个马尔科夫随机游走模型来衡量节点的拓扑属性 值，提出了一种同时参考了节点的资源属性与拓扑连通性的节点重要性评价方法。 文献［66］设计了一种基于随机游走模型的节点重要性评价指标，使得距离重要性 高的节点越近的节点其重要性也越高。文献［67］对节点的紧密度进行了重新定义, 引入了最短路径上的可用带宽资源量这一变量，并将节点度数、节点剩余计算资 源量与全新定义的节点紧密度这三者的乘积作为节点的重要性指标，有效地将节 点的拓扑属性与节点的资源丰富度进行了结合，更为全面地评估了节点的重要性, 提高了虚拟网络映射的成功率与收益开销比。
4.1.2关于证据融合理论的研究
邓普斯特沙弗理论(Dempster-Shafer Theory, DST)又被称为D-S证据理论， 是由数学家邓普斯特博士(ArthurDempster)于二十世纪六十年代提出，并由他 的学生沙弗博士(Glenn Shafer)于二十世纪七十年代拓展推广的一种用于处理 不确定性问题的数学理论阿。作为概率论中贝叶斯推理方法的推广，D-S证据理 论不需要先验知识，并且可以有效地利用“不确定”的信息，在处理有限个数的 不确定问题时可以取得良好的效果。随着计算机技术以及传感器技术的飞速发展, 研究人员可以通过不同的途径获取多样化的信息进行分析，D-S证据合成规则可 以将不同来源的证据融合为一个最终的证据以供研究人员决策参考，目前已经被 广泛应用于传感器网络数据融合与风速预测等领域［6270］。
在证据理论中，通常将问题的所有可能结论用一个内部元素两两互斥的有限 非空集合表示，该集合被称为辨识框架，如公式(4-5)所示：
0 = {6,6,6,	(4-5)
43

辨识框架G的全部子集构成了 G的崙集2。，若存在一个集合映射函数肌： 2n->[0,l]满足公式（4-6）至公式（4-8）所示的条件，则加是辨识框架Q上的基 本概率指派函数：
w（^4）>0	（4-6）
加（0） = 0
其中/为辨识框架G的任意一个子集，观（力）为基本信度值，代表了当前证 据分配给力的支持程度大小。若m（A）>Q,则&为2。的一个焦元，全集。对应 的基本信度值代表了当前证据对于所有可能的结论都无法确定的程度。基本的概 率论建立在辨识框架Q上，而证据理论建立在辨识框架的幕集2。上，因此证据 理论允许多子集的存在，可以表示“不确定”这种类型的信息，与经典的概率论 相比拥有更高的灵活性与准确性。
不同来源的证据可以通过D-S证据理论进行证据间的融合，设殖与刃2是 辨识框架G下的两个来源不同的基本概率指派函数，D-S证据合成规则可以通过 公式（4-9）表示：
加Y购（4）加2（的）
<
k=工昭（4）加2（如）
其中E表示不同来源的证据之间的冲突程度，当上取值为1时，代表两个不 同来源的证据是完全冲突的，合成规则在这种情况下无效。如果2取值为0,则 表示两个不同来源的证据间完全不存在冲突。
证据合成规则可以推广到多个证据之间的融合，设购至也"是辨识框架Q下 的n个来源不同的基本概率指派函数，焦元分别为4至力”，则殖至也”融合后 的概率指派函数如公式（4-10）所示：
仏n.4”=x
k= 工	“（4）加2（力2）…弘（厦”）
,	血 rM2・.ru”=0
D-S证据合成规则满足交换律与结合律，不需要考虑证据融合的顺序问题。 通过D-S证据理论可以将多个不同来源的证据融合为单一的证据以供参考，融 合产生的证据由于吸取了不同来源的信息，在全面性与客观性方面拥有更好的表 现。
44
4.2综合多维度属性的节点重要性评价指标设计
为了解决底层网络负载不均衡的问题，现有的虚拟网络重映射算法大多通过 设置固定阈值筛选出底层网络中负载率较高的节点，并对高负载底层节点上的部 分虚拟节点进行迁移以实现负载均衡。实际上，只有对底层网络连通性有较大影 响的重要节点在负载率较高时会成为瓶颈节点，处于网络边缘的非重要底层节点 即使负载率较高也不会造成严重的网络资源碎片化问题。如图4-2所示，节点C 与节点I都拥有较高的负载率，节点C位于网络的中心位置，并且有多条最短路 径将节点C作为桥梁节点，所以过度使用节点C自身以及相邻链路上的资源会 使得整个底层网络的资源碎片化程度加剧。节点I处于网络拓扑的边缘，即使有 着较高的负载率也不会对底层网络的连通性产生较大的影响。因此，本文设计的 节点重要性评价指标的目的是有效地筛选出对底层网络连通性有较大影响的重 要节点。

图4-2重要底层节点示意图

4.2.1节点重要性评价时机选取
在进行节点重要性评价时，需要考虑何时进行节点重要性评价与如何进行节 点重要性评价这两方面问题。对于节点重要性评价时机选取这一问题，现有的虚 拟网络映射算法大多通过底层网络的剩余资源状态进行实时的节点重要性评价， 但是这种评价方式并不适用于虚拟网络重映射问题，原因如下：
在虚拟网络映射问题中，节点重要性评价的目的是为虚拟网络请求中的各个 虚拟节点选定剩余资源较为丰富并且连通性较强的节点，以此提高映射的成功率 并保证底层网络资源的利用率。在虚拟网络重映射问题中，节点重要性评价的目
45

的是筛选出对底层网络的连通性有重大影响的节点，使得后续的重映射步骤得以 准确地消除底层网络的资源瓶颈并降低网络资源的碎片化程度。如果在重映射操 作前基于剩余资源量进行节点重要性的评价，不仅时间开销巨大，而且重要节点 由于自身资源的丰富性以及在底层网络拓扑中位置的重要性，往往承载了较多的 虚拟节点，其自身剩余的资源量处于较低的水平，此时进行节点重要性评价指标 的计算会使得事实上的重要节点得分偏低，与实际情况不符。

图4・3初始资源影响力示意图
如图4-3所示，括号外的数字代表着底层节点以及相邻链路的剩余资源量, 括号内的数字代表着底层节点以及相邻链路的初始资源量。如图4-3 （a）所示, 初始资源较为丰富并且处于网络拓扑中心位置的节点的负载率保持在较低的水 平会显著地提升虚拟网络请求的接受率。如图4-3 （b）所示，初始资源较为匮乏 的节点即使处于网络拓扑的中心位置并且拥有较低的负载率也无法对底层网络 的连通性产生较大的影响。因此，本文选择根据底层网络的初始状态计算各个底 层节点的重要性评价指标。
4.2.2节点重要性评价方式设计
对于节点重要性评价方式设计这一问题，本文对文献［71］提出的复杂网络重 要节点识别理论进行改造，选取了节点的资源属性丹仏）、度中心性DC仙）、紧 密度中心性CC（nz）与介数中心性BC（灼）这四个维度的属性对节点重要性进行 评价，并对各个维度的属性分别赋予不同的影响力权重，利用D-S证据合成规则 将上述不同维度的节点重要性评价指标融合为一种全新的综合多维度属性的节 点重要性评价指标。基于D-S证据理论的信息融合框架如图4-4所示：
46


由于不同维度的属性对于节点重要性的影响力不同，本文选择对各个维度的 属性设置不同的权重，为了降低计算量，各个维度的权重值被设定为固定值。由 于节点的介数中心性表示通过该节点的最短路径数量，可以最大程度地表现节点 与其相邻链路对于底层网络连通性的影响，所以将介数中心性的权重设定为最大 权重，取值为0.4。如上文所述，底层节点以及相邻链路的初始资源量在很大程 度上决定了节点对于网络连通性的影响能力，所以将节点的资源属性权重值设定 为0.3。由于节点的紧密度中心性反映了节点在网络拓扑中的位置，紧密度中心 性取值越大，节点越靠近网络拓扑的中心，对于网络连通性的影响力也越大，本 文将紧密度中心性的权重值设定为0.2o由于节点的度中心性只能反映节点对于 局部网络的重要性，所以将节点度中心性的权重设定为最小权重，取值为0.1。
接下来构造各个节点在属性7这一维度的概率指派函数，为了简便起见，本 文对节点重要性的区分标准只有两个：重要（I）与不重要（N）,辨识框架0如 公式（4-11）所示：
(4-11)
在构建基本概率指派函数的过程中，如何将证据准确地转换为信度是提升证 据融合效果的关键问题。本文采用属性的全局极值作为重要性的参考值构建概率 指派函数，人代表底层节点衍在节点属性7这一维度的取值，当底层网络中共有 s个节点时，节点属性7的最大值与最小值如公式（4-12）与公式（4-13）所示：


D-S证据合成规则默认各个来源不同的证据具有同等的权重，然而实际上各 个证据的重要程度不同，所以需要对证据进行转化，将证据的权重体现在概率指 派函数中。本文参考文献［72］提出的证据折扣理论构造各个属性的证据折扣因子, 以Qy表示预先设定的各维度权重，以介数中心性作为关键证据，定义各维度的 属性相对于介数中心性的折扣因子，节点属性7相对于介数中心性的折扣因子 2卩可以通过公式（4-14）进行计算：
(4-14)
本文结合折扣因子构造各个属性的基本概率指派函数，使得权重较小的证据 所能提供的确定性信息减少，不确定信息增加，节点在属性7这一维度的三项 基本信度值的计算方式如公式（4-15）至公式（4-17）所示：



36)
m I7(6>) = 1 - mVi(7) - /M ( JV)	(4-17)
mVi{l）表示依据节点属性卩的表现判定节点弘是重要节点的概率, 表示依据节点属性7的表现判定节点久是非重要节点的概率，叫⑹表示依据 节点属性/的表现无法判定节点久是否重要的概率。以叫⑴为例，分子部分代 表节点如在属性卩这一维度的取值偏离非重要参考值的程度，分母部分展示了重 要参考值与非重要参考值之间的距离，参数r为0到1之间的常数，作用是防止 分子为0。
通过上述三项基本信度值，可以构造出节点％在属性/这一维度的基本概率 指派函数，如公式（4-18）所示：

得到节点在各个维度的基本概率指派函数后，运用上文介绍的D-S证据合 成规则可以将来源于不同维度的基本概率指派函数进行融合，得到节点的综合概 率指派函数。以m；（z）与叫（i）表示节点”，的两个来自不同维度的基本概率指派函 数，其融合方式如公式（4-19）至公式（4-22）所示：
⑷i⑴叫⑴+ mh（l） m2,（0）+心（0）%⑺
48


将所有维度的基本概率指派函数进行融合后可以得到节点的综合概率指派 函数，如公式（4-23）所示：

"”（/）表示综合多维度的属性判定节点加属于重要节点的概率，®（N）表示 综合多维度的属性判定节点几属于非重要节点的概率，心（&）表示综合多维度的 属性无法判定节点”，是否属于重要节点的概率。本文将节点的综合概率指派函数 中的不确定概率进行平均分配，可以最终得到综合多维度属性的节点重要性评价 指标，如公式（4-24）所示：

以图4-1所展示的底层网络为例，各个节点的重要性评价结果如表4-1所示, 单纯地基于资源属性对节点的重要性进行评价会得到节点A与节点C的重要性 相同的结论，实际上节点C位于网络拓扑的核心位置，对于网络连通性的影响力 明显地超过节点A,由此可见，单方面考虑节点的资源属性无法准确地判别节点 的重要性。基于传统的证据合成理论对节点的重要性进行评价可以得到节点A与 节点C的重要性十分相近的结论，原因是传统的证据合成理论没有考虑到不同 维度的属性对于节点重要性的影响力大小区别，实际上不同维度的节点属性所具 有的影响力大小不同，由此可见，基于传统证据合成理论的节点重要性评价指标 准确性不足。通过本文提出的综合多维度属性的节点重要性评价指标可以明显地 判断岀节点C的重要性高于节点A的重要性，并且不同节点的重要性指标数值 也有较为明显的差距。由此可见，本文所提出的节点重要性评价指标由于融合了 多个维度的节点属性特征，并且对于不同维度的节点属性所具有的影响力进行了 区分，相比于现有的方法能够更为准确地评价节点的重要性。
表4-1节点重要性评价结果
底层节点
基于资源 属性的重 要性指标
基于资源 属性的重 要性排名
基于传统 证据合成 理论的重 要性指标
基于传统 证据合成 理论的重 要性排名
综合多维 度属性的 节点重要 性指标
综合多维 度属性的 节点重要 性排名
A
5500
2
0.921
3
0.156
4
B
4500
4
0.563
4
0.442
3
C
5500
2
0.998
1
0.997
1
D
1400
9
-1.000
9
-0.995
9
E
2400
8
-0.997
8
0988
8
F
5600
1
0.998
1
0.738
2
G
3500
7
-0.983
6
-0.975
7
H
4000
6
-0.357
5
-0.679
5
I
4200
5
-0.993
7
-0.964
6
4.3基于节点重要性的虚拟网络重映射算法设计

不同重要性的底层节点对于底层网络的连通性有着不同的影响力，重要节点 的负载率过高会造成底层网络资源的碎片化，非重要节点对于底层网络连通性的 影响力有限，即使过载也很难造成底层资源的碎片化。文献［73］提出了 “跷跷板 问题”这一概念，“跷跷板问题”指的是重映射操作在消除旧有的资源瓶颈的同 时造成新的资源瓶颈的问题。如图4-5所示，假设在虚拟网络重映射算法中节点 负载率的阈值为百分之六十，此时检测到节点I的负载率达到了百分之七十五, 超过了设定的负载阈值，重映射机制将节点I上所承载的虚拟节点d重新映射到 负载压力较低的节点F上，并对虚拟节点d的相邻虚拟链路进行了重映射。虽然 重映射操作达到了负载均衡的目的，使得所有底层节点的负载率均小于阈值，但 是重要节点F以及底层链路CA与CF的负载压力却增加了。重要节点F的负载 压力加大很容易造成底层网络资源的碎片化，使得后续虚拟网络请求的接受率降 低，非重要节点I的过载对整个网络的连通性不会造成明显的影响。
由此可见，针对非重要底层节点的重映射操作不仅无法有效地改善底层网络 的资源碎片化问题，还会增加重映射操作的时间开销与计算成本，降低后续请求 的接受率。因此，在进行虚拟网络重映射的过程中对节点的重要性进行区分可以 有效地避免“跷跷板问题”。
50


图4-5 “跷跷板问题”示意图
当前的虚拟网络重映射算法主要分为主动重映射与被动重映射两类，被动型 算法在检测到虚拟网络请求被拒绝时才会启动重映射，通过迁移已映射的虚拟节 点与虚拟链路以消除资源瓶颈，然而此时底层网络的资源碎片化程度往往已经达 到十分严重的状态，在这种条件下进行底层网络的负载均衡较为困难。主动型算 法周期性地扫描底层网络的负载状态，并对高负载节点与链路上所承载的虚拟节 点与虚拟链路进行重映射，可以有效地维持底层网络的负载均衡，避免资源瓶颈 的出现，更好地保持虚拟网络请求的高接受率。因此，本文选择主动型策略进行 虚拟网络重映射。
文献［74］设计了一种主动型虚拟网络重映射算法，该算法周期性地扫描底层 网络的负载状态并对负载率过高的底层节点上的所有虚拟节点进行重映射，可以 有效地实现底层网络的负载均衡，然而重映射高负载节点上的所有虚拟节点会造 成过高的重映射开销并且对虚拟网络服务造成较大的影响。文献［75］以平均整个 底层网络中节点的剩余资源量为目标，提出了一种主动型算法，该算法周期性地 将剩余资源量较少的底层节点上的部分虚拟节点迁移到剩余资源较多的底层节 点上，然而该算法没有考虑到重映射目标节点的位置问题，很容易导致属于同一 个虚拟网络的各个虚拟节点随机地分布在底层网络中，增加重映射的链路开销。 文献［76］考虑到重映射开销的问题，提出了一种主动型算法，该算法周期性地将 高负载底层节点上的虚拟节点重新映射到距离其邻居节点所在位置最近的底层 节点上，然而这种重构策略单方面地考虑了距离因素，没有考虑到不同底层节点 的重要性区别，容易导致“跷跷板问题”的出现。
本文针对上述虚拟网络重映射算法的缺点，设计了一种基于节点重要性的虚 拟网络重映射算法，该算法通过本文提出的综合多维度属性的节点重要性评价指 标对底层节点的重要性进行区分，周期性地将高负载的重要底层节点上的部分虚 拟节点重新映射到低负载的非重要节点上，并对其关联的虚拟链路进行重映射，
51
以此来维持底层网络的负载均衡，提升虚拟网络请求的接受率，同时能够有效的 避免“跷跷板问题”的发生。
4.3.1过载重要底层节点选取
由上文所述，高负载的非重要底层节点对于底层网络连通性的影响较小，对 这些节点上的虚拟节点进行重映射操作无法有效地改善底层网络的资源碎片化 问题，而且会造成重映射开销增加，甚至会导致“跷跷板问题”的出现。因此, 本文设计的虚拟网络重映射算法只对高负载的重要底层节点上承载的虚拟节点 进行重映射操作。
首先设定重要节点占全部底层节点的比例a,随后按照本文4.2节所设计的 综合多维度属性的节点重要性评价指标选取重要性最高的一部分底层节点作为 重要节点。重要节点的数量可以通过公式（4-25）进行计算，其中|皿|为底层网 络中的节点总数：
“”护=0寸弘|	（4-25）
对于底层网络中的节点心，其负载率可以通过公式（4-26）进行计算:
E CPU(nv)
nv—>MS
CPUing
其中分子部分表示被映射到底层节点"s上的所有虚拟节点的计算资源总和, 分母部分表示底层节点心所携带的初始计算资源量。
对于整个底层网络，底层节点的平均负载率可以通过公式（4-27）进行计算：
工 LRg
LR（N}= 一	（4-27）
在传统的虚拟网络重映射算法中，节点的负载率阈值是固定的常数，然而在 实际应用中，当底层网络中的节点负载率普遍较高时，固定的负载率阈值会导致 重映射算法判定大部分底层节点都处于过载状态，需要进行迁移的虚拟节点数量 过多，重映射开销会大幅度增加。除此之外，底层网络中的节点普遍处于高负载 状态会使得重映射算法难以找到合适的目标底层节点，导致重映射算法对于底层 资源碎片化的改善效果十分有限。
本文针对固定负载率阈值的缺陷，设计了一种动态节点负载率阈值，可以通
过公式（4-28）进行计算:
(4-28)
动态阈值的大小由当前底层网络中节点的平均负载率决定，当底层节点的负 载压力普遍处于较低的水平时，只选取负载率大于固定值4的重要底层节点进
52
行重映射操作。当底层节点的负载率普遍较高时，节点的负载率阈值被设置为整 个底层网络中节点的负载率平均值。在重映射机制启动时，选取负载率高于动态 阈值的重要底层节点加入有待执行重映射操作的过载重要节点集合。
4.3.2待重映射的虚拟节点选取
在确定了过载重要底层节点的集合后，需要进一步确定待重映射的虚拟节点 集合。对于每一个虚拟网络，其原有的映射方案都是根据虚拟网络请求到达时刻 的底层网络状态进行的资源分配。随着底层网络负载状态的不断变化，部分虚拟 网络请求的原有映射方案已经不再是当前的较优映射方案，对这部分虚拟网络的 映射方案进行调整可以有效地降低链路映射开销，保证后续虚拟网络请求的接受 率。本文以优化虚拟链路映射开销为目标选取待重映射的虚拟节点，对于过载重
要底层节点ns上承载的虚拟节点nv ,其相邻虚拟链路的映射开销收益比CR（nv） 可以通过公式（4-29）进行计算：

其中neigh（nv）表示虚拟节点的邻居节点集合，顷（勺）表示虚拟节点«v 的邻居节点为所在的底层节点，hops{ns,MN{n^表示底层节点％与换佃）之间 的最短路径包含的跳数，6（nv,n;）表示虚拟节点nv与虚拟节点«,•之间的虚拟链路 带宽需求。对于任意一个过载重要底层节点％,本文以最小化重映射虚拟节点数 量为原则，首先通过公式（4-29）计算其上承载的各个虚拟节点的链路映射开销 收益比，随后将各个虚拟节点按照链路映射开销收益比降序排列，若重映射前m 个虚拟节点后，重要底层节点心的负载率低于阈值，则将这m个虚拟节点加入 待重映射的虚拟节点集合。
对于重映射的先后顺序这一问题，优先重映射值较大的虚拟节点可 以更为显著地增加底层网络中的剩余带宽资源并提高后续重映射操作的成功率 与重映射效果，因此本文选择将待重映射的虚拟节点集合中的各个节点按照其
值的大小进行降序排列，并依次进行重映射。
4.3.3目标底层节点选取
本文以最小化重映射链路开销为目标进行重映射目标节点的选取，对于一个 选定的待重映射虚拟节点久，其目标底层节点的选取方式如下所示:
（1）	从非重要底层节点集合中删除负载率高于动态阈值的底层节点。
（2）	从非重要底层节点集合中删除％所在的虚拟网络中其余虚拟节点所在 的底层节点。
53
(3) 从非重要底层节点集合中删除剩余资源不满足nv计算资源需求的底层 节点。
(4) 剩余的非重要底层节点构成候选目标节点集合询血e，对于任意计 算nd G Ncandidate,首先通过Dijkstra算法求解nd与nv的各个邻居虚拟节点的所在 位置之间的最短路径，并检查最短路径上的剩余带宽是否满足带宽约束条件。对 于满足带宽约束条件的候选目标节点nd ,其对应的重映射方案造成的重映射链 路开销RLC(nJ可以通过公式(4-30)进行计算：
血 C("d)=工 hops[nli,MN(ni))-b(nv,ni)	(4-30)
Hjeneigh^ny)
其中neigh(nv)表示虚拟节点nv的邻居节点集合，顷(勺)表示nv的邻居虚 拟节点«/所在的底层节点，hops{nd,MN{n^表示底层节点滋与顷(坷)之间的 最短路径包含的跳数，b(计)表示虚拟节点nv与nt之间的虚拟链路带宽需求。
(5) 选择重映射链路开销最小的候选目标节点对虚拟节点以及相关虚拟链 路进行迁移，迁移完成后更新底层网络状态。
54

4.3.4基于节点重要性的虚拟网络重映射算法流程
果据底层网络的平均负载 率设置动态阈值
痛选岀负载率超过阈值的 重要底层节点
遍历负载率超过阈值的重 要底层节点的集合•选择 其中一个底层节点
将各伞虚拟节点按照链路 映射开销牧益比降庁:排列
将前M个虚拟节点加入待重
映射集合中，使得底层节
点的负載率低于阈值
图4-6 VNR-NI算法流程图
VNR-NI算法的流程如图4-6以及表4-2所示：
（1）	初始化：根据本文提出的综合多维度属性的节点重要性评价指标得到 重要底层节点集合，根据公式（4-26）与公式（4-27）计算当前底层网络中各个 节点的负载率与整个底层网络的负载率均值，随后根据公式（4-28）计算节点负 载率动态阈值。
（2）	过载重要节点选取：根据动态阈值，将重要节点集合中负载率大于动 态阈值的节点加入过载重要节点集合。
55

(3) 待重映射的虚拟节点选取：遍历过载重要节点集合中的每个节点，首 先根据公式(4-29)计算其自身承载的各个虚拟节点的值，并将各个节点 按照其值的大小降序排列。若对前m个虚拟节点进行重映射后该重要节 点的负载率低于动态阈值,则将此m个虚拟节点加入待重映射的虚拟节点集合， 并对集合中的各个虚拟节点按照值从大到小依次进行重映射。
(4) 目标底层节点选取：按照4.33小节所述的方式得到候选目标节点集合 Ncandidate。对于N血询沏e中的每一个节点，根据公式(4-30)计算其对应的重映 射链路开销RLCAd)，选取RLC(nd)值最小的候选目标节点进行虚拟节点以及虚 拟链路的迁移，并对底层网络状态进行更新。若全部候选底层节点均无法满足链 路约束条件，则该虚拟节点迁移失败。
(5) 输出：输出负载均衡后的底层网络。
表4-2VNR-NI伪代码
VNR-NI伪代码
输入：Gs = (NSl Es),重要底层节点集合M/
输出：经过负载均衡的底层网络
calculate dynamic load rate threshold U by formula (4-28) for all ns from M} do
if the load ratio of ns > U then
add ns into set	//找出过载重要节点合集
end if
end for
for all ns from Ms do
sort the virtual nodes nv on according to CR(nv) in descending order
calculate the load rate after migrating the first m virtual nodes on ns
if the load rate< U then
add the first m virtual nodes into Mv
end if
end for//找出待重映射的虚拟节点集合
sort the virtual nodes in Mv according to CR(nv) in descending order
for all nv from Mv do
get the Ncandidate 〃找出候选目的节点集合
for all nd from Ncandidate do calculate RLCfji^) by formula (4-28) //if 算重映射开销
end for
remap nv to nd with minimum
remap virtual links using shortest path algorithm update the substrate network 〃以最小开销进彳亍重映射
end for
56
4.4算法仿真及分析
为了验证本文提出的基于节点重要性的虚拟网络重映射算法（VNR-NI）的 有效性，本文通过搭建仿真平台实现了 VNR-NI算法,并从虚拟网络请求接受率、 平均重映射链路开销等角度与文献［75］提岀的基于最小代价的虚拟网络重映射 算法（LC-VNR）和文献［76］提岀的拓扑感知的虚拟网络重映射算法（TA-VNR） 进行了比较。
4.4.1实验参数设置
本文选择使用GT-ITM工具生成底层网络拓扑与虚拟网络请求，底层网络中 的节点数目为100,节点间相连的概率为50%,底层节点所携带的计算资源在［50, 100］间均匀分布，底层链路所携带的带宽资源在［50, 100］间均匀分布。虚拟网络 请求包含的节点数目在［2, 20］间均匀分布，节点间相连的概率为50%,虚拟节点 所需的计算资源在［2, 30］间均匀分布，虚拟链路所需的带宽资源在［2, 30］间均匀 分布。虚拟网络请求的到达服从泊松分布，均值为每100个时间单位到达10个。 虚拟网络的生存时间服从指数分布，均值为500个时间单位。重映射的周期设置 为500个时间单位，重要节点占全部底层节点的比例a设定为0.3, Us设定为0.6, 仿真共持续24000个时间单位，每2000个时间单位进行一次记录。
4.4.2对比方案介绍
本文选择以下两种虚拟网络重映射算法作为本文提出的基于节点重要性的 虚拟网络重映射算法（VNR-NI）的对比方案：
（1）	基于最小代价的虚拟网络重映射算法（LC-VNR） : LC-VNR周期性地 扫描底层网络的负载状态，将剩余资源量小于底层网络均值的节点作为需要重映 射的对象，并以促进底层网络资源的均衡分布为目标将部分虚拟节点迁移至剩余 资源量较多的底层节点上。
（2）	拓扑感知的虚拟网络重映射算法（TA-VNR） : TA-VNR周期性地扫描 底层网络的负载状态，将资源利用率超过阈值的底层节点作为需要重映射的对象, 并以降低链路重映射成本为目标将部分虚拟节点重映射到距离其邻居节点所在 位置最近的底层节点上。
4.4.3算法性能分析
本文选取VNE-PCGA作为基础的虚拟网络映射算法，对VNR-NI算法以及 对比方案进行了仿真，并选取了多个性能指标进行了对比。
57

0. 55 -
0.50	I	I	I	i	1	I	I	<	I	I	I	I
0	2	4	6	8	10	12	14	16	18	20	22	24
时间(*1000)
图4-8底层网络收益开销比
如图4-7与图4-8所示，当虚拟网络请求到达速率为10个/100时间单位时， VNR-NI与TA-VNR. LC-VNR和不带有重映射操作的VNE-PCGA相比，虚拟 网络请求的接受率分别提高了 3%、6%、7%,底层网络收益开销比分别提高了 6%、9%、15%,主要原因分为以下三点：
(1) TA-VNR与LC-VNR没有考虑到底层节点的重要性差异，周期性地对 全部高负载节点进行重映射，不仅时间开销较大，而且容易将非重要节点上的虚 拟节点迁移到重要节点上造成更严重的资源瓶颈问题。本文提出的VNR-NI考虑 到底层网络中不同重要性的节点对于底层网络连通性的影响力差别，只选取高负 载的重要底层节点进行重映射，使得重映射操作不仅能够准确地消除底层网络中
58

的资源瓶颈还能够将待重映射的虚拟节点数量维持在较低的水平，有效地降低了 重映射操作的时间开销，提高了后续请求的接受率。
(2) 由于底层网络的负载状态不断地变化，虚拟网络请求到来时所分配的 映射方案在一段时间后很可能不再是较优的映射方案，VNR-NI在选取待重映射 的虚拟节点时考虑到了虚拟节点当前映射方案的优劣程度差异，针对性地优化当 前映射方案质量较差的虚拟节点，使得底层网络中拥有更多的剩余带宽资源以供 后续请求使用。因此，本文提出的VNR-NI算法能够更加有效地提高后续请求的 接受率并改善收益开销比。
(3) VNR-NI在选取重映射操作的目标底层节点时考虑到了目标节点的重 要性差异，只选取低负载的非重要底层节点作为重映射操作的目标节点，避免了 其余两种对比算法中容易出现的“跷跷板问题”。除此以外，VNR-NI优化了重 映射虚拟节点的迁移位置，避免了属于同一个虚拟网络的各个节点零散地分布在 底层网络中，有效地节约了底层链路的带宽资源，有利于底层网络接受后续到来 的虚拟网络请求。
90 -
80 -
70 -
60 -
50 -
40 -
30 -
20 -
0	2	4	6	8	10	12	14	16	18	20	22	24
时间(*1000)
图4-9平均重映射链路开销
如图4-9所示，在整个仿真过程中LC-VNR的平均重映射链路开销呈无规 律变化，这是因为LC-VNR在进行重映射操作时单方面地考虑了目标底层节点 的剩余资源量，没有考虑到目标节点在底层网络中的位置，使得属于同一虚拟网 络的各个虚拟节点随机地分布在底层网络中。VNR-NI与TA-VNR在重映射虚拟 节点时考虑到了目标底层节点在网络中的位置，使得属于同一虚拟网络的虚拟节 点在底层网络中的位置更加接近，减小了链路映射的成本。因为VNR-NI在选取 目标底层节点时考虑的指标是重映射相关链路的总开销而TA-VNR考虑的指标
59

是重映射路径的总长度，所以本文提出的VNR-NI相比TA-VNR拥有更低的平 均重映射链路开销。
0. 30
—VNE-PCGA
一VNE-PCGA+LC-VNR
VNE-PCGA+TA-VNR
VNE-PCGA+VNR-NI

时间(*1000)
图4・10底层节点负载率均方差
0. 40

0. 20 0	2	4	6	8	10	12	14	16	18	20	22	24
时间(*1000)
图4-11底层链路负载率均方差
如图4-10与图4J1所示，三种重映射算法都能够降低底层网络中节点与链 路的负载率均方差，有效地实现了对于底层网络的负载均衡。由于本文提出的 VNR-NI只针对高负载的重要节点进行重映射，不会对高负载的非重要节点进行 任何操作，所以VNR-NI对应的底层节点与链路的负载率均方差高于TA-VNR与 LC-VNR对应的底层资源负载率均方差。
图4J2与图4-13展示了在不同的虚拟网络请求到达速率下，三种重映射算 法的请求接受率，分别以4000与1000个时间单位为间隔进行记录。
60

0. 85
0	4	8
图4-12到达速率5个/100时间单位
如图4-12所示，在虚拟网络请求到达速率为5个/100时间单位的情况下， 三种重映射算法对于虚拟网络请求接受率的提高效果较为接近。这是因为在较低 的请求到达速率下，TA-VNR与LC-VNR相对于VNR-NI更高的重映射时间开 销对于虚拟网络请求接受率的影响不明显。TA-VNR与LC-VNR没有对底层节 点的重要性进行区分，但是在请求到达速率较低的条件下，底层网络中的剩余资 源较为丰富，TA-VNR与LGVNR两种算法不容易造成新的资源瓶颈。因此，在 较低的请求到达速率下，VNR-NI、TA-VNR与LGVNR对于虚拟网络请求接受 率的提高效果较为接近。
0. 80
VNE-PCGA
VNE-PCGA+LC-VNR —VNE-PCGA+TA-VNR T- VNE-PCGA+VNR-NI
0.50 I	I	I	I	I	I	I	i	I	I	I	I
0	1	2	3	4	5	6	7	8	9	10	11	12
时间(*1000)
图4・13到达速率20个/100时间单位
61
如图4-13所示，当虚拟网络请求的到达速率达到20个/100时间单位时， VNR-NI可以有效地提高请求的接受率，而其余两种对比算法在请求快速到达的 情况下无法有效地提高请求的接受率，主要原因为以下两点：
(1) 在虚拟网络请求快速到达的场景下，底层网络的负载压力较大，满足 重映射标准的底层节点数量众多，TA-VNR与LC-VNR基于固定阈值周期性地 对全部高负载节点进行重映射，时间开销较大且重映射成功率较低。
(2) VNR-NI只选取对底层网络连通性有较大影响的高负载重要底层节点 进行重映射，并且节点的负载率阈值随着底层网络的整体负载状态动态地变化， 所以VNR-NI能够在保持底层网络连通性的前提下将待重映射的虚拟节点数量 控制在较低的水平，有效地降低了重映射操作的时间开销，使得VNR-NI能够更 好地适应虚拟网络请求快速到达的场景。
4.5本章小结
本章首先分析了虚拟网络重映射问题的概念与现状，随后重点介绍了本章提 出的基于证据合成规则的综合多维度属性的节点重要性评价指标，该指标融合了 节点的资源属性以及拓扑属性，能够更为准确地评价底层网络中不同节点的重要 性，接下来详细介绍了本章提出的基于节点重要性的虚拟网络重映射算法，该算 法能够准确地识别并消除底层网络中的资源瓶颈，有效地提高了各项性能指标， 最后用Python语言搭建了仿真环境，对算法进行了仿真与对比分析。
62
第五章总结与展望
5.1工作总结
二十一世纪以来，网络技术飞速发展，多样化的网络应用层出不穷，互联网 已经成为人类文明进步发展的必要支撑平台。随着网络需求不断地多元化，传统 的网络架构已经难以应对爆发式增长的网络流量，然而当前网络体系庞大，结构 错综复杂，难以进行优化调整，网络僵化问题日益严重。网络虚拟化技术通过对 底层网络资源进行虚拟化，可以允许多个彼此独立的虚拟网络共存于同一底层网 络而无需改变原有的网络体系结构，极大地提高了网络资源的利用率，可以有效 地解决网络僵化问题。
虚拟网络映射问题是网络虚拟化领域相关研究中的一个重要内容，目的是将 带有各种约束条件的虚拟网络请求映射到底层网络上，并且实现底层网络资源的 优化配置。国内外针对虚拟网络映射问题己经进行了大量的研究，其中的大部分 成果都集中于设计启发式算法以解决基础的虚拟网络映射问题，但是启发式算法 仍然有很大的改进空间，对基础的虚拟网络映射算法进行深入的研究是十分必要 的。
随着虚拟网络请求动态地到来与离去，底层网络的负载不均衡问题愈发严重, 后续请求的接受率也随之降低。对已完成映射的虚拟网络进行动态地调整能够优 化底层网络资源的分配方案，使得底层网络能够接受更多的虚拟网络请求。现有 的虚拟网络重映射算法大多未对底层网络中各个节点的重要性进行必要的区分， 容易在重映射操作后产生新的资源瓶颈，并且现有的重映射算法对于重映射目标 底层节点的选取大多没有考虑到链路映射成本的问题，很容易造成属于同一虚拟 网络的各个虚拟节点随机地分布在底层网络中，增加底层链路资源的消耗，使得 重映射操作对于虚拟网络请求接受率的提高效果有限。因此，对基于节点重要性 的虚拟网络重映射算法进行研究具有实际意义。
本文的研究工作如下：
(1)对于基础的虚拟网络映射算法，本文首先将带有演化规则的元胞自动 机应用于遗传算法的选择操作中，降低了算法早期超级个体的扩散能力以防止算 法早熟收敛。本文随后对于传统遗传算法中的变异操作进行了研究，使用粒子群 算法的思想改进了变异算子，引导种群内的个体在变异操作中追踪最优个体，并 在演化过程中动态地调整最优个体对变异操作施加的影响力大小，使得算法在拥 有优异的全局搜索能力的同时拥有较快的收敛速度。为了验证该算法的有效性，
63
本文使用Python语言搭建仿真平台进行实验，仿真结果证明，本文提出的VNE- PCGA算法有效地提高了各项性能指标。
(2)对于虚拟网络重映射算法，本文首先设计了一种基于改进证据合成规 则的综合多维度属的节点重要性评价指标，更为全面准确地评价了底层网络中 不同节点的重要性，使得后续的重映射操作能够更加高效地识别并消除资源瓶颈。 本文随后设计了一种基于节点重要性的虚拟网络重映射算法，该算法利用综合多 维度属性的节点重要性评价指标筛选出对于底层网络连通性有较大影响的重要 节点，并通过节点负载率动态阈值筛选出底层网络中的资源瓶颈，以优化链路映 射开销为目标进行虚拟节点与虚拟链路的迁移。仿真结果证明，本文提出的VNR- NI算法能够降低底层网络的资源碎片化程度，提高了虚拟网络请求接受率等性 能指标，并且有效地避免了传统的重映射算法中常见的“跷跷板问题”。
5.2未来工作展望
近年来，虚拟网络映射问题已经成为了研究热点，本文针对现有算法的不足 之处进行改进，提岀了一种基于粒子群思想的元胞遗传虚拟网络映射算法与一种 基于节点重要性的虚拟网络重映射算法，在研究过程中，还发现许多可以进一步 改进的地方，未来可以对如下几方面加以研究：
(1) 对于基于粒子群思想的元胞遗传虚拟网络映射算法，本文基于经验设 置了固定的邻居结构以及演化规则，在后续研究中可以考虑如何根据底层网络的 状态自适应地设置元胞的邻居结构以及演化规则以提高算法的各项性能指标。
(2) 对于节点重要性评价指标的设计，本文没有考虑邻居节点各个维度的 属性对于节点重要性评价指标的影响，后续研究可以将邻居节点的各项属性纳入 考虑范围。对于节点重要性评价指标中不同维度属性的权重设置，本文按照经验 设置了固定值，在未的研究中可以考虑如何结合实际情况自适应地设置不同维 度的权重值。
64
参考文献
[1] Alcober, J.? Hesselbach, X・，Oliva, A., et al. Internet Future Architectures for Network and Media Independent Services and Protocols [A]. // 2013 15th International Conference on Transparent Optical Networks (ICTON) [C], Cartagena: IEEE Press, 2013: 1-4.
[2] Chowdhury, N. M. M, K.5 Boutaba, R. A. A. survey of network virtualization [J]. Computer Networks, 2010, 54(5): 862-876.
[3] Chowdhury, N. M. M. K., Boutaba, R. A. Network virtualization: state of the art and research challenges [J]. IEEE Communications Magazine, 2009,47(7): 20-26.
[4] Taleb, T. Toward carrier cloud: Potential, challenges, and solutions [J]« IEEE Wireless Communications, 2014, 21(3): 80-91.
[5] Anderson, T., Peterson, L.? Shenker, S.5 et Overcoming the Internet impasse through virtualization [J]. IEEE Computer Magazine, 2005, 38(4): 34-41.
[6] Fischer, A., Botero, J. F., Beck, M. et al. Virtual Network Embedding: A Survey [J]・ IEEE Communications Surveys & Tutorials, 2013, 15(4): 1888-1906.
[7] Araujo, S・ M. A., Souza, F. S・ H., Mateus, G. R. Mrtual network embedding in multi-domain environments with energy efficiency concepts [A]. // 2018 International Conference on Information Networking (ICOIN) [C], Chiang Mai: IEEE Press, 2018:205-210.
[8] Ogino, N.? Kitahara, T.? Arakawa, S., et al. Virtual network embedding with multiple priority classes sharing substrate resources [J]. Computer Networks the International Journal of Computer & Telecommunications Networking, 2017? 12(3): 52-66.
[9] 温涛，虞红芳，李乐民.网络虚拟化的过去、现在和未来[JJ.中兴通讯技术, 2014, 20(3): 2-7.
[10] Andreoletti, D.? Velichkova, T., Verticale, G.? et al. A Privacy-Preserving Reinforcement Learning Algorithm for Multi-Domain Virtual Network Embedding [J]・ IEEE Transactions on Network and Service Management, 2020, 17(4): 22912304.
[11] Nonde, L., Elgorashi, T.? Elmirghani, J. Cloud Virtual Network Embedding: Profit, Power and Acceptance [A]. // 2015 IEEE Global Communications Conference (GLOBECOM) [C]? San Diego: IEEE Press, 2015: 1-6.
65
[12] Shamseddine, M., Itani, W.? Kayssi, A.? et al. Virtualized network views for localizing misbehaving sources in SDN data planes [A]. // 2017 IEEE International Conference on Communications (ICC) [C]5 Paris: IEEE Press, 2017: 1・7.
[13] Luo, X., Ma, S., Jin, Y. H. HADES: A compatible SDN based network virtualization architecture [A]. // 2014 12th International Conference on Optical Internet 2014 (COIN) [C], Jeju: IEEE Press, 2014: 1-2.
[14] Blenk, A・,Basta, A・，Zerwas, J., et al. Pairing SDN with network virtualization: The network hypervisor placement problem [A]. // 2015 IEEE Conference on Network Function Virtualization and Software Defined Network (NFV-SDN) [C], San Francisco: IEEE Press, 2015: 198-204.
[15] Singh, ML Virtualization in Cloud Computing- a Study [A]. // 2018 International Conference on Advances in Computing, Communication Control and Networking (ICACCCN) [C], Greater Noida: IEEE Press, 2018: 64-67.
[16] Sun, J., Zhang, N., Wo, T. Y. HCNet: An SDN Enabled Virtual Network Management System for Hybrid Clouds [A]. // 2019 IEEE Symposium on Computers and Communications (ISCC) [C], Barcelona: IEEE Press, 2019: 1-7.
[17] Markowski, M., Ryba, P., Puchala, K・ Software Defined Networking Research Laboratory-Experimental Topologies and Scenarios [A]. // 2016 Third European Network Intelligence Conference (ENIC) [C]9 Wroclaw: IEEE Press, 2016: 252- 256.
[18] Olimjonovich, M. S・ Software Defined Networking: Management of network resources and data flow [A]. // 2016 International Conference on Information Science and Communications Technologies (ICISCT) [C], Tashkent: IEEE Press, 2016: 1-3.
[19] Uskov, A. Information security of mobile VPN: Conceptual models and design methodology [A]. // 2012 IEEE International Conference on Electro/Infbrmation Technology [C]5 Indianapolis: IEEE Press, 2012: 1-6.
[20] Alshalan, A., Pisharody, S.9 Huang, D. J. A Survey of Mobile VPN Technologies [J]. IEEE Communications Surveys & Tutorials, 2015, 18(2): 1177-1196.
[21] Yu, M・ L.，Rexforfd, J., Sun, X., et al. A survey of virtual LAN usage in campus networks [J]. IEEE Communications Magazine, 2011, 49(7): 98-103.
[22] 孙群华.主动网络安全管控系统设计与实现[D],成都：电子科技大学, 2012.
[23] Dai, Q. L., Shou, G. C., Hu, Y H., et al. A general model for hybrid fiber-wireless
66
(FiWi) access network virtualization [A]. // 2013 IEEE International Conference on Communications Workshops (ICC) [C], Budapest: IEEE Press, 2013: 858-862.
[24] Hasan, M.》Amarasinghe, H.? Karmouch, A.? et al. Network virtualization: Dealing with multiple infrastructure providers [A]. // 2012 IEEE International Conference on Communications (ICC) [C], Ottawa: IEEE Press, 2012: 5890-5895.
[25] Yin, L・,Chen, Z・,Qiu9 L., et al. Interference based virtual network embedding [A]” // 2016 IEEE International Conference on Communications (ICC) [C]9 Kuala Lumpur: IEEE Press, 2016: 1-6.
[26] 蔡志平，刘强，吕品，等.虚拟网络映射模型及其优化算法[J].软件学报, 2012, 23(4): 864-877.
[27] Ayoubi, S., Assi, C・，Shaban, et al. MINTED: Multicast Virtual Network Embedding in Cloud Data Centers with Delay Constraints [J]・ IEEE Transactions on Communications, 2015, 63(4): 1291-1305.
[28] Thakur, D., Khatua, M. Multi-domain virtual network embedding with dynamic flow migration in software-defined networks 卩].Journal ofNetwork and Computer Applications, 2020, 162(10): 2219-2225.
[29] Ni, Y. J., Huang, G. Y, Wu, S., et al. A PSO Based Multi-Domain Virtual Network Embedding Approach [J]. China Communications, 2019, 16(4): 105-119・
[30] Shen, M., Xu? K・,Yang, K., et al. Towards Efficient Virtual Network Embedding Across Multiple Network Domains [A]. // 2014 IEEE 22nd International Symposium of Quality of Service (IWQoS) [C]? Hong Kong: IEEE Press, 2014: 61-70.
[31 ] Dietrich, D・，Rizk, A., Papadimitrou, P. Multi-provider virtual network embedding with limited information disclosure [J]. IEEE Transactions on Network and Service Management, 2015, 12(2): 188-201.
[32] Gong, L.? Wen, Y. G.? Zhu, Z. Q., et al. Toward profit-seeking virtual network embedding algorithm via global resource capacity [A]. // 2014 IEEE Conference on Computer Communications (INFOCOM) [C], Toronto: IEEE Press, 2014: 1-9.
[33] Zheng, H. K., Li? J. J., Gong, Y J., et al. Link Mapping-Oriented Ant Colony System for Virtual Network Embedding [A]. // 2017 IEEE Congress on Evolutionary Computation (CEC) [C], Donostia: IEEE Press, 2017: 1223-1230.
[34] Zhang, S.，Qian, Z・ Z., Guo, S., et at FELL: A Flexible Virtual Network Embedding Algorithm with Guaranteed Load Balancing [A]. // 2011 IEEE International Conference on Communications (ICC) [C], Kyoto: IEEE Press, 2011:
67
1-5.
[35] 王文钊，汪斌强，王志明，等.基于混合群智能优化的虚拟网络映射算法 卩]・计算机应用,2014, 34(4): 930-934.
[36] Liu, B. Y・，Wu, M. Q., Zou5 H. S. Virtual Network Embedding Based on Hybrid Adaptive Genetic Algorithm [A]. // 2019 IEEE 5th International Conference on Computer and Communications (ICCC) [C]? Chengdu: IEEE Press, 2019: 11971202.
[37] Nguyen, L. Kim? N・，Kim, S. Y., et aL RT-VNE: Areal-time strategy for Virtual Network Embedding towards resource efficiency [A]. // 2017 International Conference on Information Networking (ICOIN) [C], Da Nang: IEEE Press, 2017: 185-190.
[38] 卢波.虚拟网络映射策略与算法研究[D].北京：北京邮电大学,2014.
[39] 苑迎，王聪，王翠荣，等.面向动态虚拟网络请求的虚拟网络映射算法[J]. 计算机应用，2017,37(1):6X1.
[40] Zhao, J. H., Su, K. Y, Qu, H., et al. Reconfiguration method based on load balance for virtual network in carrier-SDN [J]. Application Research of Computers, 2018, 35(12):3781-3785.
[41] Fajjari, L, Aitsaadi, N・,Pujolle, G.? et al. VNR Algorithm: A Greedy Approach for Virtual Networks Reconfigurations [A]. // 2011 IEEE Global Telecommunications Conference (GLOBECOM) [C]9 Houston: IEEE Press, 2011: 1-6.
[42] Chen,乙 H・，Zheng, X. W・，Chen, X. B. A Virtual Network Reconfiguration Algorithm Oriented to Energy Consumption [A]. // 2015 10th International Conference on Broadband and Wireless Computing, Communication and Applications (BWCCA) [C]5 Krakow: IEEE Press, 2015: 605-609.
[43] Lin, Q.? Huang, Y. L.? Li，Y・ A New Algorithm for Virtual Networks Reconfiguration with Adaptive Interval [A]. // 2018 2nd IEEE Advanced Information Management,Communicates,Electronic and Automation Control Conference (IMCEC) [C], Xi'an: IEEE Press, 2018: 2567-2571.
[44] Sun, G.? Yu? H. F., Anand, V. RT-VNE: A Cost Efficient Framework and Algorithm for Embedding Dynamic Virtual Network Requests [J]. Future Generation Computer Systems, 2013, 29(5): 1265-1277.
[45] Zhang, Z・ B., Su, S., Zhang, J. C.? et al. Energy aware virtual network embedding with dynamic demands [A]. // 2015 IEEE International Conference on Communications (ICC) [C], London: IEEE Press, 2015: 386-391.
68
[46] Rahman, M. R・，Boutaba, R. SVNE: Survivable Virtual Network Embedding Algorithms for Network Virtualization [J]. IEEE Transactions on Network and Service Management, 2013, 10(2): 105-11 &
[47] Khan, M. M. A., Shahriar, N., Ahmed, R., et al. Multi-Path Link Embedding for Survivability in Virtual Networks [J]. IEEE Transactions on Network and Service Management, 2016, 13(2): 253-266.
[48] 张鑫源，胡晓敏，林盈.遗传算法和粒子群优化算法的性能对比分析[J], 计算机科学与探索,2014, 8(1): 90J02.
[49] Maaranen, H., Miettinen, K., Makela, M. Quasi-random initial population for genetic algorithms [J]. Computers and Mathematics with Applications, 2004, 47(12): 1885-1895.
[50] Cerf R. The quasispecies regime for the simple genetic algorithm with ranking selection [J]. Transactions of the American Mathematical Society, 2014, 369(9): 80-85.
[51] 冯冬青，王非，马雁.遗传算法中选择交叉策略的改进[J].计算机工程, 2008,34(19): 189-191.
[52] 李书全，孙雪，孙德辉，等.遗传算法中的交叉算子的述评[J].计算机工程 与应用，2012,48(1): 36-39.
[53] Hasan, M. Z.5 Rizzo, H. A*, Turjman, F. et at Internet of Things Task Scheduling in Cloud Environment Using Particle Swarm Optimization [A]. //2018 IEEE Global Communications Conference (GLOBECOM) [C]5 Abu Dhabi: IEEE Press, 201& 1-6.
[54] Wang? L・ Q., Li, C・ L.? Wang，H., et al. MEP-PSO Algorithm-Based Coverage Optimization in Directional Sensor Networks [A]. // 2020 IEEE Global Communications Conference (GLOBECOM) [C], Taipei: IEEE Press, 2020: 1-6.
[55] Anantathanavit, M・，Munlin, A. Radius Particle Swarm Optimization [A]. // 2013 International Computer Science and Engineering Conference (ICSEC) [C]? Nakhonpathom: IEEE Press, 2013: 126-130.
[56] Lv, J. P., Shi? X. J. Particle Swarm Optimization Algorithm Based on Factor Selection Strategy [A]. // 2019 IEEE 4th Advanced Information Technology, Electronic and Automation Control Conference (IAEAC) [C], Chengdu: IEEE Press, 2019: 1606-1611.
[57] Alhussein, M.? Haider, S・ L Improved Particle Swarm Optimization Based on Velocity Clamping and Particle Penalization [A]. // 2015 3rd International
69
Conference on Artificial Intelligence, Modelling and Simulation (AIMS) [C], Kota Kinabalu: IEEE Press, 2015: 61-64.
[58] Rosin, P. L. Image Processing using 3-state Cellular Automata [J]. Computer Vision and Image Understanding, 2010, 114(7): 790-802.
[59] Zhang. P. Y.? Hong, Y. R., Pang, X., et al. VNE-HPSO: Virtual Network Embedding Algorithm Based on Hybrid Particle Swarm Optimization [J]. IEEE Access, 2020, 8: 213389-213400.
[60] 王明，庄雷，王国卿，等.基于元胞遗传机制的虚拟网络映射算法[J].计算 机科学,2018, 45(12): 66-70.
[61] 王仲君，王能超，冯飞，等.元胞自动机的演化行为研究[J].计算机应用研 究,2007,24(8): 38-41.
[62] 鲁宇明.元胞遗传算法研究及应用[D].南京：南京航空航天大学,2013.
[63] 张葆.虚拟网络映射算法研究[D],西安：西安电子科技大学,2014.
[64] Yu, M., Yi, Y, Rexford, J., et al. Rethinking virtual network embedding: substrate support for path splitting and migration [J]. ACM SIGCOMM Computer Communication, 2008, 38(2): 17-29.
[65] Cheng, Su, S., Zhang, Z., et at Virtual network embedding through topology- aware node ranking [J]. ACM SIGCOMM Computer Communication Review, 2011.41(2):38-47.
[66] Cao, H,, Zhu，Y., Yang, L., et al. A Efficient Mapping Algorithm With Novel Node-Ranking Approach for Embedding Virtual Networks [J]. IEEE Access, 2017, 5: 22054-22066.
[67] 朱国晖，张茵，刘秀霞，等.节点拓扑感知的高效节能虚拟网络映射算法 [J].计算机科学,2020, 47(9): 270-274.
[68] Tchamova, A., Dezert, J. On the behavior of Dempster's rule of combination and the foundations of Dempster-Shafer Theory [A]. // 2012 6th IEEE International Conference Intelligent Systems [C]9 Sofia: IEEE Press, 2012: 108-113.
[69] Meng, X. B., Li, H. X. Dempster-shafer based probabilistic fuzzy logic system for wind speed prediction [A]. // 2017 International Conference on Fuzzy Theory and Its Applications (iFUZZY) [C]5 Pingtung: IEEE Press, 2017: 1-5.
[70] Leonard, ML R., Schroth, C・ A.，Zoubir, A. M. Dempster-Shafer Theory Based Robust Sequential Detection in Distributed Sensor Networks [A]・ // 2018 IEEE Statistical Signal Processing Workshop (SSP) [C], Freiburg im Breisgau: IEEE Press, 201& 26-29.
70
[71] Cai, D.? Wang,乙 X.5 Wang, N・ K., et aL A new method for identifying influential nodes based on D-S evidence theory [A]. // 2017 29th Chinese Control And Decision Conference (CCDC) [C]? Chongqing: IEEE Press，2017: 4603-4609.
[72] 刘海燕，赵宗贵.刘熹.D-S证据理论中冲突证据的合成方法[J].电子科技 大学学报,2008, 37(5): 701-704.
[73] 赵季红，苏珂嫄，曲桦，等.软件定义承载网中基于负载均衡的虚拟网络重 配置方法卩].计算机应用研究,2018, 35(12):3781-3785.
[74] Zhu? Y., Ammar, M. Algorithms for Assigning Substrate Network Resources to Virtual Network Components [A]. // Proceedings IEEE INFOCOM 2006. 25TH IEEE International Conference on Computer Communications [C], Barcelona: IEEE Press, 2006: 1-12.
[75] 曲桦，赵季红，郭爽等.基于最小代价的虚拟网络重配置方法[J],北京邮 电大学学报,2014, 37(5): 114-118.
[76] 彭利民.一种拓扑感知的虚拟网络重构算法[J].四川大学学报,2015,47(5): 110-115.
71




























































72


