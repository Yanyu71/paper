第一章绪论
1.1无线通信发展与LTE-Advanced项目
从20世纪60年代，贝尔实验室提岀蜂窝移动通信概念以来，移动通信技术 就为实现人类随时随地，与世界互联的梦想而飞速发展。随着人们对移动通信的 需求由最初单一南语音通话,向着多元化高速数据业务发展，移动通信也经历了 从模拟到数字，从低速到高速，从单一到多元的发展历程。
蜂窝小区覆盖技术的出现,一定程度上解决了移动通信系统频谱资源紧缺的 问题，使得有限的频谱资源得以进入商业化的轨道。上世纪80年代起，在蜂窝 小区覆盖技术和原有模拟无线电通信技术的基础上诞生了以美国AMPS为代表 的第一代模拟蜂窝移动通信系统。从80年代中期开始，伴随着数字技术和集成 电路技术的进步，以欧洲提出的基于时分多址技术的GSM标准和美国提出的基 于码分多址技术的IS-95为代表的第二代移动通信技术(2G)逐步投入使用，并在 全球范围内取得了巨大成功。
从90年代后期开始，互联网技术和移动终端技术的高速发展与融合，使得 以Web服务为代表的多种数据业务逐步取代了语音通信、文本信息等传统低速 率业务，成为了移动通信需求的主要来源。使用GSM系统承载分组数据的通用 分组无线业务(GPRS),并不能满足由此带来的庞大流量增长。2001年，由欧洲 WCDMA、美国CDMA2000和中国TD-SCDMA组成的第三代移动通信技术(3G) 正式确立，可为静止用户提供2Mbps的峰值传输能力，为高速移动用户提供 384kbps的传输能力。
近十年来，移动互联网技术和多媒体业务的蓬勃兴起给移动通信技术提出了 新的挑战。终端的功能日益多样化，使得其对移动通信的流量需求进一步增长, 其速度甚至远超过了 3G的承载能力，于是更新一代的移动通信技术标准应运而 生。2004年,3GPP启动了 ETE项目，以OFDM技术和MIM0技术为主要基础， 在20MHz频谱带宽下为用户提供下行100Mbps、上行50Mbps的峰值传输能力， 同时全面降低系统延时，提高覆盖质量⑴。
IMT-Advanced对第四代移动通信技术(4G)提出了更高的要求，在满足高的 峰值速率之外，还需要保证在各种环境，特别是室内、低速、热点这样的移动互 联网常见应用场景下的用户体验。单以性能指标而言，m较4G的标准还有一 定的差距。但ETE提供了满足4G需求的技术基础和核心，其增强版本 ETE-Advanced,对ETE进行了一系列的扩充、增强和完善，通过引入载波聚合 和多天线扩展等技术进一步提升了 ETE系统的频谱利用效率。除了空口能力的 增强外，在核心网方面，ETE-Advanced也将朝着扁平化和全IP的方向演进，同 时采用中继、多点协作传输等技术改善小区边缘的通信性能，引入超微微蜂窝 (femtocell)组成层次化更强的网络结构，在无线资源管理和网络层优化方向进一 步与通信需求相适应。
从2009年ETE的可商用标准R8系列规范完成，到2011年ETE-Advanced 的R10系列规范，再到如今规划中的R13系列规范，ITE-Advanced正引领移动 通信在4G时代的前进路上快速、稳步前进。在此过程中，中国企业一直在ITE 特别是TD-ETE的标准化工作中扮演着重要角色，推动着各项标准的确立与实现。
1.2 SDR发展概况
移动通信设备通常是基于专用硬件进行设计的，其调制、编码、多址接入方 式等相对固化，适于大规模的商业化生产，却不支持多业务对射频硬件的复用， 以及系统快速、灵活的升级。而软件无线电技术(Software Defined Radio)则提出， 可以在一套标准、通用、模块化的硬件平台基础上，釆用开放式的体系结构和可 扩展的接口，尽可能多地使用软件来实现基带处理和协议栈的功能。在软件无线 电系统的架构下，可以在硬件设备不变的前提下，使用不同的软件实现不同的通 信需求，构建高适应性、高灵活性的多模通信平台〔2】。
对于商用移动通信系统而言，软件无线电技术使得在不改变原有硬件设施的 前提下，通过修改软件来改变系统功能成为可能，因此可以大大降低系统修改和 升级所需要的成本；而对于移动通信技术的研究者而言，软件无线电技术则使得 新业务和新技术的研发变得简单、高效，缩短研究项目的开发周期，减少不必要 的硬件设备投入。
目前的软件无线电平台通常基于DSPs FPGA/ASIC或通用处理器(GPP)实现。 相比之下，基于GPP的软件无线电系统由于平台的通用性，数据处理能力可能 会略逊于基于DSP和FPGA等专用平台的系统，同时，由于需要大量的逻辑处 理能力以支持一个通用的操作系统，系统的利用率也会有所差距。但另一方面， 通用性的平台也使得开发者可以使用更为通用的编程语言对所需系统进行开发、 很容易地利用丰富的开源软件资源对所需系统进行扩展，也可以更容易地接入业 务数据，使用友好的用户接口验证系统性能。灵活性、易扩展性和硬件部分低廉 的成本，使得这种基于通用处理器的软件无线电系统还是受到越来越多开发者的 青睐。随着GPP性能的提升，上述效率上的差距正逐步缩小，而虚拟化技术的 发展，则使得基于GPP的软件无线电系统可以更灵活地配置其射频单元和处理 单元，具备了更广阔的发展前景。
现在主流的GPP-SDR平台主要包括微软亚洲研究院研发的SORA平台和麻 省理工学院基于USRP射频前端的GNU Radio平台。本论文就是在基于USRP 的SDR平台上开展的。USRP中文名为通用软件无线电设备，是由美国Ettus Research公司开发的一款开源小型软件无线电硬件平台。USRP设备通过以太网 接口与服务器连接，服务器负责基带信号的处理和协议栈的逻辑处理，USRP设 备则实现混频、前端放大、中频滤波等通用射频模块的实现。USRP为开发者提 供了 UHD驱动程序以配置和操作USRP硬件，支持包括数据的发送和接收，以 及对设备工作频点、带宽、速率等指标的配置等功能。开发者只需对基带信号的 处理逻辑进行自定义，而无需关注射频端的细节。
在基于GPP的SDR平台的开发中，计算资源的调度和管理由操作系统完成, 程序的时序并非由开发者完全定义。对一个高速无线通信系统而言，数据处理过 程除了程序的逻辑正确性之外，还必须在严格的时间约束内完成。否则一旦超出 了时序范围，数据处理的结果将会失去意义。因此，处理的实时性是基于GPP 的SDR平台开发的一个重要挑战。
1.3 D2D发展概况	-
对移动互联网业务的分析表明，越来越多的应用和服务都在地理位置邻近的 用户间展开，这使得本地业务的数据流量越来越大。而另一项统计数据表明，未 来80%~90%的系统吞吐量将发生在室内和热点场景。在传统的蜂窝网络架构下， 在业务热点地区，有限的频谱资源已经限制了用户服务的质量，本地业务流量的 增长则无疑会加剧这一问题。如果仅仅通过协作多点传输、超微蜂窝等技术进一 步分裂小区，不仅将面临大量的基础设施投入带来的巨大成本开销，也将对宏蜂 窝造成一定的全局性干扰。
直通通信(D2D:Device to Device)技术是指两个对等的用户节点之间直接进 行通信的通信方式。在由直通通信用户组成的分布式网络中，每个用户节点都能 够发送和接收信号，并具有一定的路由转发能力。这里的分布式，是相对于集中 式的网络而言的，即用户的通信,必须通过与一个固定的接入点进行通信来完成。 Ad-hoc网络就是一种以直通通信为基础的技术，由于其通信方式和网络结构上 极大的灵活性和可扩展性，很早就获得了学术界和工业界的重视。
在解决本地业务需求的问题上，D2D技术具有很多天然的优势，在蜂窝移 动通信系统中引入D2D技术，使得D2D通信使用蜂窝网络授权频段进行通信, 是近年来移动通信业界的重要研究方向之一⑶⑷。首先，D2D技术本身就良好地 支持了短距离的终端间通信，分布式的组网和处理，可以有效利用终端自身的运 算能力，降低蜂窝网络本身的调度负载；其次，D2D通信链路距离短、功率低、 干扰范围小，用户终端分布广泛，在有效的资源分配机制下，D2D通信链路可 以与蜂窝通信和其他D2D通信链路之间以很小的干扰复用有限的频谱资源，提 升频谱的利用效率；而且，D2D通信可以有效利用蜂窝系统帧格式和来自基站 的控制或辅助信息提升通信效率，弥补了 Ad-hoc网络效率低下的缺陷。此外， 将D2D技术与无线中继技术相融合，则可以扩大D2D通信范围，同时有效改善 网络结构、完善蜂窝网络覆盖，提升系统的总体性能和服务质量。
传统的近距离无线通信技术，如蓝牙和WIFL也可以成为移动本地业务的 解决方案。但与D2D技术相比，蓝牙和WIFI技术工作在非授权的频带上，而 非授权的频带上有可能会有不可控制的严重干扰。另一方面，蓝牙和WIFI技术 往往需要通过人工配对或密钥交换的方式完成链接的建立，而D2D技术则只需 用户提供一个URL即可完成访问，通过模式选择自动完成蜂窝通信和D2D通信 之间的切换，而这个选择过程对用户是透明的，因此省去了用户手动建立链接的 麻烦。
随着ETE-Advanced的继续演进，3GPP工作组于2012年对近场通信技术 (ProSe, Proximity Services)进行了研究和讨论㈤。目前，LTE下的D2D近距离服 务研究(Study on LTE Device to Device Proximity Services)已经正式得到 3GPP 的 立项批准。这标志着D2D通信已经正式进入了 ETE-Advanced后续演进的标准化 进程。
1.4本文的研究内容与结构
作为蜂窝系统下的一种全新的通信模式，D2D通信如何与现有的蜂窝体系 相融合，是D2D通信研究的主要目标。近年来，D2D通信方面的研究领域主要 集中在D2D通信的资源优化方面，即如何避免D2D通信与蜂窝通信之间的同频 干扰。大量的研究对蜂窝网络下D2D通信用户的资源分配、功率控制、模式选 择等方面给出了一些优化策略，并通过仿真对各种优化策略的性能进行评估。这 些研究成果表明，通过一定的策略优化，引入D2D通信可以在不对原有蜂窝系 统中的用户造成严重干扰的条件下，为蜂窝网络带来系统容量和频谱利用率的提 升[6][7][8]。
然而，针对这项全新技术的研究大多数仍停留在理论研究阶段，仅能通过数 值仿真对结果进行评估，却缺乏真实无线环境中的验证。截至目前，研究界还没 有一个针对在蜂窝网络下进行D2D通信的硬件测试平台。一方面原因是，当前 商用的ETE-Advanced版本还没有包含D2D技术，因此，不论是商用基站还是商 用终端，都没有支持D2D技术。另一方面，LTE-Advanced中对D2D技术的明 确规范也尚未确立。在两种模式的通信并存的条件下，D2D通信如何建立，基 站对D2D终端需要提供何种的控制或辅助信息，以及D2D终端是否进行自主决
策的动态资源分配调度等问题，都还在研究和讨论之中。
为了在真实无线环境中对D2D技术的可行性进行验证，并在日后开展更为 深入的研究，本论文首先提出了一种在对现有ITE蜂窝网络不作任何改动的情 况下，能与蜂窝网络相融合的分布式D2D通信方案框架，设计了一套可行的D2D 终端通信流程。在此基础上，本论文在基于GPP的软件无线电平台上，通过在 ETE协议基础上对终端行为进行少量功能性改动的基础上，开发了实现上述D2D 通信流程的验证平台,,以模拟D2D.终端。进而使用多台D2D验证平台组成了= 个实验性的D2D网络，验证了该方案下D2D的接入、通信、测量、业务演示等 功能。同时通过可扩展的设计，为日后针对相同方案框架下的研究提供了易用的 接口。
在D2D通信方案流程中，数据处理的几乎每一个步骤都有其时序规定，数 据从接收、处理到发送的时延限制通常在百微秒到毫秒级，因此验证平台对于系 统的实时性要求非常严格。为了在非硬实时的操作系统环境下实现这样的实时系 统，本论文在验证平台设计和开发的过程中，使用了一系列技术对处理的实时性 加以保障。本文中也将对这些实时处理保障技术进行介绍。	『
本文后文的结构安排如下：
第二章：首先对D2D验证平台的设计需求、关键技术和系统环境进行了分 析，指出了系统设计中的要点和挑战；
第三章：根据分析，在分布式资源调度、复用蜂窝上行资源的前提下，分别 提出了在蜂窝网络覆盖下和在自组织网络状态下的整套D2D通信方案，具体包 括系统的同步、路由与终端发现、时域资源竞争接入、无线资源选择、功率控制、 自适应编码调制等；
第四章：在上述通信方案的指导下，介绍D2D验证平台软件部分的系统架 构，具体包括系统整体的层级结构、各层的功能实现、层间接口与消息格式等;
第五章：介绍在D2D验证平台的设计开发过程中所运用的实时处理保障技 术；
第六章：通过文件传输和视频传输等多种业务，展示了 D2D验证平台在不 同场景下的通信能力、干扰控制能力和处理实时性；
第七章：总结全文的主要工作，并提出了进一步的研究方向。
第二章 D2D验证平台需求分析
本章将对D2D验证平台的设计需求进行分析，明确系统所需具备的功能。 在需求明确的基础上，通过对D2D系统关键技术的总结与分析，对系统的可行 性和技术难点进行论证。最后，基于系统实验时所处的真实环境，为系统设计给 岀了一系列基本假设。
、’一 . •. - - . ■■ ": ■,
2.1系统功能需求与设计目标
D2D验证平台的基本设计目标是模拟D2D终端，并进行多台组网，实现 D2D通信功能，并验证D2D通信对原有蜂窝网络带来的系统增益。为了保证系 统功能的全面性和可扩展性，本论文中D2D验证平台的系统功能在基本的设计 目标基础上进行了一定的扩展，明确如下：
1.首先，模拟的D2D终端必须能够与现有ETE网络共存，即与蜂窝网络使 用相同的频带进行通信，并尽量地复用ETE终端本身的信号处理和逻辑处理单 元；为了在没有蜂窝网络的覆盖下也可以实现D2D通信，并支持利用D2D通信 扩大蜂窝网络覆盖的功能，本论文中的D2D验证平台也支持在无蜂窝覆盖的条 件下形成自组织网络进行D2D通信。
2.为了满足基本的本地移动业务需求，模拟的D2D终端必须能够支持终端 之间的点对点通信。同时，为了支持可能的多播和广播业务，本论文中的D2D 验证平台也支持一对多的D2D广播通信。D2D通信的峰值速度，需要能够与相 同MIMO配置的蜂窝通信可比拟。
3.对无线资源管理进行自主决策，要求模拟的D2D终端能够感知共享频段 中可用的频谱资源,并使用一定的资源调度算法，控制其通信所使用的发射功率， 并根据对D2D链路质量的测量结果自适应地调节D2D通信所使用的调制方式和 码率。这里的可用频谱资源包括两种，一种是没有被基站和其它蜂窝终端使用的 空闲频谱资源，另一种是被基站和其它蜂窝终端占用，但D2D通信复用这部分 资源时，两系统之间的互干扰可以控制在较低水平。资源的可用性，同样需要 D2D终端根据测量信息进行自主判决。
4.将中继技术与D2D通信相结合，可以扩大D2D通信的通信范甲，增强业 务的灵活性。为了验证中继技术在D2D通信中的可用性，评估中继蓦发对D2D 通信带来的增益与损失，本论文中的D2D验证平台需要支持在多种中继场景下 自主的路由决策和数据的中继转发。
5.D2D的物理层和底层协议栈可以为验证平台提供基本的数据传输能力， 为了更为真实地模拟移动本地业务在D2D通信中的使用情况，本论文中的D2D 验证平台也将提供对视频流播放、实时文件传输等多种数据业务的支持。相比于 前三代以电路交换为主的移动通信系统，为更好地服务于数据业务，ETE系统被 设计为基于IP的分组交换网络。与ITE系统保持一致性，D2D验证平台对业务 数据的支持也将完全基于IP协议。
6.为了更为直观地获取D2D验证平台的工作状态和性能指标，灵活地实时 调节D2D验证平台的系统参数，本论文中的D2D验证平台将提供一个基于Web 的可视化参数演示平台，对每一台D2D验证平台的同步状态、信道环境、无线 资源使用情况、系统吞吐速率提供实时的测量和监控服务。
7.D2D验证平台的设计目标是为日后的相关研究提供实验验证平台，因此， 对于无线资源管理等关键模块，验证平台的软件系统应提供相对通用、可移植的 接口，使得新的D2D无线资源管理算法可以在原有系统框架不变的前提下快速 完成开发、测试和性能分析。
2.2 D2D通信中的关键技术
为了与蜂窝系统良好共存，并具备高效的系统性能，D2D通信系统需要一 系列的关键技术进行支撑。这些关键技术具体说明如下：
1、	同步与共存机制设计
当D2D通信与蜂窝通信共存时，二者共享授权频谱资源。出于复用终端对 蜂窝信号处理能力的考虑，同时也为了保证D2D通信与蜂窝通信干扰的同质性， D2D通信应使用与ETE蜂窝通信一致的空中接口设计，使用相同的双工模式、 基本逻辑信道映射、帧格式等。D2D终端与蜂窝基站和蜂窝终端之间良好的时 域和频域同步，是D2D验证系统进行有效地干扰管理和资源调度的前提。真实 场景下的D2D终端同时也是蜂窝终端，可以自然地实现同步。然而对于本论文 基于SDR的模拟终端而言，同步是一个需要独立完成的模块。文献［9］提出了一 种基于GPP的ETE小区搜索及下行同步算法，本论文将使用该算法实现D2D验 证平台与蜂窝系统之间的时频域同步跟踪。
当D2D终端工作在无蜂窝覆盖的环境下时，出于复用信号处理能力的考虑， D2D通信流程应与有蜂窝覆盖环境下基本一致，这要求D2D终端有能力自行建 立类似ETE蜂窝通信的帧格式，并以某种形式向其他D2D终端广播同步参考信 号，或侦听已有D2D网络的帧格式，并与之完成同步。同步算法的具体实现可 以与在有蜂窝覆盖的环境下一致。
2、	通信模式选择
D2D通信允许近距离的设备之间可以直接进行通信，而不通过基站和核心
网的转发，因此可以有效地提高网络整体的通信容量。但用户在什么情况下发起 直接通信，在什么情况下需要经过基站转发完成通信，这就是D2D通信过程中 需要面临的模式选择问题。对于单小区场景下的模式选择可以以链路质量比较作 为准则卩°]〔11】，即釆用直接通信和蜂窝转发二者中信噪比较高的一种作为通信方 式。随着研究的深入，新的模式选择策略中还逐渐加入了调度公平性和移动性等 方面的考虑。
3、	终端发现
D2D终端通过终端发现技术来判断哪些用户是直接通信可达的，因此终端 发现会影响到D2D连接是否能够建立。终端发现技术可以有多种实现方式。其 中一种方案基于AP调度，类似于IEEE802.11e[12],通信的发起用户将建立链路 的请求发送给AP,如果目标用户接受请求，也通过AP向原用户发送反馈，当 源用户收到反馈信息后，直连通信链路即完成建立。另一种终端发现方案基于对 发送方的信令监听2】，发送方广播搜索消息，如果接收方在广播消息的范围内， 并成功接收到该搜索消息，则向源用户发送ACK响应，并向基站告知二者之间 可以建立直接链路。
4、	频谱感知
D2D设备进行通信前，需要对无线环境进行感知，以获取所在区域内的频 谱状况，以选取可用的频谱资源进行通信。因此，频谱感知是保证D2D通信质 量和降低蜂窝网络与D2D网络之间干扰的一项关键技术。在认知无线电技术中， 频谱感知的方法有匹配滤波法、能量检测法、循环平稳特征检测法等，这些技术 可以与链路测量相结合，用于D2D终端对无线环境的感知。
在蜂窝覆盖下的D2D通信中，D2D终端也可以利用蜂窝系统提供的一些全 局的广播信息实现频谱感知的功能。文献[14][15]提出了一种策略，对ETE的 PDCCH信道进行盲解码，使用蜂窝基站对上行用户无线资源授权信息来获取蜂 窝上行链路频谱空洞，有效利用现有蜂窝系统提供的可用信息完成了频谱感知功 能。
5、	干扰控制
D2D用户与蜂窝用户共享授权频谱的前提是，D2D通信对蜂窝用户造成的 干扰是可接受的。D2D通信可以以overlay方式使用蜂窝通信未占用的资源，也 可以以underlay方式复用蜂窝通信使用的资源。如果D2D通信使用与蜂窝通信 相互正交的资源，在同步良好的情况下，两系统之间的互相干扰是相对较低的。 但由于只能对频谱空洞进行利用，这种方式对系统整体吞吐的提升是比较有限的。 如果D2D通信与蜂窝通信使用相同的时频资源，则有可能有效利用二者物理上 的隔离产生空间分集增益，大幅提升系统整体性能。但使用相同资源就意味着两 者之间可能存在较强的互干扰，必须有良好的干扰控制算法提供支持。
D2D用户与蜂窝用户之间的干扰与D2D通信复用的无线资源类型有关。如 果D2D用户复用蜂窝上行资源，当D2D链路与被复用资源的蜂窝用户之间距离 较近时，D2D通信的接收端将受到来自该蜂窝用户的强干扰，当D2D链路靠近 基站时，被复用资源的蜂窝用户的上行通信则会受到来自D2D信号的严重干扰; 如果D2D用户复用蜂窝下行资源，当D2D链路与被复用资源的蜂窝用户之间距 离较近时，被复用资源的蜂窝用户的下行通信会受到来自D2D信号的严重干扰, 而由于基的发送功率较高，D2D链路在小区覆盖质量较好的范围内都会受到 强干扰闽。
干扰控制的方式可分为集中式和分布式两种。集中式的干扰控制是指D2D 用户的资源分配、发送功率和编码速率与蜂窝用户一样，由基站统一进行协调和 调度；分布式的干扰控制则指D2D用户在基站的辅助下完成频谱感知和链路测 量，并以此对资源分配、发送功率和编码速率进行自主决策。
早期的研究建立全信道信息已知的假设上，通过基站集中控制，使用优化理 论或博弈论方法得到最优的功率控制和资源分配方案。出于对信息交互开销和时 延等因素的考虑，后期的研究则逐步倾向于分布式方案的思想，文献［17］提出了 一种基于路损测量信息的分布式D2D功率控制算法，文献［18］则提出了一种基 于用户QoS的D2D用户资源分配方案。此外，一些研究还根据D2D通信特点 设计了针对性更强的干扰避免机制，如对复用相同资源的终端间设置最小距离的 干扰区域限制机制四，和针对资源和功率的干扰协调方案a。】。］等。
6、	对等数据传输
现有的蜂窝终端只需具备上行链路的发送能力和下行链路的接收能力即可 与蜂窝基站完成通信。而为了进行对等传输，D2D终端在复用蜂窝终端原有的 一些处理能力的同时，也需要提供一些新的链路收发功能。如果D2D通信复用 蜂窝上行链路资源，那么D2D链路的接收端就需要具备PUSCH链路的接收能 力；如果D2D通信复用蜂窝下行链路资源，那么D2D链路的发送端就需要具备 PDSCH链路的发送能力。文献［22］［23］等研究实现了基于GPP的PUSCH和 PDSCH信道处理算法，这些成果可以用于D2D验证平台中。
7、	中继与路由
中继技术是ETE-Advanced中的一项关键技术，关于ETE-Advanced中的中 继通信中的中继节点选择、资源分配等问题已经有了大量研究支持。但针对D2D 通信中继场景的研究仍处于初步阶段，现有的研究主要针对两种情况，一种是当 两个终端距离太远无法进行直接通信时，利用周围的空闲终端为D2D用户对提 供多跳的中继传输【2句；另一种是通过移动终端作为蜂窝系统的中继节点，提升
10
蜂窝网络边缘用户的链路性能㈣。但D2D通信中的中继选择、重传方式等具体 实现，目前仍是一个开放性的研究问题。
2.3基本场景与假设
为了使D2D验证平台与真实的ITE无线环境相适应，并在保证系统基本功 能完成的前提下降低系统设计的复杂度，本论文提出了以下几点基本假设。
假设1：与实验环境的ETE蜂窝系统一致，假设ETE蜂窝系统的双工模式 为TDD,系统带宽为20MHz,基带釆样速率为30.72MHz。该配置为目前国内 ETE蜂窝系统的主流配置。
假设2：现有蜂窝网络没有提供对D2D通信的任何额外支持，验证平台模 拟的D2D终端目前只能使用分布式的资源管理策略。同时，由于模拟的D2D终 端不能与基站直接通信，基站并不知道其存在，也无法将其接入核心网。因此本 论文中假设各台模拟D2D终端的已经预先分配了本地局域网IP地址和终端ID, 模拟的D2D终端的直接通信对象只能为其它D2D终端，不支持与基項直接通信 的功能。在通信模式选择问题上，假设通信目的地址为本地局域网地能的通信全 部使用D2D模式进行通信，而非通过基站进行转发。
假设3：对移动互联网业务分析表明，移动终端的下载业务量明显高于上传 业务量，因此在真实的蜂窝网络中，下行流量通常高于上行流量，因此上行频谱 出现空闲资源的概率相对较大；其次，如果D2D使用蜂窝上行资源进行通信， 由于D2D终端发射功率较小，D2D链路对蜂窝通信的干扰辐射半径也较小，而 如果D2D使用蜂窝下行资源进行通信，由于蜂窝基站发射功率较大，基站信号 对D2D链路的干扰辐射半径几乎可以覆盖整个小区；此外，D2D终端可以通过 对PDCCH消息的解码提前获取ETE上行子帧的蜂窝通信资源授权信息，用于频 谱感知和干扰管理，但目前尚无类似方案可以提前获取ETE下行子帧的蜂窝通 信资源授权信息。出于以上三点原因，在D2D通信复用蜂窝上行资源或蜂窝下 行资源的选择上，本论文将采用复用蜂窝上行资源的方案。
假设4：为了适当简化网络管理功能，与验证平台的实验目的相一致，本论 文假设D2D网络规模较小，相互可达的D2D网络中的D2D终端个数不超过8 个。在日后的研究中，该规模限制可以根据需求适当扩大，或由基站根据D2D 网络的接入状况，动态管理D2D的网络规模和D2D终端的本地IDo
假设5：由于当前蜂窝网络没有提供足够的干扰控制辅助信息，因此假设信 道环境相对简单，D2D终端之间，以及D2D终端与蜂窝基站之间的链路对称， 即在一组双向链路中，可以通过对接收链路的信道测量估算发送链路的信道质量。 在日后的研究中，如果基站可以为D2D终端提供全局的信道质量信息，则可以
11
取消该项假设。
基于以上对D2D验证平台的功能需求以及关键技术的分析，以下给出D2D 验证平台组网通信的几个基本通信场景。
场景1：蜂窝网络覆盖下的D2D点对点通信，D2D终端与蜂窝终端距离较 近，系统的主要干扰为蜂窝通信对D2D通信的干扰，如图2-1所示：


图2・1混合网络模式近场干扰场景示意图
场景2：蜂窝网络覆盖下的D2D点对点通信，D2D终端与蜂窝终端距离较 远，而D2D终端与蜂窝基站距离较近，系统的主要干扰为D2D通信对蜂窝通信 的干扰，如图2-2所示：
12


图2-2混合网络模式远场干扰场景示意图
场景3：无蜂窝覆盖时，自组织网络模式下的D2D点对点通信，如图2-3
所示：


图2-3自组织网络模式场景示意图
场景4：距离较远的D2D终端通过中间的D2D终端进行中继转发，如图2-4 所示：
13


Data Transmition
图2-4 D2D中继转发场景示意图
场景5： D2D终端通过另一台D2D终端中继转发，实现与蜂窝基站的通信, 即蜂窝网络通过D2D通信扩大网络覆盖，如图2-5所示：

第三章D2D通信技术方案设计
基于第二章对D2D验证平台的需求分析，本章将介绍D2D验证实验中将应 用的一整套D2D通信流程，分析流程中出现的D2D专用控制信令，设计D2D 通信的逻辑信道与物理信道的映射机制，并对流程中的同步、终端发现、时域竞 争接入、无线资源选择、功率控制、自适应编码调制等关键步骤给出详细说明。 该通信流程将作为第四章软件系统设计的基础。D2D验证平台支持有蜂窝覆盖 和无蜂窝覆盖两种工作模式，而D2D通信的流程在这两种模式下有一定区别， 下文在相关流程出现区别时，将其分别进行介绍。
3.1 D2D通信整体流程设计





RTS
；	CTS
—DATA+DATACTRL-H
:	ACK
图3-1混合网络模式下D2D通信流程
当D2D通信工作在ETE蜂窝网络覆盖下时，D2D网络与ETE蜂窝网络共 存形成混合网络。混合网络下的D2D通信的整体流程如图3-1所示。首先，D2D 终端进行同步状态检测，在与基站实现同步后进入混合网络模式，获取蜂窝系统 参数并对自身进行相应配置。配置完成后，D2D终端通过侦听来自其它D2D终 端的路由广播获取D2D网络拓扑信息。为了避免小范围内的多个D2D链路之间 形成相互干扰，当需要发起D2D通信时，D2D终端提前两个无线帧使用一种特 殊的同步分时隙的Aloha方式的CSMA/CA与一定通信范围内的其他D2D终端 进行对上行子帧的时域竞争接入。当D2D通信方式为点对点通信时，如果竞争 接入成功，D2D发送端将提前侦听蜂窝网络提供的辅助信息，综合自身维护的 链路测量信息，对得到接入权限的子帧进行无线资源调度、功率控制和自适应编

码调制，在该子帧发送传输数据和相应的无线资源配置信息(DAIACTRL)。D2D 接收端在接收到传输数据之后进行反馈。当D2D通信方式为广播通信时，CTS 和ACK的过程将被省略。



-RTS-
-RTS- €TS-
—DATA+DATACTRLT
-ACK-
图3-2自组织网络模式下的D2D通信流程
当D2D通信工作在无蜂窝覆盖的环境下时,D2D网络将由D2D终端以自组 织网络的形式生成。自组织模式的D2D通信流程如图3-2所示。首先，D2D终 端检测同步状态，在确认无基站覆盖后进入自组织模式，通过解析来自其它D2D 终端的专有同步信令获取系统帧号进行系统配置。由于自组织网络下的D2D终 端无需与蜂窝网络进行干扰协同，因此无线资源调度和功率控制机制与混合网络 模式有所不同，而终端发现、中继转发、时域竞争接入、自适应编码调制等流程 则与混合网络模式一致。
3.2 D2D关键技术流程设计
3.2.1同步与系统配置
D2D终端开机后进入初始状态，工作模式和系统帧号均为空。此时，D2D 终端开始利用PSS和SSS参考信号检测当前无线环境中是否存在蜂窝网络的小 区覆盖。
如果成功检测到PSS和SSS信号，D2D终端将与蜂窝基站实现时频域的同 步和校正，完成帧格式的对齐，并启动对小区信号的时频域跟踪。随后，D2D 终端尝试解析基站广播的PBCH消息，以获取当前蜂窝网络的系统帧号，并将 D2D终端自身的系统帧号配置为蜂窝网络的系统帧号。此外，D2D终端尝试解 析基站通过PDSCH广播的系统配置信息(SIB),以获取当前蜂窝网络的小区上下
16
行时序配置，将D2D终端的上下行时序配置设置为与蜂窝系统相同。至此，D2D 终端己完成系统的初始化配置，将自身工作模式设置为混合网络模式，准备进行 D2D数据通信。
在TDD的ETE系统中，为了避免上行链路和下行链路在时间上的混叠，基 站会要求蜂窝终端对上行信号的发送进行20us左右的提前，该提前量会与基站 和蜂窝终端之间的距离有关，准确值由基站通过MAC RAR的Timing Advance Command字段发送给蜂窝终端。由于该提前量已经超过了UE基带信号循环冗 余的持续时间，为了降低干扰，D2D终端在复用PUSCH进行D2D数据传输时 也需要进行相应的发送提前，以保证物理层使用不同时频域资源的OFDM信号 的正交性。由于D2D终端无法截获蜂窝终端的MAC RAR消息，因此如果D2D 终端周围有蜂窝终端，D2D终端将尝试与蜂窝终端进行时域同步以获取精确的 发送提前量，否则将使用20us的系统默认值。
如果D2D终端经过多次测量仍无法检测到有效地PSS和SSS信号，D2D终 端将判定与蜂窝小区同步失败，并尝试检测其周围是否有其它D2D终端存在。 若存在，则D2D终端将与该D2D终端实现时频域同步，完成帧格式对■齐，以该 终端作为同步源进行时频域跟踪，并通过某种信令获取当前D2D网络的系统帧 号，并将自身的系统帧号配置为当前D2D网络的系统帧号；若无其它D2D终端 存在，则D2D终端以当前时间为基准，以默认值为系统帧号建立帧格式。此时， D2D终端完成系统的初始化配置，默认地使用TDD-Configl（平衡配置）作为上下 行时序配置，并将自身工作模式设置为自组织网络模式，准备进行D2D数据通 信。为了给其它D2D终端提供与自身进行同步的同步源，D2D终端将通过一个 携带参考信号的预定义信道定时广播自身终端ID,该定时广播信道的规范将在 3.3节详述。在自组织网络模式下，D2D终端的复用PUSCH的数据传输同样进 行提前发送，但提前量为默认的20uso
工作模式确认后，D2D终端将定时对当前同步源进行检测，若当前同步源 丢失，则D2D终端丢弃当前同步状态，重新进行同步流程。
3.2.2终端发现与中继路由
为实现D2D终端的自主路由功能，本论文引入了面向Ad-hoc网络的开源 分布式路由算法babeld[26]o由于终端发现与广播式路由在实现上的一致性，D2D 终端可以通过路由广播同时完成终端发现和路由表的维护。当D2D终端完成工 作模式的确认后,D2D终端将通过D2D广播信道定时向周围其它D2D终端进行 路由广播。接收到路由广播的D2D终端即可获知该路由广播包的发起者路由可 达的D2D终端列表，并以此为参考维护本地的路由表。在进行点对点数据通信 时，babeld将根据本地路由表生成路由策略。
17
3.2.3时域竞争接入
D2D通信流程引入了同步分时隙CSMA/CA机制进行时域竞争接入，但传 统的CSMA/CA不能满足D2D通信的全部需求，特别是D2D广播通信的需求。 根据D2D业务的特殊需求，本论文方案对竞争接入方式进行了一些定制化，具 体流程如下。
一次D2D数据通信从发送端发送RTS请求开始。D2D终端已完成系统初始 化后，协议栈即可与网络层实现连通，允许网络层向D2D协议栈下发数据进行 发送。当D2D协议栈检测到发送队列非空时，即启动一次RTS请求。设RTS请 求所在的系统无线帧号为n, D2D终端可以通过RTS竞争接入帧号为n+2的无 线帧内的上行子帧，以进行D2D数据传输。每次竞争粒度为一个子帧，即竞争 的D2D终端可以申请只占用该无线帧内的一部分上行子帧资源。
在D2D的点对点通信场景中，D2D通信的接收端在接收到RTS后，在帧号 为n+1的无线帧向发送端发送一个CTS反馈，而接收到该RTS的其它D2D终 端将不再对该RTS指定的时域资源发起竞争。如果D2D通信的发送端收到了 CTS反馈，则一次握手完成，发送端将启动频谱资源探测和无线资源调度，在竞 争接入成功的上行子帧向D2D通信的接收端发送D2D通信数据和解码控制信令; 如果D2D通信的发送端没有收到CTS反馈，则认为RTS发生碰撞或丢失，执行 随机退避算法，尝试稍后重新发起竞争接入。D2D通信的接收端在制定子帧先 接收解码控制信令，根据其中携带的D2D数据传输所使用的频域资源块(RB)和 调制编码信息(MCS),对D2D数据进行解码。若解码正确，D2D终端将解码的 结果通过协议栈上报给网络层，完成一次数据的传输。根据解码的正确与否， D2D通信的接收端将在帧号为n+3的无线帧向D2D通信的发送端反馈ACK或 NACK消息。
由于广播通信中不存在反馈链路，因此在D2D的广播通信场景中，接收到 RTS的D2D终端都是潜在的数据接收者，只需在帧号为n+2的无线帧准备接收 数据，而不需要进行CTS反馈。D2D通信的发送端发出RTS后默认竞争接入成 功，在竞争接入的上行子帧内发送D2D数据和解码控制信令即可。无论解码正 确与否，D2D通信的接收端也都不需要向发送端反馈ACK或NACK消息。
在纯竞争的情况下，如果一个申请广播通信的RTS与其它申请进行广播通 信的RTS发生了碰撞，那么广播通信中RTS发出即默认接入成功的假设将不成 了。为了保证该假设成立，本方案中引入了专用RTS的机制。
RTS请求将被分为RTSO和RTS1两种。其中RTSO是由一个D2D终端专用 的，一个无线帧内专用RTSO的D2D终端由无线帧号、当前D2D网络规模和 D2D终端ID号共同决定，D2D终端可以通过RTSO对点对点通信和广播通信进
18 行竞争接入；所有D2D终端都可以通过RTS1竞争子帧的接入权，但只能通过 RTS1对点对点通信进行资源竞争。由于RTS1的时序在RTSO之后，为了避免 ACK子帧发生碰撞，当RTSO被使用，且用来对点对点通信进行资源竞争时， RTS1被禁用。但在RTSO用于竞争广播通信所用资源时,D2D终端可以通过RTS1 竞争广播通信未占用的剩余子帧。这样的设计不仅保证了广播通信的可行性，同 时，也通过RTSO保证了终端接入的公平性，通过RTS1提高了无线资源的利用 率。此外，专用RTS机制的设置也可以保证D2D网络在节点数量较多时仍然可 以通信，降低了竞争碰撞导致的网络性能损失。
n th frame	n+1 th frame	n+2 th frame	n + 3 th frame	n + 4 th frame


图3-3 D2D通信中的CSMA/CA时序流程实例
图3-3中的绿色、黄色和红色分别表示了三次典型的时域竞争接入过程。绿 色表示通过RTSO占用了第n+2帧的全部四个上行子帧进行的点对点通信，黄色 表示通过RTSO占用了第n+3帧的前两个子帧进行的广播通信，红^^表示通过 RTS1占用了第n+3帧的后两个子帧进行的点对点通信。该图也可以体现 CSMA/CA流程的流程延时，其中D2D终端通过RTSO接入子帧2、3、7、8进 行通信的CSMA/CA流程延时分别是22、23、27、28ms,通过RTS1接入子帧2、 3、7、8进行通信的CSMA/CA流程延时分别是18、19、23、24ms。
3.2.4无线资源调度
时域竞争接入解决了 D2D通信在哪个子帧进行的问题，无线资源调度则是 要解决D2D通信在这个子帧上如何进行的问题。ETE的上行信号使用SC-FDMA 方式，因此子帧内的无线资源选择仅在频域进行即可。因此D2D无线资源调度 需要解决的具体问题包括，通信使用的频域资源选择，以及发射功率和调制编码 速率的确定。在此之前，D2D终端会进行频谱探测和链路测量，为资源选择和 功率控制提供辅助信息。
3.2.4.1频谱探测与链路测量
19
ETE协议规定，在蜂窝上行通信中，基站提前至少4ms向发送上行数据的 蜂窝终端发送其调度信令，指明其发送上行数据使用的频域资源和调制编码方式。 该信令由PDCCH信道的Format 0 DCI承载，而被调度的上行子帧与携带该 PDCCH的下行子帧具有严格的时序确定关系。以TDD config 1为例，对子帧2 和子帧7执行调度的PDCCH提前6个子帧下发，而对子帧3和子帧8执行调度 的PDCCH提前4个子帧下发。该消息的格式如表3-1所示，其中N%为系统上 行带宽。
• ; . •
表 3-1 PDCCH Format 0 DCI
字段内容	字段长度
区分格式0和格式1A的标示	Ibit
PUSCH跳频标示	Ibit
RB资源分配信息	卩。以螺理+1) /糾bit
调制编码方案和冗余版本信息	5bit
新数据指示标示	Ibit
被调度的PUSCH的传输功率控制命令	2bit
PUSCH解调导频的Cyclic Shift值	3bit
上行子帧位置标示	2bit
下行子帧位置标示	2bit
CQI请求标示	Ibit
(CRC+RNTI) mod 2	16bit
当D2D通信的发送端完成对上行子帧的竞争接入后，则会使用盲解码的方 式监听与该子帧对应的PDCCH Format 0 DCI消息，获取蜂窝上行通信对该子帧 上频域资源的占用情况，获取被授权的UEID-RB资源段的映射对，即完成了对 频谱的探测。
D2D通信的链路测量主要包括两个部分，与蜂窝终端之间的链路测量和与 其它D2D终端之间的链路测量。在一些基站集中控制和辅助控制的D2D通信方 案中，链路测量信息可以由基站统一测量，并通过定时广播或提前调度的方式告 知D2D终端。但在本论文当前的设计中，链路测量由D2D终端独立完成。
D2D终端可以通过监听所有的PDCCH Format 0 DCI消息，来获取小区内所 有有上行通信的蜂窝终端的UEID列表。D2D终端对有蜂窝上行通信的子帧进行 频域功率测量，将被同一个蜂窝终端占用的RB上的功率测量结果进行平均，获 得该次传输中该蜂窝终端对自身的干扰水平，以dBm/RB为单位。D2D终端通 过该方式完成与蜂窝终端之间的链路测量，并维护一个UEID-Intf形式的蜂窝终 端干扰水平列表。
如果3.1.1节中D2D终端之间的定时广播信号的发射功率恒定，那么在链路 对称性的假设基础上，D2D终端就可以通过对其他D2D终端发射的该信号的功
20
率测量以估算二者之间的路径损耗，以dB为单位。D2D终端通过该方式完成与 其它D2D终端之间的链路测量，并维护一个D2DID-PassLoss形式的D2D链路 损耗水平列表。
对于未被占用的频谱，D2D通信可以以正交方式占用，对于蜂窝通信巳约 定使用的频谱，D2D通信可以通过一定的干扰管理机制以复用方式占用。干扰 管理机制是影响D2D通信对网络整体性能的最关键因素之一，这里的干扰管理 机制将通过下面的功率控制、自适应编码调制和无线资源选择共同实现。 ETE-Advanced对D2D干扰管理机制尚没有明确的详细规范，出于基站不能对 D2D通信提供额外支持的前提，目前研究中的大部分干扰管理机制并不能在本 论文中实现。本论文对于该功能，使用了文献［27］中提出了基于蜂窝用户链路质 量反馈的分布式D2D干扰管理策略，该方案限制D2D通信对蜂窝用户链路造成 的质量损失，在单次调度中以最大化通信传输能力为优化目标。接下来的几节将 简要描述该策略的思想。
3.2.4.2功率控制
D2D终端可以通过解析PDSCH中的系统消息，来获取蜂窝网络上行链路的 静态工作点和小区CRS发送功率等系统参数，并通过对CRS的功率测量估算基 站与蜂窝终端之间的路径损耗。
对于正交方式的D2D通信，D2D终端的发送功率为：
P/）2D-TX = Min （丹2〃_岫 一 1° l°gio NPRB，^O-PUSCH + 01 •归伽）（3」） 其中为D2D终端射频器件允许的最大发射功率，PQ_plsaf为系统消息 中蜂窝网络PUSCH静态工作点，a为系统消息中蜂窝上行路损补偿因子，PLm 为通过CRS功率测量估算出的基站到D2D终端的路径损耗。
为解决复用方式的D2D通信问题，在该策略中，D2D终端通过对PDCCH 消息中编码速率的监听获取蜂窝用户的链路质量，并引入了惩罚因子戶以降低复 用功率，达到控制D2D复用资源导致的蜂窝终端通信质量的目的。
^D'10-TX =危11 （鸟2〃-max -	^°^10 PKH> ^O-PL'SCH +。,任Z® + 仞（3-2）
3.2.4.3自适应编码调制
ETE PUSCH共有27个MCS级别，级别越高的MCS,其对应的码率也越高。 自适应编码调制解决的是发射功率确定的情况下，数据发送时使用的调制方式和 码率问题，即确定数据发送使用的MCS级别。
在点对点通信中，D2D通信的发送端通过节所述方式估算接收端到 发送端的路径损耗。若发射功率已确定，则发送端可以按照式3-3估算接收端接 收到的信号的信噪比。
21

(3-3)
其中伤为D2D终端的发射功率，切所为D2D通信对之间的路径损耗，% 为链路补偿因子。如果D2D以正交方式使用频域资源，那么血廿为系统基底噪 声；如果D2D以复用方式或复用和正交结合的方式使用频域资源，那么Intf为 被复用资源的蜂窝终端预计对D2D通信造成的总干扰在D2D通信使用的所有 RB上的平均值。发送端可以通过接收端的链路反馈自适应地小范围调节△砍， 以修正链路测量和模型假设带来的误差。
如果所有MCS的接收端解码最低SNR需求SNR心已知，那么对于MCS的 选取算法可描述为：
i = arg max (M3")
(3-5)
TD-ETE系统使用混合自动重传技术增强通信的传输可靠性，并釆用了增量 冗余的软合并HARQ。在点对点通信中，由于CSMA/CA通过ACK提供了 D2D 通信的链路反馈机制，D2D终端也可以引入HARQ技术进行链路自适应。由于 D2D通信的每次分配的资源是不固定的，因此D2D通信与蜂窝上行通信略有不 同，不能使用非自适应HARQ,而是使用了自适应的HARQ,以适应多次传输 中分配的资源量的变化。而在广播通信中，D2D终端无法进行链路测量和链路 反馈，因此广播传输采用一个较低的固定MCS进行传输以保证传输可达，且不 能通过HARQ进行链路自适应。
3.2.4.4无线资源选择
每一个上行子帧在频域可以划分为100个RB,无线资源选择解决的是使用 哪一段连续的RB进行数据传输的问题。由于PUCCH和PRACH与PUSCH使 用相同的时隙，因此D2D通信将主动避开PUCCH和PRACH使用的资源位置， 该资源位置可以通过解析PDSCH中的系统消息获得。由于无线资源选择与功率 控制和自适应编码调制紧密相关，D2D终端在完成PDCCH Format 0 DCI后，会 将连续的不同类型的RB(连续的分配给同一个UEID,或者空闲的RB称为同一 类型)进行组合，对组合后的RB段先后执行功率控制和自适应编码调制，获取 每一个RB段的最大传输能力，并选取最大传输能力最大的RB段为最终使用的 无线资源。为降低系统的运算复杂度，该策略不对同一类型的RB进行拆分。当 传输能力能够满足当前发送需求时，该策略优先选择正交的RB段，以降低对蜂 窝通信的干扰。
22
3.3 D2D专用控制信令与信道映射
3.3.1 D2D专用控制信令
根据对整体流程的设计，D2D终端除了复用ETE自有功能以外，还需要一 些专用的控制信令服务于自组织网络状态和CSMA/CA流程。这些信令包括：
D2D-SYNC信令：即3.1.1节中所述的定时广播信号，终端通过D2D-SYNC 信令定时广播自身的同步状态、终端ID和当前系统帧号，以60bit承载。在自 组织模式下，其它D2D终端可以通过该信令的接收进行时频域同步，并接入已 有的D2D网络。D2D-SYNC信令每次以固定功率进行广播，其它D2D终端可以 通过对携带该信令的物理层参考信号进行功率测量以实现终端间链路测量的目 的，也可以进行终端间的粗同步，补偿D2D终端之间的同步误差和射频器件的 晶振频率误差。

图3-4D2D-SYNC信令格式
D2D-RTS信令：D2D通信的发起者通过D2D-RTS信令发起时域竞争接入。 该信令携带发送方和接收方的IP地址、竞争接入的子帧号，以96bit承载。当接 收方地址为广播地址时，该RTS请求将对应一次广播数据传输。

图3-5 D2D-RTS信令格式
D2D-CTS信令：D2D通信的接收方在接收到D2D-RTS信令后，通过
D2D-CTS信令向发起者进行反馈。该信令携带发送方和接收方的IP地址，以96bit 承载。


图3-6 D2D-CTS信令格式
D2D-DAIACTRL信令：该信令即为D2D通信的发送端进行数据传输时所
23

对应的解调控制信令，D2D通信的发送端将其与要传输的数据在同一子帧发送 给接收方。该信令携带传输数据使用的RB资源的起始位置和持续长度，以及 MCS配置信息。D2D通信的接收端接收到携带该消息的子帧后，首先对该消息 进行解码，然后根据解码所得的数据解调信息，尝试对该子帧内的D2D数据传 输进行解码。

图3-8 D2D-ACK信令格式
以上几种D2D专用控制信令，在MAC层通过D2D-公用控制信道进行管理， 即D2D-Common Control Channel (D2D-CCCH)。这些专用控制信令如果复用ETE 的物理层传输能力进行传输，则有会造成新的干扰，引起系统效率的降低和复杂 性的升高。为了承载这些D2D-CCCH, D2D验证平台在物理层使用ETE协议中 规定的保护边带(Guard Band)传输D2D-CCCH。保护边带原本位于系统频带的两 侧，仅用于对临近频带的隔离，而不实际承载数据，因此使用该部分资源进行数 据传输，不会对蜂窝系统造成显著的干扰。考虑到这些信令的简单性，验证平台 仅使用保护边带两侧靠近系统频带的各5个RB提供D2D-CCCH的物理层承载， 传输时使用卷积码进行压缩，使用CRC对数据正确性进行校验。为了在不同的 小区上下行时序配置下提供对D2D通信的时序支持，本方案规定了各 D2D-CCCH信令与子帧号之间的对应关系：RTS0信令在第一个下行子帧上进行 收发，RTS1信令在第二个下行子帧进行收发，SYNC在特殊子帧上进行收发， CTS在倒数第二个下行子帧上进行收发，ACK在最后一个下行子帧上进行收发， 而DAIACTRL与D2D数据同时发送。以小区工作在TDD-Configl为例，图3-10 给出了子帧号、子帧上下行配置与D2D-CCCH的时序关系。
24
subframe number: | sfnO | sfnl | sfn2 | sfn3 | sfn4 | sfn5 | sfn6 | sfn7 | sfn8 | sfn9 ]
UL/DL config: |D|S|U|U|D |D|S|U|U|D|
D2D-CCCH timing: | RTSO | Sync | D+DC | D+DC | RTS1 | CTS | Sync | D+DC | D+DC | ACK |
图 3-9 D2D-CCCH 时序
虽然传输各D2D-CCCH信令使用的频域资源相同，但为了与其所在子帧的 其它信号形成良好隔离，传输各信令的信号占用的时域符号各不相同。其中,. SYNC信令占用特殊子帧的最后两个符号;RTS信令占用对应子帧的第4~7个符 号，空出前三个符号以避免与下行控制信号之间的干扰；CTS信令占用对应子帧 的最后4个符号，以保证在下行子帧数较少的上下行配置下，RTS和CTS在同 一子帧传输时，二者之间的物理隔离；DATACTRL信令与数据一样使用 SC-FDMA传输，因此占用时域全部符号；ACK则也占用对应子帧的最后4个符 号，以保证在下行子帧数较少的上下行配置下,RTS和ACK在同一子帧传输时， 二者之间的物理隔离。
3.3.2信道映射	：
MAC层
图3-10 D2D信道映射
如图3-10所示，在D2D通信流程中，D2D通信的协议层逻辑信道包括承载 D2D点对点通信的D2D-DTCH信道、承载D2D广播通信的D2D-MTCH信道和 承载D2D控制信令的D2D-CCCH信道。D2D-CCCH映射到上一节中专用的物 理层D2D-CCCH信道，而D2D-DTCH和D2D-MTCH则可以映射到物理层的 PUSCH信道，D2D终端的物理层除了额外的D2D-CCCH处理能力外，只需在 蜂窝终端PUSCH发送功能的基础上，额外提供对PUSCH信道的接收能力，即 可为D2D通信所需的逻辑信道提供物理层承载。此外,D2D终端需要对PBCH、 PHICH、PDCCH和PDSCH信道进行解码以获取必要的系统参数和辅助信息， 而蜂窝终端已经具备对这些信道的基本处理能力，只需在其基础上稍作修改，即 可完成对本方案中的D2D通信的全部物理层支持。
25




























































26


第四章 D2D验证平台软件系统设计
本章将介绍D2D验证平台的软件系统架构，在基于通用处理器的软件无线电 平台上实现了第三章中所述的D2D通信流程。系统的软件部分依照协议的层级结 构设计为层2、层1和层0三层，本章将首先介绍系统的整体设计，之后自上而 下介绍各层的详细设计。系统的性能介绍和功能演示效果将在第六章进行介绍。
,-• - - •• 一 -..
4.1整体设计
D2D验证平台系统基于通用软件无线电平台(USRP)和通用处理器(GPP)设计 实现，GPP服务器为使用Linux操作系统的64位多核服务器，软件系统由C/C++ 语言编写完成。USRP完成系统射频端的处理，而基带信号的处理和协议栈的处 理则由GPP服务器上的软件系统实现。除了物理层和协议栈处理外，该软件系统 还提供与网络层的数据接口以支持业务，提供监控接口以支持可视化数据监控平 台O
USRP提供了通用硬件驱动(UHD)作为软件无线电平台中与软件部分的通用 通信接口。GPP服务器与USRP通过该接口，使用千兆以太网交换接收和发送的 数据流以及必要的少量控制信息。USRP器件的基带釆样率为25MHz,每个釆样 值包括正交的I、Q两路，每一路由一个16位有符号数标识。因此USRP和GPP 服务器之间单向数据流码率约为25M*2*16=800Mbps,而必要的控制信息每秒只 产生几KB量级的数据流，因此千兆以太网可以满足系统对射频前端和服务器之 间的传输需求。
为了与OSI和ETE的协议体系结构一致，D2D验证平台系统被设计为具有 自上而下层2、层1和层0的三层结构，如图4-1所示。其中层2为D2D终端的 协议栈，实现了与ITE协议类似的RLC层、支持CSMA/CA流程的MAC层、用 于无线资源调度的无线资源管理(Radio Resource Manager, RRM)实体，以及与网络 层的数据接口层；层1为D2D终端的物理层，实现了 3.3.2中所述的物理层信道 功能，为层2提供业务数据传输、控制数据传输、测量等服务；层0对UHD的 一些接口进行了封装，向物理层提供数据收发的服务，由于USRP器件的釆样率 与ETE基带信号采样率不匹配，层0还提供了采样率转换的功能支持。
27



图4-1 D2D验证平台系统及软件架构图
D2D验证平台软件系统内部使用ZeroMQ进行层间以及层内模块间的消息传 递。ZeroMQ是一个开源的高性能异步消息传递组件，可以实现进程间和进程内 的线程间通信。ZeroMQ提供的通用API封装了包括TCP、Unix套接字等常用的 进程间通信，并进行了数据粒度均衡等优化。对于线程间通信，ZeroMQ则以无 锁消息队列的形式实现，并提供了与进程间通信相同的通信接口。D2D验证平台 软件系统在ZeroMQ的基础上进一步封装，为相似的通信需求提供统一的接口， 保证了消息传递的规范性。这些接口规范将在本章下文详细说明。
在系统实现中，层0是一个独立的进程，层1和层2归属同一个进程。两个 进程分别包含若干独立的线程，本章下文将对这些线程的实现机制进行说明。
系统通过一个基于Web的参数可视化平台实时对系统的工作状态和参数进 行监控和调整，该平台使用Nodejs与D2D验证平台的协议栈进行通信，使用 canvas进行图表的绘制。该平台的具体实现不在本文的介绍范围内，但第六章中 的部分演示效果将基于该平台给出。
28
4.2层2设计
层2是D2D验证平台软件系统的协议栈部分。协议栈部分的基本功能是，将 基于IP的业务数据与D2D物理层及以下提供的传输服务进行对接。具体功能包 括：
1、与物理层的通信接口 ..2、与网络层的通信接口 .
3、	数据的拆包与重组
4、	CSMA/CA流程的管理
5、	HARQ功能的实现
6、	系统消息和测量信息的处理
7、	无线资源调度功能的实现
8、	路由策略的提供
9、	演示平台数据源的提供
ETE的协议体系已经实现了功能1、2、3、5,其中，MAC层［明实现了功能 1和5, RLC层〔29］实现了功能3, PDCP层〔3°］实现了功能2o本论文中D2D协议 栈部分也沿袭了 ETE协议栈PHY-MAC-RLC层的体系结构，但相比于ITE, D2D 协议栈部分进行了一些结构性和功能性的修改。
首先，由于不需要接入核心网，也不与基站进行真正的接入、鉴权、链路控 制等信令交互，D2D协议栈不对ETE协议栈中的RRC层进行实现。同时，D2D 协议栈中增加了一个RRM实体，以实现分布式自主无线资源管理功能
第二，D2D协议栈的MAC层增加了对CSMA/CA流程管理的功能支持，并 将HARQ功能嵌入CSMA/CA流程中，同时还取消了不需要的下行业务信道数据 传输等功能。
第三，在ITE系统中，PDCP层的主要功能是对IP包头进行数据压缩，并维 护无线承载的序列号。本论文为了简化系统设计，没有进行包头压缩，也没有根 据业务建立无线承载。D2D协议栈中的“无线承载”是与通信的D2DID相对应 的，即在一个ITE终端中，D2D网络内的每一个其它D2DID都对应着两个接收 RLC实体和一个发送RLC实体，两个接收RLC实体分别处理来自该终端的点对 点通信数据和广播数据，而不同业务来源的数据则不作区分地混合在一起。因此， D2D协议栈中使用一个IP接口层取代了 ETE的PDCP层，通过虚拟网卡TUN实 现了操作系统网络层与协议栈RLC层的对接。此外，该层还通过集成开源路由软 件babeld实现了自主路由和中继转发功能。
至此，D2D协议栈中各层级与本节中提到的9个功能的对应关系为，MAC 层实现功能1、4、5, RLC层实现功能3, IP接口层实现功能2、8, RRM实体
29
实现功能6、7。而功能9则由所有需要进行监控的层级共同提供。
若以驱动方式进行区分，D2D协议栈要实现的功能可分为两种，即时序驱动 和消息驱动。时序驱动是指系统的该行为由时间触发，比如在预定的子帧向物理 层下发发送数据的指令；而消息驱动是指系统的该行为由消息的接收触发，比如 接收来自物理层的信息上报和接收来自网络层的数据下发等。操作系统的非硬实 时性决定了协议栈无法通过操作系统获取微秒级别精度的定时中断，但USRP的 硬件部分则可以提供系统所需的定时精度。本系统通过对UHD的封装，可以在 层0实现1毫秒1次的精确时钟节拍，并以消息的形式上报给层2。于是，时序 驱动也可以通过消息驱动的形式实现。
至此，整个D2D协议栈就可以以消息处理机的形式进行组织，其需要处理的 消息可以分为4类：
Heartbeat Msg：层0向层2提供的每毫秒1次的定时信号，用于触发协议栈 时序驱动的任务。
Sched Msg：协议栈需要处理的时序驱动的任务描述，主要是协议栈向物理层 下发数据的操作。
Core Msg：协议栈需要处理的消息驱动的任务的驱动源，主要是物理层向协 议栈上报的数据。
Display Msg：协议栈向演示平台提供数据服务的载体。
以上4类消息中，对前3类消息的处理即构成了 D2D协议栈的运行流程，如 图4-2所示。在收到Heartbeat Msg后，协议栈由Heartbeat等待模式唤醒，检查 Sched Msg队列和Core Msg队列，并对相应任务进行逻辑处理。
Display Msg产生于对其它消息的处理过程中，因此D2D协议栈可以在脱离 Display Msg正常运行。
Heartbeat(Ims/time)


图4-2 D2D协议栈消息处理的状态机模型
出于系统一致性和可扩展性的考虑，Sched Msg和Core Msg具有固定的消息
30
头格式，这样就可以为其处理提供统一的接口，即Sched_msghandler和Core msg handler,不同的Sched Msg和Core Msg使用消息头中的Type格式进行区分。
Core Msg消息由32字节的消息头和不定长度的消息负载组成，其格式如表 4-1所示。
表4-1 Core Msg消息格式
字段名	字段意义	字段长度
Send Time	消息写入协议栈Core Msg队列的时间	8byte
Type	消息类型编号	.	〔	Ibyte
Frame Number	携带消息的子帧的第一个采样值被USRP接收的 物理层时间戳，用于系统处理时间的测量	2byte
Subframe Number	携带消息的子帧的子帧号	Ibyte
HWTime	携带消息的子帧的第一个采样值被USRP接收的 物理层时间戳，用于系统处理时间的测量	8byte
PHY Start Time	物理层开始对携带该消息的子帧进行处理的物理 层时间戳，用于系统处理时间的测量	8byte
Payload Len	消息负载的长度	4byte
Payload	消息负载	由 Payload Len 指定
由于Sched Msg涉及到物理层发送，因此Sched Msg在格式上比Core Msg 多了一个Config字段，用于在进行业务信道发送时，传递配置物理层发送数据时 使用的编码调制信息。此外，Sched Msg也不需要Core Msg中提供时间测量的字 段。因此Sched Msg包含一个16字节长的消息头，一个可选的Config字段以及 不定长的消息负载，其格式如表4-2所示。
表4-2 Sched Msg消息格式
字段名	字段意义	字段长度
Send Time	消息由调度器传递到物理层的时间	8byte
Type	消息类型编号	Ibyte
Frame Number	执行调度的子帧所在无线帧号	2byte
Subframe Number	执行调度的子帧的子帧号	Ibyte
Config&Payload Len	指定Config和消息负载字段的总长度	4byte
*Configuration	指明物理层发送时使用的MCS配置信息	20byte
Payload Len	消息负载的长度	4byte
Payload	消息负载	由 Payload Len 指定

可选的Config字段由两部分构成，包括：
1、	TxJD： 1字节，数据发送方的D2D终端ID
2、	Rx_ID： 1字节，数据接收方的D2D终端ID
3、	processID： 1字节，本次传输对应的HARQ进程ID
4、	rv： 1字节，本次传输的HARQ冗余版本
5、	RB_Start： 1字节，本次传输所使用的资源块的起始位置
6、	L_RB： 1字节，本次传输所使用的资源块的数量
31
7、	Qm： 1字节，基带信号调制方式，支持QPSK, 16QAM, 64QAM
8、	TBSize： 4字节，本次传输对应的MAC层TB块大小
9、	DataLen： 4字节，待发送数据中的有效负载长度
4.2.1IP接口层设计
在以太网链接的网络中，网络层以下的数据通信由以太网的数据链路层和物 理层完成。IP数据包从网络层下发后的处理通常由操作系统的以太网协议栈完成, 用户并不需要了解其中的细节。为了将服务器上的基于IP的业务数据与D2D验 证平台系统打通，本论文在D2D协议栈与操作系统网络层之间设立了 IP接口层， 使用Linux系统提供的一种虚拟网卡程序TUNCTL模拟网络设备.，在发送端调用 TUN接口将IP数据包从网络层读取到D2D协议栈的缓冲区，在接收端将接收到 的IP数据包通过TUN接口传递到网络层。此时，网络层以下的数据通信将由D2D 验证平台系统替代以太网实现，而底层实现的区别则对于网络层及其以上的业务 是透明的。
在使用虚拟网卡时，需要在用户程序中将虚拟网卡与IP地址绑定，之后就可 以通过该设备与网络层进行通信。每个D2D终端只需配置一个与D2D通信使用 的IP地址进行绑定的TUN实体，即TunDevice。其主要接口包括：
表4-3 TunDevice主要函数接口
函数接口定义
TunDevice 0 〜TunDevice Q push_j)acket (const char *in_packet, intbufi^_len) pull packet (char *out packet, intbuff_len)
其中，构造函数TunDevice()用于建立TUN对象，并实现了虚拟设备与IP地 址的绑定操作。push_packet()和pull_packet()函数分别由RLC层的接收端和发送 端调用，用于向网络层提交接收到的数据，和从网络层读取要发送的数据，如图 4-3所示。
Operating System
，'push_packet () pull_packet()
D2D Stack RLC
图4-3 TUN功能示意图
除了使用虚拟网卡技术实现与网络层的连通外，IP接口层还在网络层引入 Babeld协议实现自主路由和中继转发的功能。Babeld是一个基于AODV的，面 向Ad-Hoc网络的开源路由协议［26J,与D2D通信的场景相符合。它可以以一个用
32
户进程的形式存在，管理一个网卡设备的路由，本论文中就将其与D2D设备的 TunDevice绑定。其基本思路是，通过与其绑定的网卡定时发送携带其路由表的 路由请求报文，邻近终端收到该请求后，更新自身的路由表，并向其发送路由回 应。Babeld可以通过丢包率与延时对链路的质量进行估计，并在此基础上生成一 定的路由策略，覆盖操作系统自身的路由机制，反映在IP数据包的下一跳地址上。 例如，在A和C之间的链路延时为10000,而A和B、B和C之间的链路延时为 100,那么当一个IP数据包将从A发送到C时，终端A协议栈的Babeld将以C 作为该数据包的目的地址，以B作为该数据包的下一跳IP地址。当该IP包到达 TunDevice时，路由决策已经完成，因此，D2D协议栈只需在创建TunDevice时 将其与一个Babeld.进程绑定，即可由Babeld实现自主路由和中继转发功能，如 图4-4所示。
APP
1
I
I
Babeld	*
IP ad*reMs	| IP packages

Routing Table	TUN
Routing broadcast package
图4-4 babeld功能
4.2.2RRM实体设计
如第三章所述通信流程，本论文中一子帧业务数据的发送使用的发射功率、 使用的频域资源、调制方式以及编码速率均由D2D终端的RRM实体分布式地确 定。根据需求，RRM实体的功能可以分为两大部分，即链路测量信息的维护和数 据发送控制参数的确定。这两部分的内容都与系统使用的干扰管理算法密切相关o 为了方便系统在日后的研究中应用不同的干扰管理算法，甚至能在有基站额外辅 助的条件下工作，本论文将参数生成的逻辑抽象成了几个通用的逻辑步骤，使其 可适用于使用相同D2D通信流程的其它干扰管理算法。
目前本论文中所使用的策略如节所述，使用到的链路测量信息和维护的 链路控制参数包括：
33
表4-4 RRM链路测量信息与链路控制参数
参数意义	数据格式
与蜂窝基站间的路径损耗	value
蜂窝基站规定的蜂窝上行用户静态工作点	value
蜂窝上行通信链路补偿因子	value
无线环境基底噪声	value
与其它D2D终端之间的路径损耗列表	map<D2Did, passloss>
蜂窝用户单位资源基准呑吐量列表	map<cellueid, throughpht>
蜂窝用户单位资源实时吞吐量列表	map<cellueid, throughput>
复用不同蜂窝用户资源时使用的功率惩罚因子列表	map<cellueid, B>
与其它D2D终端之间通信的链路补偿因子列表	map<D2Did, A>
上行子帧上的蜂窝用户上行通信授权列表	map<fn, vector<struct rb pair> >
其中，rb_pair是RRM为了描述RB段所定义的一个结构体，包含RB段的起 始位置，长度，该RB段内资源被复用的蜂窝上行用户的ueid列表，以及该RB 段内，蜂窝上行用户可能对D2D用户造成的干扰的估计值。
数据发送控制参数的确定，包括发送功率、使用的RB段的起始位置和持续 长度、对应的MAC层TB块大小、调制方式、HARQ的RV版本、使用的IMCS 编号。RRM定义了一个结构体rmjnfo_t以包含以上参数。一次无线资源调度即 生成一个对应的rm_info_t，因此RRM提供了一个总的接口为generate_rmJnfoO， 返回与对应子帧相对应的资源调度结果。在执行时，generate_rm_info()被业务数 据发送函数调用(见4.2.4节)，首先检查对应子帧的RB资源被蜂窝上行通信的占 用情况，调用available_rb()函数生成若干个候选的连续RB段，在每一个候选RB 段上先后执行powerctrl_openloop()确定发送功率，执行mcs_select_openloop()确定 调制编码方式(IMCS),获取该方式下TB块的大小，即物理层能够承载的MAC PDU的比特数。其中TB块的大小由RB段的长度和IMCS共同决定。
在当前策略下，若使用正交资源的策略能够发送缓冲区内全部数据，则不使 用复用策略，否则选取所有RB段上能提供最大TB块的RB段及其方案为本次无 线资源调度的结果。这一部分逻辑在generate_rm_info()函数内实现。
RRM实体提供的主要接口如表4-5所示。除了本节之前提到的几个接口外， powerctrl_closeloop()由对蜂窝用户链路的测量模块调用，用于更新复用不同蜂窝 用户资源时使用的功率惩罚因子列表；mcs_select_closeloop()由HARQ实体在其 接收链路反馈结果时调用，用于更新与其它D2D终端之间通信的链路补偿因子列 表。
34
表4-5RRM主要接口
函数接口定义
generate_rm_info(int fn, int rxid, int pdu_len) available_rb(int rxid) powerctrl_openlo0p(iiit delta) powerctrl_closeloop(int cellueid) mcs_select_openloop(int p_tx, int rxid) 	 —
mcs select closeloop(int rxid)
4.2.3RLC层设计
不论是对于蜂窝终端还是D2D终端，在每一子帧的传输过程中，MAC及以 下层经过RRC或RRM实体调度所提供的传输能力，不一定能与来自业务层的IP 数据包的长度实现良好匹配。这就需要协议栈根据底层传输能力对IP数据包进行 分段和级联的操作。当底层传输能力可以传输多个IP数据包时，RLC层可以将 这些IP数据包组成大的RLCPDU进行发送，由接收端拆解后分别上报；当底层 传输能力只能传输一个IP数据包的一小部分时，RLC层可以将这个IP数据包根 据底层传输能力进行拆分，通过多次发送完成传输，由接收端按序组强后上报。 相比于一次传输发送一个IP数据包的策略，RLC层分段级联的机制保证了底层 提供的传输能力不会因为单个IP数据包长度过小而浪费,也保证了长度较大的IP 数据包在传输过程中不会因为底层提供的传输能力不足而丢失数据。


图4-5 RLC数据分段和级联操作示例
虽然ETE系统的帧号是顺序的，但是由于HARQ机制，一个子帧可能在多 次传输后才被正确解码，因此多个子帧被正确接收的顺序可能与发送时不同。甚 至当HARQ机制也无法保证数据正确有效传输时，这一子帧的数据甚至可能丢失, 这就要求RLC层提供数据包按序到达高层的保证。为此，RLC层的接收端维护 了一个重排窗口和一个重排定时器。当重排定时器超时时，RLC层判定该 RLC-PDU发生丢失，丢弃该PDU并将重排窗口后移。
ETE的协议体系结构中，RLC可以根据业务需求的不同提供3种工作模式， 即透明模式(TM)、非确认模式(UM)和确认模式(AM)。其中，TM模式的RLC只 对数据进行包头的增加和去除，不支持分割和级联，只适用于系统信令的传输， 而不适用于数据的传输；UM模式的RLC支持分割、重组和按序传递，不支持
35

RLC级别的重传，适用于对时延要求敏感，而对正确性要求不很高的业务；AM 模式的RLC不仅支持分割、重组和按序传递，也支持RLC级别的重传，适用于 对正确性要求高，但对时延要求不很敏感的业务。为了降低系统复杂度，本论文 在D2D验证平台的软件协议栈中只实现了 UM模式的RLC,对于TCP类型的业 务，重传将由操作系统实现。
本系统中RLC层的行为与文献［29］中规定的UM RLC行为基本一致，RLC PDU的格式也与EIE的UM RLC PDU格式类似，不同的是使用了 UM RLC pDU 格式中预留的3个bit表示该RLC PDU的来源。RLC PDU格式如图4-6所示：
TXID	FI E SN
SN
Fl	LH
~LH	E	LlT~
LI2
DATA
图4-6 RLC PDU格式
在D2D验证平台的实现中,RLC层根据数据流向被分为TX和RX两个部分。 根据本节开头所述，本论文中D2D协议栈的“无线承载”与D2DID对应而非如 ETE协议中与业务对应。如无特殊说明，本节下文中的“无线承载”特指与D2DID 对应的无线承载。
4.2.3.1 RLCTX
RLCTX工作在链路的发送端，对上层调用IP接口层的数据读取接口获取高 层数据，根据目的IP地址进行放入不同的发送等待队列，并报告等待队列的缓冲 情况；对下层实现对数据的分割級联和PDU组装，将IP数据包重组成RLC PDU 提供给MAC层。其提供的主要函数接口如表4-6所示：
表4-6 RLCTX主要接口
函数接口定义
get buffer status 0
pull buffer (size t req bytes, char *dest)
refill_buffer_loopO
RLC TX对MAC和RRM提供get_buffer_status()接口以实现发送队列缓冲报 告。MAC层通过检查发送队列是否为空决定是否启动RTS发送，待发送数据量
36
大小则会影响RRM单次发送时资源调度的策略。
RLC TX对MAC提供pull_buffer()接口实现对发送队列数据的访问。当一个 子帧的资源调度完成后，RRM决定本次传输中能发送的数据负载量，RLCTX执 行调用该接口从发送队列获取相应长度的数据，进行数据包的拆分和合并，添加 RLC包头组成RLC PDU,提供给MAC作为MAC SDU。
RLC TX通过refill—buffer_loopO接口调用IP接口层提供的服务，获取高层要 发送的IP数据包。为了避免系统逻辑引入额外的系统延时，这个服务通过另一个 线程以异步方式实现，并通过互斥锁实现了对数据缓冲区的同步。
RLC TX接口的功能如图4-7所示。

图4-7 RLC TX接口功能示意图

4.23.2 RLC RX
RLCRX工作在链路的接收端，对下接收来自MAC层的数据，根据RLC的 序号机制完成超时检测和乱序重排；对上将数据进行分割级联和PDU解包，将数 据还原成完整的IP数据包递交给高层。其提供的主要函数接口如下：
表4-7 RLC RX主要接口
函数接口定义
reassemble。
commit(const char *mac sdu, const int size)
schedule()
RLC RX的commit。函数由MAC的数据上报触发。RLC RX通过commitQ 接口与MAC层对接，接收来自MAC的SDU,并根据RLC帧号和其来源将其放 入相应的RLC RX的重排队列。如果重排队列中没有需要等待的RLC帧，则准备 进行数据上报。如果重排队列中新出现了需要等待的RLC帧，则启动重排定时器。
37
RLCRX的schedule。函数由Heartbeat消息在系统的每个时钟周期触发。RLC RX通过schedule。接口检查RLC RX的重排定时器是否超时。若定时器已超时， 则认为重排窗口中最左侧的RLC帧已丢失，将重排窗口前移,并关闭重排定时器。 若移动后的重排队列中没有需要等待的RLC帧，则准备进行数据上报，否则重新 启动重排定时器。
RLC RX的reassemble。函数可以由commit。函数和schedule()函数调用。 reassemble。函数实现数据包的拆分和重组，去掉RLCPDU的包头，将数据还原 为IP数据包并提交给高层。其详细机制与ETE中的RLC协议相同。
RLC RX接口的功能如图4-8所示。

图4-8 RLCRX接口功能示意图

4.2.4MAC层设计
D2D系统的CSMA/CA流程是LTE协议中所没有的，该部分功能由D2D协 议栈的MAC层管理，包括RTS、CTS和ACK信令的发送和接收、业务数据及其 随路控制信令的传递等。如3.3.2节所述，MAC层通过简单的数据分发实现了逻 辑信道到物理信道的信道映射：对于业务数据，MAC层与RLC层对接并向RLC 层提供数据传输服务，给RLC PDU增加一个简单的包头以形成MAC帧作为物理 层PUSCH的负载；对于控制信令，MAC层将根据流程需要独立生成并下发到物 理层相应的D2D-CCCH信道。
LTE协议中的MAC层具备HARQ功能，但其反馈是通过基站与蜂窝用户之 间的一些专用信道，如PUCCH等完成的。D2D通信流程中，CSMA/CA的ACK 信令可以代替这些专用信道完成链路的反馈，因此D2D协议栈中的MAC层可以
38 通过HARQ进行链路的自适应。
从功能上进行区分，D2D协议栈的MAC层可以分为RTS控制器、CTS控制 器、DAIA控制器和HARQ控制器四个模块。
4.2.4.1 RTS 控制器
RTS控制器负责对RTS信令的发送和接收处理，其提供的主要函数接口如下： 表4-8 MAC RTS控制器主要接口
.：	函数接口定义	：
send rtsO(int fn)
send rtsl(int fn)
reev rtsO(const char * const header, int fn)
recv_rtsl(const char * const header, int fo)
RTS控制器的发送操作由Heartbeat Msg在指定的TTI触发，如果RLC层发 送缓冲队列非空或HARQ要求数据重传，且RTS控制器没有在进行RTS碰撞退 避，则根据子帧号以及D2D-CCCH时序调用send_rtsO()和send_rtsl()生成发送 RTS0或RTS1的SchedMsg,并下发到物理层。特别地，RLC的广播数据发送缓 冲队列非空时，只能触发RTSO的发送。若发送的RTS申请了一次点对点通信, 则RTS控制器通知CTS控制器在下一无线帧接收该RTS的反馈CTS；若发送的 RTS申请了一次广播通信，则RTS控制器通知DATA控制器准备在两个无线帧后 发送数据。
39


图4-9 RTS发送处理逻辑
RTS控制器的接收操作由来自物理层的RTS上报的Core Msg触发。RTS Core Msg的负载部分除如图3-5所示的RTS信令以外，还携带一个CRC校验位。如 果接收到的RTS申请了一次点对点通信，且接收者为自己，那么RTS控制器将 告知CTS控制器准备发送CTSO,并告知DAIA控制器在下下无线帧接收数据。 接收到的RTS申请了一次广播通信，那么RTS控制器通知DAIA控制器准备在 两个无线帧后接收数据。
40

准备反馈CTS,准 备接收点对点数据

图4-10 RTS接收处理逻辑
4.2.4.2 CTS 控制器
CTS控制器负责对CTS信令的发送和接收处理，其提供的主要函数接口如下: 表4-9 MAC CTS控制器主要接口
函数接口定义
send(int fn)
recv(const char * const header, int msg len)
CTS控制器的发送操作由Heartbeat Msg在指定的TTI触发，如果CTS发送 队列非空，则根据子帧号以及D2D-CCCH时序调用send。生成发送CTS的Sched Msg,并下发到物理层。发送完成后，CIS控制器告知DATA控制器在两个无线 帧后接收数据。
41

图4-11 CTS发送处理逻辑
CTS控制器的接收操作由来自物理层的CTS上报的Core Msg触发，执行recv() 函数。CTS Core Msg的负载部分除如图3-6所示的CTS信令以外，还携带一个 CRC校验位。如果CTS接收结果校验正确，CTS控制器将告知RTS控制器竞争 成功，并告知DATA控制器在两个无线帧后发送数据；如果CTS接收结果校验错 误，CTS控制器将告知RTS控制器竞争失败，由RTS启动碰撞退避功能。
接收到CTS
二处“用宜命;、 木一认定碰撞，执行退
、校验结果正枷？. >—杏》	避算法
......—…-
T
/建否指定自己为接、、 不亠 壬古宕
收端？ /―否十丢弃该E
'、、、/ — 'Y
是
准备发送点对点数据
图4-12 CTS接收处理逻辑
4.2.43 DATA 控制器
DATA控制器负责业务信道的发送和接收处理，以及随路的DAIACTRL控制 信令的发送、接收与配置，其提供的主要函数接口如表4-10所示：
42

表4-10 MAC DAIA控制器主要接口
函数接口定义
send(int fn)
recv(const char * const header, int msgjen)
DATA控制器的发送操作由Heartbeat Msg在指定的TTI触发，如果DATA控 制器之前已经收到来自RTS控制器或CTS控制器发出的发送准备指令，则调用 send。函数进行发送数据的准备。如果发送的是新数据，则从RLC层发送队列当 前的缓冲区数据量，调用RRM接口执行调度获取rmjnfo,生成发送功率、占用 RB的位置和调制编码方式，根据TBSize长度确定将要发送的MAC SDU大小, 并从RLC缓冲区中读取这些数据,并放入HARQ重传队列预备可能发生的重传。 如果发送的是HARQ的重传数据，则从HARQ重传队列中获取待发送的数据， 调用RRM接口执行调度获取rm_info,但只使用其发送功率和占用RB的位置，使 用HARQ第一次传输使用的调制编码方式。之后DAIA控制器将MAC SDU复制 到Sched Msg的Payload字段，并下发到物理层。DATA控制器的Sched Msg携带 Config字段，格式如4.2节所示。



图4-13 DATA发送处理逻辑
43
DAIA控制器的接收操作由来自物理层的DATA上报的Core Msg触发，执行 recv()函数。DAIACore Msg的负载部分除如图3-7所示的DAIACTRL信令以外， 还携带一个CRC校验位。如果物理层解码的CRC校验正确，recv()函数将调用 RLC的commit。函数，将去掉MAC头的RLC负载发送到RLC层接收端。根据 物理层解码的正确与否，DAIA控制器更新链路测量信息。如果接收到的这一子 帧传输的不是广播数据，则DAIA控制器告知ACK控制器在下一无线帧发送 ACK/NACK 反馈。

图4-14 DAIA接收处理逻辑
4.2A.4 HARQ 控制器
HARQ控制器负责ACK信令的发送和接收处理，并根据ACK接收的结果正 确与否，进行一系列的HARQ流程管理。其提供的主要函数接口如表4-11所示：
44
表4-11 MAC CTS控制器主要接口
函数接口定义
send(int fn)	*
recv(const char * const header, int msg len)
proc ack(int fn , int crcflag, int rxid)
pushjprocess(harq process info t* p j)rocinfo, int n, bool sent)
pull_process(int rxid, harq_process_info_t& p_procinfo)	!
HARQ控制器的发送操作由Heartbeat Msg在指定的TTI触发，如果HARQ 控制器之前已经收到来自DATA控制器发出的发送准备指令，则调用send。函数 发送ACK信令。其中，一次ACK信令可以对应多个上行子帧的传输。

图4-15 HARQ发送处理逻辑
HARQ控制器的接收操作由来自物理层的ACK上报的Core Msg触发，执行 recv°函数，解码其中的ACK结果并执行proc_ack()函数。ACK Core Msg的负载 部分除如图3-8所示的ACK信令以外，还携带一个CRC校验位。若ACK反馈 结果正确，HARQ控制器将对应的子帧从HARQ重传发送队列中弹出，确认此次 发送完成；若ACK反馈结果为错误，且重传次数未到上限，则HARQ控制器开 启对该子帧的重传，准备重新发起竞争接入；若ACK反馈结果错误，且重传次 数达到上限，则HARQ控制器放弃对该子帧的重传。
45




图4-16 HARQ接收处理逻辑

4.2.4.5 SYNC 控制器
SYNC控制器负责SYNC信令的发送和接收处理，并协助协议栈维护终端的 同步状态oSYNC信令的发送操作由Hearbeat Msg在指定的TTI触发，生成SYNC Sched Msg并下发到物理层;接收操作由物理层的SYNC_recv Core Msg±报触发， 由协议栈更新周围发送SYNC的D2D终端列表。SYNC_recv Core Msg的负载部 分除如图3-4所示的SYNC信令以外，还携带一个CRC校验位。
4.3层1设计
层1是D2D验证平台软件系统的物理层部分。物理层部分需要完成基带信号 的大部分信号处理运算，向协议栈提供数据收发和信令交互的服务。具体功能包 括同步状态的建立与维护、对来自基站的系统消息的解码、对D2D-CCCH信道的 发送和接收、对PUSCH信道的发送和接收等。这些功能根据数据流向可分为接 收链路和发送链路两个部分，本节将分别对接收链路和发送链路的功能进行介绍。 大部分物理层模块的算法已于本论文开始之前在其他研究中实现，本论文仅根据 论文需要对其进行整合，其中各信道模块的信号处理算法的具体实现不在本文的 介绍范围内。
46
4.3.1接收链路设计
物理层的接收链路从L0获取流式的接收数据并进行缓存，进行同步并根据 同步结果建立TDD ETE的帧格式。在同步状态已经建立，系统帧号已经配置的 情况下，物理层接收链路以子帧为基本单位读取接收到的数据，根据上下行配置 和协议栈配置，调用不同的物理层信道处理函数进行信道解码。根据3.2节的描 述，物理层的接收链路主要包括同步模块、PBCH模块、PDCCH盲检测模块、
. - ; .. PDSCH模块、D2D-CCCH模块和PUSCH模块。
从使用的线程资源来看，物理层接收链路包括一个接收主线程，一个同步线 程，一个PDSCH解码线程，三个PUSCH解码线程，两个PDCCH解码线程，以 及一个同步状态监听线程。其中，同步状态监听线程不进行信道的解码，其功能 是在同步状态已经建立的情况下，定时监听D2D终端当前同步源是否还存在，并 进行必要的重同步或同步切换。接收主线程实现数据的缓存、帧格式的维护与数 据读取、各个信道处理中处理时延较小的信号处理模块以及D2D-CCCH的解码操 作，其它信道解码线程接受来自接收主线程的数据分发，进行其独立的信道解码 操作。	-
主线程提供的信道公用的一些信号处理单元包括：
表4-12 PHY接收链路通用功能接口
函数接口定义	-
DeFrontEndO
ChanEst()
ChanEster();	3
Equalizer。
IDFT()
PUSCH__DeIntlv_demuxO；
其中，DeFrontEndO函数用于ETE下行信道接收流程中的去CP和去 GuardBand操作，ChanEstQ函数用于对LTE下行信道的信道估计。ChanEsterQ 函数和XEqualizer()函数分别用于PUSCH信道接收流程中的信道估计与信道均衡, IDFT()函数用于PUSCH信道接收流程中的IDFT变换，PUSCH_DeIntlv_demux() 函数用于PUSCH信道接收流程中的解交织。
4.3.1.1同步模块
物理层的同步功能模块由接收主线程和同步状态监听线程共同实现。由接收 主线程维护D2D终端当前的同步状态。其提供的主要函数接口如表4-13所示：
47
表4-13 PHY同步功能接口
函数接口定义
CellSearch(CellSearchOut t *CellSearchOut) UlSyn_subRsSearch(CellSearchOut_t *RsSearchOut)
物理层使用CellSearchO函数和UlSyn_subRsSearch0函数进行蜂窝小区搜索 和D2D网络搜索，其输入数据均为帧格式未对齐的一个无线帧，分别通过 CellSearchOut和RsSearchOut结构体传出同步结果。若终端当前由于刚刚开机或 发生切换处于未同步状态时，主线程启动其同步功能，调用CellSearchO函数以尝 试与蜂窝小区基站信号同步。若小区搜索多次失败，终端则放弃与蜂窝小区进行 同步，开始调用UlSyn_subRsSearchO函数以尝试与其它D2D终端信号同步。若 D2D网络搜索也多次失败，终端则放弃与其它信号源进行同步，以当前时间作为 时间基准建立帧格式进行信号的接收与发送。
若终端当前已经处于已同步状态，则主线程不再进行同步尝试，转而由同步 状态监听线程每秒钟调用CellSearchO函数和UlSyn_subRsSearch0函数以检测终 端当前的同步源是否仍存在，若同步源发生了丢失，则终端将中断当前的物理层 和协议栈活动，重新进行同步。由于在蜂窝信号存在的情况下，D2D通信必须考 虑与蜂窝系统之间的干扰避免问题，因此若当前终端工作在自组织网络模式下， 且同步状态监听线程小区搜索执行成功，终端也会进行重同步，切换到混合网络 模式。
同步模块在终端同步状态发生转换时，使用Sync_mode Core Msg向协议栈报 告同步状态的切换。支持的同步状态类型如表4-14所示：
表4-14 Sync mode Core Msg携带的同步状态列表
同步状态	同步状态值	同步状态说明
D2D Master	0	自组织模式主机
D2D Slave	1	自组织模式从机
Mix Slave	2	混合网络模式
Out of Sync	Oxff	未同步模式
物理层同步模块的执行逻辑如图4-17所示:

48

图4-17物理层同步模块逻辑
此外，当终端出于已同步状态时，会利用来自同步源的信号进行时频域的跟 踪，以保持自身与同步源之间定时和频率的一致性，抵消系统硬件晶振频率不一 致等原因带来的釆样率或频点差异。混合网络模式和自组织网络模式下的时频域 跟踪函数接口分别为SymTrackingO和Ul_RsTracking(),其输入数据均为已同步的 一个子帧的数据，分别通过SymTrackCtrl结构体和pFoffsets pToffset的数值传出 跟踪结果，如表4-15所示：
表4-15 PHY跟踪功能接口
函数接口定义
SymTracking(uERxSymTrackCtrl„t *SymTrackCtrl)
Ul RsTracking(int32 t *pFoffset, int32 t *plbffset)
对于跟踪得到的时间偏差，物理层将在数据缓存处调整时间戳与帧号的对应 关系以进行时域校正，该对应关系将在4.4节进行详述。对于跟踪得到的频率偏 差，则由接收链路主线程中的频率补偿函数进行补偿。
49
4.3.1.2PBCH 模块
PBCH由蜂窝小区基站在子帧0进行广播，携带有小区MIB(Master Information Blocks),包括下行带宽配置、系统帧号等重要参数。D2D终端在实现 小区同步后，通过对PBCH信道的解码获取下行带宽配置和系统帧号，并将自身 工作状态调节为与之一致。D2D终端切换到混合网络模式后，仍监听PBCH以确 保D2D终端的下行带宽配置和系统帧号与蜂窝小区保持一致。PBCH模块的主要 函数接口如表4-16所示：
表4-16 PHY PECH模块功能接口
函数接口定义
PbchDeRsrcMapO
PbchPathQ
其中PbchDeRsrcMapO函数用于对PBCH信道进行解资源映射，PbchPathQ 函数用于PBCH信道的解码。整个解码流程如图4-14所示。解码完成后，系统帧 号将作为SYNC Core Msg中的一个字段上报到协议栈。
物理层PBCH模块的执行逻辑如图4-18所示，PBCH逻辑均由接收主线程完 成：
接收主线程
下行信号解前端
下行信号信道估计
PBCH解资源分配
二二 W 二二
PBCH信道解码
PBCH Core Msg上报
图4-18物理层PBCH模块逻辑
4.3.1.3PDCCH盲检测模块
PDCCH是ETE协议体系结构下的下行控制信道，承载下行控制信息(DCI), 蜂窝基站通过该信道向蜂窝终端分发资源分配和其他的控制信息。如第三章所述, D2D终端物理层通过对该信道的解码获取蜂窝上行通信资源分配信息，以实现频 谱空洞的探测，同时，PDSCH模块的解码也依赖于对PDCCH信道的解码。本节 仅介绍用于获取蜂窝上行蜂窝通信资源分配信息的PDCCH盲检测部分，支持
50
PDSCH模块的PDCCH模块将与PDSCH模块一同介绍。
在每一个下行子帧中,PDCCH的符号数是由PCFICH信道指示的，而PCFICH 信道的位置在PBCH中被指定，因此为了对PDCCH进行解码，物理层需要先解 码PCFICH信道。
在ETE系统中，PHICH信道仅承载了 1个比特的PUSCH信道的HARQ的 ACK/NACK信息。但由于蜂窝系统在进行HARQ重传时，不一定仍会通过PDCCH 再次下发资源分配信息，而是仅通过PHICH告知蜂窝终端进行重传，重传时使用 的无线资源与之前完全相同。因此，PDCCH的DCI Format 0与PHICH消息的结 合才是完整的蜂窝上行通信资源分配信息。
PCFICH模块的主要函数接口如表4-17所示：
表4-17 PHY PCFICH模块功能接口
函数接口定义
CFIDeRsrcMapO
CFIPath。
其中CFIDeRsrcMapO函数用于对PCFICH信道进行解资源映射，CFIPathQ 函数用于PCFICH信道的解码。	’、’
PDCCH盲检测的主要函数接口如表4-18：
表4-18 PHY PDCCH盲检测模块功能接口
函数接口定义
PdcchDeRsrcMapforD2D0
PdcchPathForD2D0
其中PdcchDeRsrcMapforD2D°函数用于对PDCCH信道进行解资源映射， PdcchPathForD2D 0函数用于对PDCCH信道DCI Format 0的盲检测。
PHICH模块的主要函数接口如表4-20所示：
表4-19 PHY PHICH模块功能接口
函数接口定义
HiDeRsrcMapO
DeHIPath。
其中HiDeRsrcMap()函数用于对PHICH信道进行解资源映射，DeHIPath() 函数用于对PHICH信道进行解码。
PDCCH DCI Format 0与PHICH信道解码完成后，物理层接收链路使用表4-20 中的DciHiToPuschRsrcMap()函数将其最终合并为基站对蜂窝上行资源的调度信 息，并以PDCCH Core Msg的形式上报到协议栈。
表4-20PHY蜂窝上行资源上报功能接口
函数接口定义
DciHiToPuschRsrcMapO
51
物理层PDCCH盲检测模块的执行逻辑如图4-19所示，其中PCFICH和
PHICH的处理由接收主线程完成，PDCCH盲检测由PDCCH线程完成：
接收主线程	PDCCH盲解码线程

图4-19物理层PDCCH盲检测模块逻辑
PDSCH 模块
D2D终端没有复用ETE的PDSCH信道进行D2D业务数据的传输，但由于 PDSCH承载了 SIB(》sfem Information Blocks'),其中携带了一些上行信道资源配 置信息，因此D2D物理层需要支持PDSCH解码以获取该信息。而对PDSCH进 行解码前需要先通过对PDCCH的解码获取PDSCH上的资源配置情况。PDSCH 模块的主要函数接口如表4-21所示：
表4-21 PHY PDSCH模块功能接口
函数接口定义
PdcchDeRsrcMap()
PdcchPath()
PDSCHDeRsrcMap()
PdschPath()
其中，PdcchDeRsrcMap()和PdcchPath()函数分别用于对PDCCH的解资源映 射和解码,PDSCHDeRsrcMap()和PdschPath。函数分别用于对PDSCH的解资源映 射和解码。解出SIB消息后,PDSCH模块以Core MSG的形式将其上报到协议栈， 上报的内容包括PRACH信道占用RB资源起始位置、PUCCH占用RB资源起始 位置及长度、蜂窝小区专属参考信号发射功率、蜂窝上行用户静态工作点和蜂窝
52
上行通信链路补偿因子等。
物理层PDSCH模块的执行逻辑如图4-20所示，PDCCH检测和PDSCH解码 均由PDSCH线程完成：

图4-20物理层PDSCH模块逻辑

4.3.1.5D2D-CCCH 模块
D2D物理层链路端支持对D2D-CCCH物理信道的接收，这里特指对除 D2D-SYNC信令以外的D2D-CCCH信令的接收。物理层对RTS、CTS和ACK信 令的接收由系统上下行配置和系统子帧号共同触发，其使用的无线资源和编码方 式见3.3节。解码成功后，物理层D2D-CCCH模块生成相应的Core Msg上报到 协议栈，Core Msg的格式见4.2.4节。
表4-22 PHY D2D-CCCH接收模块功能接口
函数接口定义
CCCH RX (uint8 t CCCH Chanl\pe)
D2D物理层的RTS、CTS和ACK信令使用相同的接口接收，如表4-22所示。 其中CCCH_ChanType参数由接收主线程控制，用于区分CCCH信令类型。
物理层D2D-CCCH接收端的执行逻辑如图4-21所示，D2D-CCCH的解码均 由接收主线程完成：
53
接收主线程

图4-21物理层D2D-CCCH接收端模块逻辑

4.3.1.6PUSCH 模块
根据上文的流程设计，D2D终端复用PUSCH信道进行D2D的业务传输。本 论文中的PUSCH模块使用Turbo码进行信道编解码，其接收端模块的主要函数 接口如表4-23所示：
表4-23 PHY PUSCH接收模块功能接口
函数接口定义
DeRtMtchandharq。
turbodecodeULQ
Inline_crc()
其中DeRtMtchandharq。函数实现信道解码之前的速率匹配和HARQ相关参 数配置，turbo decode_UL()函数实现Turbo译码，Inline_crc()函数则完成对Turbo 译码结果的CRC校验。
物理层PUSCH接收端的执行逻辑如图4-22所示，解码过程中，解速率匹配 及其之前的处理由接收主线程完成，Tuibo译码部分和crc校验部分由PUSCH接 收线程完成：
54

接收主线程	PUSCH解码线程

图4-22物理层PUSCH接收端模块逻辑

4.3.2发送链路设计
物理层的发送链路从协议栈接收Sched Msg,根据消息类型对数据进行相应 的物理层处理，并通过L0以子帧为基本单位进行发送。为保证Sched Msg被及 时接收，而不会被正在执行的数据发送任务所阻塞，物理层的发送链路使用一个 额外的schedmsghandler线程，轮询式地获取来自协议栈的Sched Msg下发，并根 据Sched Msg的类型分发到物理层相应的发送队列中。
与接收链路完全收时序驱动不同，物理层的发送链路的数据准备可以在收到 Sched Msg后马上执行，信号处理完成后，将该子帧数据的帧号转化成物理层时 间戳与要发送的子帧数据一起发到L0层，并提交到USRP进行发送等待即可。 而且由于数据的发送通常都与数据的接收有关，因此数据发送准备的提前量通常 也仅在几毫秒的量级，且不会随时间而增长。发送链路向L0层发送数据的接口 为 write_subframe_from_phy_directly()函数，如表 4-24 所示：
55
表4-24 PHY向L0发送数据功能接口
函数接口定义
write_subframe _from_phy_directly(short* data src)
从使用的线程资源来看，物理层发送链路仅使用了一个发送主线程和一个 schedmsghandler线程，所有的发送端数据处理任务均由发送主线程完成。
4.3.2.1D2D-CCCH 模块
物理层发送链路的D2D-CCCH模块(特指除DAIACTRL以外的D2D-CCCH 物理信道)由协议栈RTS/CTS/ACK/SYNC Sched Msg调度控制，发送D2D-CCCH 子帧信号。物理层生成SYNC子帧的接口为UlSyncTx。函数，物理层生成 RTS/CTS/ACK 子帧的接口为 CCCH_TX°函数，并使用 CCCH_ChanType 对 D2D-CCCH的类型进行区分，如表4-25所示：
表 4-25 PHY D2D-CCCH 发送接口
函数接口定义
UlSyncTx。
CCCH TX(uint8 t CCCH ChanType)
Downlink TxFrontEndO
RTS> CTS、ACK> SYNC信令均在LTE下行子帧发送，因此相应的子帧发 送应遵守ETE下行子帧的空口格式。因此，RTS、CTS、ACK、SYNC子帧的发 送调用Downlink_TxFrontEnd()进行与ETE下行信号一致的CP和GuardBand生成 等前端处理，处理逻辑如图4-23所示：
发送主线程

图4-23物理层D2D-CCCH发送端模块逻辑

56
4.3.2.3PUSCH 模块
物理层发送链路的PUSCH模块由协议栈DATA Sched Msg调度控制，使用 CCCH_TX()函数生成数据随路的DAIACTRL信令，并生成PUSCH链路负载， 合并为待发送的PUSCH上行子帧。PUSCH上行子帧遵守ETE上行子帧的空口格 式，因此，PUSCH上行子帧的发送使用Uplink_TxFrontEndO函数对数据进行CP 和GuardBand生成等前端处理，.函数接口如表4-26所示，处理逻辑如图4-24所 _ .	; . 「二 L■一；	■ .	- ■	■	■ ■-	. ' ■
小：
表 4-26 PHY PUSCH 发送接 口
函数接口定义
Uplink TxFrontEnd()；
发送主线程

图4-24物理层PUSCH发送端模块逻辑

4.4层。设计
系统软件部分的层0主要实现基带与USRP之间的数据通信。从数据流向上 看，该层主要提供两个服务，即数据接收服务和数据发送服务。基带釆样率为 30.72MSps,而USRP提供的最接近的采样率支持为25MSps。因此，层0部分除 了基本的数据服务外，还需要在接收端将来自USRP的25M数据流升采样到 30.72M再提交到物理层，在发送端将来自物理层的30.72M数据流降釆样到25M 再发送给USRP,采样率转换比为625:768o由于ETE基带信号只有频带中心的 20MHz信号是有效的，再加上D2D-CCCH占用的5个RB,也仍小于25MHz, 因此变采样中的低频滤波操作不会造成明显的信号损失。
57
非硬实时的操作系统不能提供精准的时钟信号，而USRP上的FPGA则可以 通过标准的硬件时钟提供准确的时钟信号。为此，UHD提供了一种时间戳机制以 实现与USRP硬件的时钟同步。时间戳是一个无符号的长整形数，每一个时间戳 对应了 USRP的一个釆样周期。UHD提供了一个接口，约定某一时刻系统的时间 戳为0,即基准时间。接下来系统的时间戳会随时间周期增长。举例说明，若USRP 的釆样率为25MSps,且一个时刻的时间戳为25,000,000,那么这个时刻相对基准 时间晚了精确的1秒。
USRP接收到的每一个复样本都对应着一个时间戳以标记USRP接收该样本 的时间，而发送给USRP的每一个样本也都对应着一个时间戳，以告知USRP在 空口上发送该样本的时间。软件系统可以先对接收到的信号进行同步，将帧号与 该帧物理层信号的第一个釆样点的时间戳进行对应，从而将系统上层的帧号与 USRP的时间戳对应起来。软件系统要发送数据时，通过帧号与时间戳的对应关 系，计算出要发送的帧所对应的时间戳，并将计算出的目标时间戳与数据一同传 输给USRP完成数据发送。这样的机制下，数据与USRP时钟保持同步，软件部 分通过时间戳异步地访问数据，即可实现对空口数据的定时控制。
由于采样率的差别，USRP上的时间戳不能直接应用到基带信号，但由于存 在625:768的釆样率转换比，物理层可以按照基带信号釆样率维护一个物理层时 间戳，并与USRP时间戳按采样率进行转换。这样的转换在非整除的情况下会存 在舍入误差，但该误差不仅只有不到一个釆样周期，而且不会随着时间累积，因 此不会影响系统的定时准确性。
4.3.1数据接收服务
D2D终端的同步功能由物理层实现，层0不需要清楚接收数据中ETE帧的起 始位置。出于这样的定位，层0的接收端向物理层提供连续不间断的数据流式的 接收服务。
数据接收服务由前端线程、变釆样线程和后端线程三个线程提供。前端线程 调用UHD接口从USRP读取数据，每次读取的数据量定义为一个packet,粒度为 625个釆样值，读取完成后，前端线程通过线程间接口将接收到的数据以及其对 应的USRP时间戳发送给变采样线程。变釆样线程每收到一个packet后，首先对 该packet执行滤波升釆样，转换为768个釆样值，然后计算该packet的USRP时 间戳对应的物理层时间戳，将转换后的packet及其对应的物理层时间戳发送给后 端线程。后端线程接收到的packet已经符合基带信号采样率，通过进程间通信接 口发送给软件系统的层1,由层1进行缓存。
58


4.3.2数据发送服务
在同步状态已经建立的情况下，D2D终端物理层数据的发送是建立在系统帧 格式的基础上的，数据发送的基本单位是一个子帧。一个D2D终端不会在每个子 帧上都进行数据发送，因此D2D终端的数据发送是突发的。出于这样的定位，层 0的发送端向物理层提供Burst式的数据发送服务。
数据发送服务也由前端线程、变采样线程和后端线程三个线程提供。物理层 在提交发送数据的请求时，会将一个子帧的数据准备好，并通过物理层维护的时 间戳与帧号的对应关系，计算出所发送子帧对应的物理层时间戳，与数据一同提 交给层0发送端前端线程。前端线程以非阻塞的伦询方式读取物理层要发送的数 据，每次读取的数据量定义为一个子帧，粒度为30720个采样值，读取完成后， 前端线程将这一个子帧的数据拆分为40个长度为768的packet,依次传递给变采 样线程。变采样线程每收到一个packet后，对该packet执行滤波降采样，转换为 625个采样值，然后计算给packet的物理层时间戳对应的USRP时间戳，将转换 后的packet及其对应的USRP时间戳发送给后端线程。后端线程接收到的packet 已经符合USRP信号采样率，由后端线程通过调用UHD接口发送给USRP执行 发送操作。
59




变采样线程
后端线程
前端线程
空口
图4-25层0数据发送服务
60







































第五章实时处理保障技术
上一章介绍了 D2D验证平台系统软件架构的实现及其各模块的功能。根据模 块处理流程的分析，很多模块都对信号处理的实时性有着一定的要求。对系统实 时性要求最为严格的一个流程是D2D的数据发送流程，由于PDCCHDCI Format 0消息最少仅提前4ms时间发送。这就要求D2D终端如果要在混合网络模式下通 过复用PUSCH发送数据，那么从空口捕获到含有PDCCH DCI Format 0消息的子 帧头部开始，完成对该子帧的层0接收预处理、物理层前端处理、PDCCH盲检 测、到协议栈根据消息内容进行资源调度、物理层进行PUSCH发送信号处理和 层0发送预处理全部完成，整个流程持续不能超过4ms。
要在基于GPP的SDR平台上开发这样一个大运算量、高实时性要求的系统， 平台的特殊性会给系统的实时性带来挑战，这些挑战主要体现在：
1、	D2D验证平台的操作系统环境是GPP通用处理器平台上的Linux操作系 统。与FPGA、DSP等平台不同，Linux是基于时间片的操作系统，它并不提供 可靠的实时性保障。为了满足实时性要求，验证平台需要在操作系统的硬件接口、 任务调度策略等多方面进行优化。
2、	单核的GPP处理器是串行运算而非并行运算，因此对于负载较大，密集 运算的模块，开发过程中不仅要从模块的算法效率方面进行优化，也需要提供稳 定、高效的并行机制以提高时间利用率。
3、	D2D验证平台的设计包含了 L0层、物理层、MAC层、RLC层到IP层的 诸多层级结构，各层各模块之间存在大量的数据和信令传递。为了保障系统的实 时性，验证平台必须提供高效率的层间接口和低延时、高稳定性的消息传递与消 息轮询机制。
为了应对这些挑战，D2D验证平台系统的开发过程中，每一个模块的算法都 经过了效率方面的优化。本章将在这些已经模块效率已经优化完成的前提下，从 系统架构设计和并行优化的角度出发，介绍以下五种具体的实时保障技术。
5.1流水线模式的多核多线程系统架构
在进行系统集成之前，所有运算模块均经过独立的效率优化和性能测试。在 效率优化完成后，主要产生延时的模块如表5-1所示：
61
表5-1各模块处理延时
处理模块	平均延时
物理层接收前级处理（上行）	850us
物理层接收前级处理（下行，包括D2D-CCCH的解码）	650us
物理层PDCCH盲检测	500us
物理层PDSCH解码	150us
物理层PUSCH解码	1700us
物理层PUSCH发送前端处理	800us
物理层D2D-CCCH发送前端处理	650us
协议栈无线资源调度	lOOus
以PUSCH接收为例，PUSCH接收流程需要执行包括IDFT等操作在内的物 理层上行接收前级处理，然后执行物理层PUSCH解码。对一个上行子帧的解码 操作需要850 + 1700 = 2550uso如果将两部分的处理在一个线程内顺序执行，这 就意味着物理层对该上行子帧接下来的子帧的处理，是在数据被接收到1550us 后才开始的，这1550us的延时又会被累加到接下来的子帧的处理过程中。延时不 断累加会导致信号处理部分的延时越来越高，并影响到对每一个子帧的接收，最 终导致系统因缓冲溢出而崩溃。
在PUSCH接收流程的两个部分中，物理层接收前级处理在每个子帧都要进 行，而PUSCH解码操作则仅在需要执行数据接收的上行子帧进行。因此，我们 如4.3.1.6所述，将这两部分的处理放在两个线程内，前级处理完成后，将处理结 果发送到PUSCH解码线程，此时PUSCH解码即可独立完成剩余的解码操作，而 前级处理线程又可以立刻准备下一子帧信号的接收。这样，这两个线程即形成了 一个并行流水作业的处理模式。虽然PUSCH信道解码的总时间仍然为2550us, 但物理层对接下来的子帧的处理仍然可以按时进行。
并行流水前后的系统时延分析如图5-1所示。从子帧2开始计时，在并行流 水优化前，子帧3的处理开始时就滞后了 1550us,而子帧4的处理开始前已经滞 后了 3100us,不能满足系统实时性要求。而并行流水优化后，子帧3和子帧4的 处理均没有出现滞后，可以满足系统实时性要求。
62



图5-1 PUSCH并行流水前后时延分析
我们将上述并行流水的思想应用于整个软件系统架构的设计中。首先，将物 理层和协议栈分离到不同的线程，将物理层的发送链路和接收链路分离到不同的 线程，然后将物理层接收链路的后端处理，如PUSCH解码、PDCCH盲检测、 PDSCH解码等消耗时间较长的模块与相对统一的前端处理分离到不同的线程。各 个线程之间均使用消息进行通信，各自的数据处理除一些全局性的系统状态变量 外，仅依赖于接收到的消息。这就意味着数据的前级在将消息发送到后端后，不 必等待后端处理完成即可开始随后的数据处理。图5-2从线程关系的角度展示了 物理层和协议栈的软件体系。

图5-2物理层和协议栈软件的线程结构

5.2轻耦合的通信接口设计
在建立了多核多线程的并行流水架构后，层与层之间、线程与线程之间的通 信接口效率则成为了影响系统实时性的另一个关键因素。实时性对于通信接口的 性能要求主要包括两个方面，即延时小和稳定性高。延时小即消息从发送到被接 收之间的时间尽可能短，且延时稳定；稳定性高指数据在传递过程中不能发生丢
63

失和错误，特别是在多线程的环境下。
除了上文中已经叙述过的使用Zeromq进行线程间通信，以及物理层和协议 栈之间Core Msg和Sched Msg的消息机制外，物理层和层0之间的通信接口也是 影响系统性能的重要环节之一。
优化之前，层0接收链路进行釆样率转换的粒度为1个子帧，物理层完成数 据链路同步跟踪之后，将时域的补偿值告知层0,由层0维护帧格式的起始位置。 层0从USRP缓冲区读取25000个釆样点的数据后，对这25000个采样点升釆样 到30720个釆样点，并进行缓存，根据收到的时域补偿值对采样点按照帧格式进 行组合，再取出一个符合帧格式的子帧提交到物理层接收端。



图5-3优化前的物理层接收链路与层0之间接口
如图5-3所示，由于数据在进行变釆样之前进行了一次数据排队操作(等到缓 冲区中有一个子帧长度的釆样点再进行处理)，而在帧格式维护时又进行了一次数 据排队操作。一个子帧在空口的持续时间为1ms,但在最差的情况下，由于多余 的一次排队操作，这个子帧在到达物理层开始信号处理之前，就已经经历了 1ms 的排队延时。
为了解决这个问题，我们将层0接收链路的功能进行了重新定义，令其不再 进行帧格式的维护，转而提供流式的数据接收服务。层0与物理层接收端之间的 数据缓存和帧格式维护转移到物理层的接收接口进行。同时，将层0变釆样的处 理粒度由原来的一个子帧变为一个packet(l/40子帧)，层0每处理完一个packet 就上报到物理层的缓冲区。这样整个数据流程中就只进行一次数据排队操作即可， 大大缩短了接口带来的排队延时。同时，由于物理层不需要再向层0发送帧格式 维护的信令，这部分通信的开销也得到了节省。
5.3基于SSE指令集的单模块优化
SSE(Streaming SIMD Extensions)是Intel系列处理器上的单指令、多数据 (SIMD)指令集扩展。它使得多次逻辑相同的数据运算可以由一条单一指令完成， 从而实现了代码在不改变原有逻辑的前提下的并行加速。以图5-4所示，SSE指 令集可以将8对待加的16位数分别放入两个128位的寄存器，执行 一mm_add_epil6(),即在一个指令周期内完成8个16位数的加法。若不考虑数据
64
转存带来的开销，使用SSE指令集即可将处理延时降低到原来的l/8o
8 ADDS	1 ADDS
Al	A2	A3	A4	A5	.A6	A7	A8		Al	A2	A3	A4	A5	A6	A7	A8
©	©	㊉	©	©		® 16位加法				　　㊉ _mm_add_epil6()
Bl	B2	B3	B4	B5	B6	B7	B8		►	Bl	B2	B3	B4	B5	B6	B7	B8
II	II	II	II	II	II	II	II					II
Cl	C2	C3	C4	C5	C6	C7	C8		Cl	C2	C3	C4	C5	C6	C7	C8

图5-4使用SSE指令集对16位数加法进行并行加速
物理层的许多运算密集型的模块在实现中均使用了 SSE指令集进行优化，这 里不一一列举,仅举下面的例子说明其优化效果。PUSCH链路解速率匹配函数中， 一个185280个8位数进行赋值的操作经过SSE指令集优化后，运行时间由原来 的400us降低到了 50uSo
5.4基于多线程负载均衡的单模块并行优化
5.1节所述的并行流水架构解决了可能发生在链路前端的延时累积问题。但对 于处理时间很长的链路后端模块，单模块的处理模式仍有可能在其模块线程本身 造成短时的延时累积，造成模块延时的短暂过长。仍以PUSCH解码链路为例， 如表5-1所述，其线程单模块运算延时约为1700us。在系统上下行配置为TDD Config 1时，时序中会有两个上行子帧连续出现的现象。在这种情况下，如果 PUSCH解码线程只有一个，那么当D2D物理层需要在连续两个子帧内进行 PUSCH解码时，如图5-5所示，在第一个子帧的前端处理完成后，接收主线程进 入等待数据的状态，在第二个子帧到来后马上进行第二个子帧的前端处理；而当 第二个子帧的前端处理完成后700us,第一个子帧的PUSCH解码操作才完成，因 此第二个子帧的PUSCH解码操作的延时，会由原来的1700us增加到1700 + 700 = 2400uso
65



图5-5单PUSCH解码线程情况下连续两个子帧接收PUSCH的延时分析
为解决这一问题，我们使用多个相同功能的线程对该模块的信号处理进行负 载均衡操作。如图5-6所示，前端将待解码的消息依次发送给编号为1、2、3的 PUSCH解码线程。


图5-6 PUSCH解码多线程负载均衡示意图
由于编号不同的线程之间不会相互等待,因此即使线程1的解码还没有完成, 线程2的解码也可以马上开始，这样就避免了单解码线程情况下会产生多余延时 的问题，如图5-7所示：
66

图5-7多PUSCH解码线程情况下连续两个子帧接收PUSCH的延时分析

5.5基于流水线的单模块并行优化
USRP与D2D物理层之间进行的釆样率转换操作是系统中对实时性要求很高 的又一个模块。由于TDD ETE系统中每一个子帧的持续时间为1ms,因此该模块 包括滤波运算和上下层通信在内的所有处理操作，对于每个子帧的处理时间不能 超过1ms,否则将无法满足系统的实时性要求。同时，在数据的接收链路中，该 模块处于所有物理层模块的前端，该模块的延时将叠加在所有接收链路处理的延 时之上，在保证系统实时性的同时，也必须针对该模块的延时进行优化。
以层0的数据接收服务为例，在执行5.2节所述的优化前，该模块的处理粒 度是1个子帧，即从USRP获取长度为25000个釆样值后，一次性对这25000个 釆样值进行采样率转换。此时采样率转换模块已经经过算法效率和SSE指令集优 化，每个子帧的处理时间在300us左右。这样的延时可以满足系统对于该模块实 时处理的要求，但叠加在物理层接收链路处理的延时之上，将会对物理层接收链 路的实时性带来巨大的压力。
执行5.2节所述的优化后，该模块的处理粒度由1个子帧减小到1个 packet（l/40子帧）,.在数据等待的时延被降低的同时，单次滤波运算带来的延时也 被切分。但同时，每个packet的处理必须在25us内完成。
理论上，滤波运算对一个子帧带来的延时也会降低到与300/40=7.5us的量级。 但由于受到程序调用开销等方面的影响，在处理粒度被降低到原来的1/40后，每 个packet的处理时间仅下降到约20~27us。根据分析，该模块的处理的处理延时 主要来自三个部分，即从USRP读取数据、进行变采样滤波运算、向物理层发送 数据，如图5-8所示。
67

<	20 27us	>
5us	13~20us	2us	5us	13~20us	2us
1 packet	:

图5-8单段式的层0接收链路的延时分析
根据时延分析，从USRP读取数据的操作造成的延时平均为5us,变釆样滤 波运算的延时在13us到20us之间，向物理层发送数据的延时平均为2us。虽然三 个部分的延时均小于25us,且前后两个操作的延时很小，但当packet处理的总延 时超过25us时，信号处理的延时将会发生持续累积，使得链路的延时越来越大， 最终导致系统崩溃。为了解决这一问题，这里将单段式的处理逻辑按照功能拆分 成三个线程，形成如4.3.1节所述的三段式处理逻辑。如图5-9所示，即使变采样 率波运算的时延为20us,也不会发生延时累积的现象。
层0接收数据流
-1			>
packet N	packet N+l

图5-9三段式的层0接收链路的延时分析
三段式的处理逻辑实现了单模块的流水线处理，模块对一个packet的处理总 延时将从原来的三段延时的累加和变为原来的三段延时中最长一段的延时，即从 22~27us降低到13~20us,不再会超过25us的门限。而实际上，在该模块优化后， 执行滤波运算操作的线程只进行数据运算，而不再进行设备访问操作，IO操作到 运算操作之间切换的开销降低也使得该模块的运算延时更小且更加稳定。
5.6操作系统实时性增强
5.6.1基于任务核绑定的任务调度策略优化
Linux操作系统允许多个线程在不同的CPU核上进行并行执行，也允许多个 线程在同一个CPU核上以分享时间片的形式并发执行。在并发执行的情况下， CPU需要不断在多个线程之间进行切换，使得多个程序的执行时间甚至超过其单 独执行的时间之和。当流水架构中的各个模块所在的线程以并发形式在一个CPU 核上运行时，模块的处理时间将难以预计。因此为了保证并行流水架构的稳定实
68
现，系统需要避免多个需要并行的线程是以并发的形式运行在同一个CPU核上的 情况。但通常情况下，操作系统通过其任务调度机制决定一个线程在哪个CPU核 上执行，并且可能会动态地将该线程在多个CPU核之间进行迁移。而与在DSP、 FPGA等平台上，任务调度策略由用户定义不同，在GPP平台上，操作系统的任 务调度机制对用户而言是不可见的，如果没有特别的并行性保障机制，不仅D2D 验证平台的多个信道处理线程可能会被调度到同一个CPU核上执行，甚至可能会
< 发生D2D验证平台的信道处理线程与操作系统中其它线程被调度到同一个CPU 核上执行的情况，大大影响D2D验证平台处理的实时性和稳定性。
为此，我们首先通过调节线程CPU亲和性(affinity)的方式实现线程的CPU核 绑定。亲和性是Linux为进程或线程提供的一种在某个CPU上尽量长时间运行而 不会被迁移到其它CPU的倾向性。线程可以通过调用Linux系统提供的 sched_setafGnityO函数指定其倾向的CPU。如果一个线程仅对于一个CPU核具有 亲和性，那么该线程通常不会被调度到其它CPU核上，这就避免了 D2D验证平 台软件系统内的多个线程被操作系统调度到同一个CPU核上执行的问题。
为了将D2D验证平台软件系统与操作系统上运行的其它用户程序隔离，我们 使用isolcpus命令将D2D验证平台软件系统使用的CPU核从负载均衡算法中去 除。该命令在操作系统引导时执行，操作系统启动后，用户进程将不会运行在制 定的CPU上。为实现isolcpus的效果，还需要关闭操作系统的IRQ负载均衡服务， 将IRQ的中断处理操作也绑定到固定的CPU核上，以保证网卡中断等系统中断 的实时处理。
5.6.2以太网卡的配置优化
层0接收链路延时的降低除了可以三段式的流水线方式实现以外，还需要通 过对网卡参数的配置进一步增强。Intel的以太网卡有一个配置参数为 InterruptThrottleRate,该参数可以控制网卡每秒钟能够产生的最大中断次数，可 以通ethtool -C rx-usecs N 命令改变该参数。InterruptThrottleRate 值越小，网卡 的两次中断之间的最长时间就会越大。两次网卡中断之间，网卡会将接收到的数 据缓存在网卡自身的缓冲区内。在取值范围上，0,1,3为特殊的参数值，代表的不 是最大中断次数，而是预设的策略编号。
在进行优化之前，层0接收到完整的子帧数据的时间相对于其第一个样本的 时延如图5-10所示，最大延时约为200us。这是因为InterruptThrottleRate的默认 值为3,即操作系统使用较为保守的策略对每秒的最大中断次数动态控制。由于
USRP与以太网卡之间的通信非常频繁，因此可能会出现6~7个以太网帧被网卡 缓存，通过同一个网卡中断提交给用户程序的情况。
69



图5-10网卡参数优化之前的延时分布
为此，我们将该值设为0,即令网卡在收到以太网帧后必须立刻产生网卡中
断向操作系统提交数据，不允许在网卡缓存数据。在对该参数进行修改后，大部 分延时降低到60us以下，如图5-11所示。

图5-11网卡参数优化之后的延时分布

70

第六章系统性能与结果分析
在USRP和多核GPP服务器等硬件条件下，本论文开发实现了 D2D验证平 台系统的原型机，原型机实物图如图6-1所示。系统硬件部分除USRP和GPP 服务器以外，还配备有射频收发天线、交互展示用的人机接口，以及用于方便移
动展示的UPS电源。

图6-1 D2D验证平台系统实物图

通过多台组网实验证明，本论文的D2D验证平台系统可以实现在混合网络
模式和自组织网络模式下的D2D通信，并可以达到第二章所提出的系统设计需 求。本章将从业务演示、干扰管理能力、中继能力等方面展示D2D验证平台系 统的功能和性能。
6.1终端通信与业务演示
D2D验证平台系统可以支持在蜂窝覆盖下的混合网络模式或无蜂窝覆盖下 的自组织网络模式下实现D2D点对点通信和广播通信。为了展示D2D验证平台 的通信能力，我们在多核服务器上使用操作系统支持的一系列应用来实现基于 D2D通信的业务传输。D2D通信处于OSI体系结构的网络层以下，为业务数据
71 提供透明的传输服务。我们可以通过业务的延时和通信速率观察D2D验证平台 的实验性能。由于文件共享和实时多媒体业务是移动互联网本地业务最为常见也 是流量最大的业务，我们通过文件传输和视频点播业务进行平台的业务演示。
首先，我们通过Linux操作系统提供的ping业务测量D2D通信的时延和丢 包率。如图6-2所示，在单跳、两台D2D终端间距为2米左右的情况下，ping 业务的往返延时在60~120ms左右，可以符合大多数业务对延时的需求。60ms 的最短往返延时与D2D-CCCH流程时序中单向传输18~28ms的理论延时一致， 而整体高于60ms的原因是，为避免小IP包引起频繁的RTS竞争，RLC层的发 送端釆取了负载均衡策略。经过10025个包的传输，ping包的丢失个数为 10025-10018=7个，丢包率在0.07%左右。
64 bytes from 192....seq*lW04	順5
64 byte^ from	ttW64	明
64 bytes fro®	囲&	M
64 bytes from 192.ms 64 bytes f»168.40,8: £亳癒歎*鬱尊蘇琏例8 ttl^B-4	ms
bytes f1嵌」缽.4*8； X岬>.齢钩我轴的 ttl«S4
64 bytes	fro：m	ie.2,163.4e,8:	icnp^seq*ie8ie	ttl^S4	time.^129	es
64 bytes	from	1>2»16B.4t.8:	ic：mp....seq^i0011	ttl®&4	網宮
64 bytes	fe瓣	192.1 源*4®.8:	icsp...seq»lS012	ttl®S4	翁暮
64 bytes	fro^	192,153.48.8:	icmp"s«q»lS013	:
64 bytes	from	16S.4B.8:	imp §^^10014	ttl^64	零诵瞳勰聪，3 曲
64 bytes	f rom	W2* 168.40»0:	icmp	ttl^64	燃參
飼 byte$ 發 ,16S. 4@«.8: ie^p ^eq^lSaiS	書询g的.8 够
64 bytes、fg擞 1^：2. K168.4®. 8: icmp, seq» 1B017 111ms 64 bytes手支啊	网.4題4： ic^p seq^iaeis ttl^.4 盘燃密瓣丄禮
64 bytes	from	192.168,4府icmp	seq^ 1^019	tt 1^.64	務乌
64 bytes	f rom	192.16S. 4：S<8:	icmp	ttl^64	twe®10^ m$
64 bytes	from	1^2,16S.49.8:	ic^p	seq«* 10021	It 1^64	ti錢飲99,§
64 bytes	fra®	02*168.40.8:	icmp	seq^XeG'22	ttU64	time^9.4 ms.
S4 byte$ "g 上说.1 牖.抑e： icbp $eq**10023 tt 1^64	, 1 ms
64 bytes fro^i 192* 168<4®»S: ic®p seq«10024 £41^84 time^69.,8 ms S4	frofn： 1^2-168.40.8： ix呻 gq滋 1 分。25 111^64 N麟g归.7 m

图6-2基于D2D通信的ping业务演示
第二，我们在Linux操作系统上利用vsftpd搭建FTP服务器，通过FTP下 载业务验证D2D通信系统的吞吐能力。
在自组织网络模式下，D2D网络默认使用TDD configl的上下行配置，上行 时隙比例为0.4。D2D传输使用IMCS23，使用频域100个资源块进行传输，理 论传输能力上限为57336*400/8=2800KB/So考虑到FTP是一种基于TCP协议的 业务，传输具有的反馈链路也会占用带宽资源，在使用负载均衡策略的情况下, FTP下载的理论传输能力上限为2800*7/8=2450KB/s。实验中，D2D终端对之间 FTP业务的速率可以达到2243KB/so即不考虑反馈链路的情况下，D2D链路提 供的传输能力仍可达到17.52Mbps o
72

图6-3自组织网络模式下的FTP业务演示
在混合网络模式下，当蜂窝网络工作在TDD config 2,且小区内没有蜂窝上 行用户存在时，上行时隙比例为0.2。D2D传输使用IMCS23,由于在频域预留 了 PUCCH所占用的24个资源块，因此实际仅占用75个资源块进行传输,理论 传输能力上限为57336*0.75*200/8=1050KB/s»考虑到FTP是一种基于TCP协议 的业务，传输具有的反馈链路也会占用带宽资源，在使用负载均衡策略的情况下, FTP下载的理论传输能力上限为1050*7/8=918.75KB/So实验中，D2D终端对之 间FTP业务的速率可以达到845KB/so即不考虑反馈链路的情况下，D2D链路 提供的传输能力仍可达到6.6Mbps。



图6-4混合网络模式下的FTP业务演示
在两种工作模式下，使用D2D通信的FTP文件传输业务速率均可达到理论 传输能力上限的92%左右，说明D2D验证平台支持下的D2D通信已经比较充分 地利用了 ETE物理层所能提供的传输能力。
第三，我们在Linux操作系统上使用开源的媒体播放器软件VLC视频播放 器搭建流媒体服务，使用RTP协议进行流媒体点播、直播功能，以验证D2D通 信对于不定速率的多媒体业务的支持能力。我们以一台D2D终端作为视频点播 源，另一台收听该视频点播。
73



图6-5基于D2D通信的视频点播业务演示
视频业务的效果如图6-5所示，视频的画面清晰稳定，说明D2D通信可以 很好地支持多媒体的业务。
6.2干扰协同性能分析
在网络中存在蜂窝上行用户的环境下，D2D终端可以通过方案中的干扰协 同算法充分利用蜂窝网络中空闲的上行频谱资源进行通信。干扰协同的场景可分 为近场干扰和远场干扰两种。

图6-6近场干扰场景实验示意图
74

在蜂窝上行通信对D2D通信产生强烈的近场干扰时，D2D终端将避开蜂窝 上行通信所使用的频域资源进行通信。我们令D2D通信的接收方与蜂窝上行终 端之间的距离在一米以内，D2D终端和蜂窝上行终端距离eNodeB的距离均在5 左右以形成近场干扰场景，如图6-6所示。

图6-7 D2D终端4吏用与蜂窝上行通信正交的频谱资源进行通信
图6-7展示了近场干扰场景下一个上行子帧内D2D通信和蜂窝上行通信的 频谱占用情况。图中横轴代表100个RB,纵轴代表功率测量结果，上下两图只 在颜色上进行区分，功率测量结果是相同的。蓝色为PUCCH预留的RB,绿色 为D2D通信占用的RB,红色为蜂窝上行通信占用的RB。从图中可以看出，在 蜂窝上行用户造成的干扰很高的情况下，D2D终端使用了与蜂窝上行通信完全 不同的频率资源，说明D2D终端可以有效探测空闲频段，避免D2D网络与蜂 窝网络之间的干扰。
75

图6-8近场干扰场景下正交通信策略与贪心占用策略对比
图6-8展示了在近场干扰场景下D2D通信吞吐率与蜂窝上行通信吞吐率关 系的测试结果，其中纵轴代表D2D通信吞吐率，横轴代表蜂窝通信吞吐率，一 定程度上代表了使用。使用正交策略的D2D终端可以以接近理论上限的速率进 行通信，而作为对照，使用全部频域资源进行传输的D2D终端在受到蜂窝终端 干扰的情况下通信效率急剧下降。这说明，在近场干扰场景下，D2D终端有能 力利用蜂窝上行通信未使用的空闲频谱进行可靠通信，実现频谱资源的高效利用。



'	图6-9远场干扰场景实验（极限条件）示意图
在D2D品信对蜂窝上行通信产生的远场干扰时，D2D终端可以以一定策略 进行干扰控制，复用蜂窝上行通信使用的频域资源，并控制D2D通信对蜂窝上 行用户带来的QoS损失。我们令蜂窝上行终端与eNodeB之间的距离在10米左
76
右，并在其天线上增加50dB衰减器以模拟蜂窝上行终端处在边缘覆盖的情况, 令D2D终端与eNodeB之间的距离在1米左右，以形成远场干扰场景，如图6-9 所示。（该场景为极限环境，目的是为了使得蜂窝上行通信的吞吐率可以降低到 QoS门限，而实际上这种场景出现概率较低）
-75-
uulmlkLIdiUuiiiUiluiUiiiiiUiluiJiilLuMliilHinjuuuljiuiulL dibiluuL
0 1G 20 现 4G 50	60	70	80 知
•拥2
图6-10 D2D终端对远场蜂窝干扰的功率测量结果


图6-11 D2D终端使用与蜂窝上行通信重合的频谱资源进行通信
图6-10展示了远场干扰场景下，ID号为8002的蜂窝上行终端对D2D终端 造成的干扰的功率测量结果，可以看岀此时蜂窝上行通信对D2D终端造成的干 扰近似可忽略。图6-11展示了远场干扰场景下…个上行子帧内D2D通信和蜂窝 上行通信的频谱占用情况。蓝色为PUCCH预留的RB,绿色为D2D通信占用
的RB,红色为蜂窝上行通信占用的RBo当蜂窝上行终端对D2D造成的干扰较 低时，D2D终端选择性地复用了该终端蜂窝上行通信所使用的频率资源，以更 大程度地提高系统整体吞吐量。同时，通过D2D的干扰控制算法，蜂窝上行通 信的QoS损失还可以被控制在预设的门限以上，如图6-12所示。
77


12000

图6-13 D2D通信与蜂窝上行通信吞吐率关系图（极限条件）
图6-13展示了在不同的蜂窝上行用户QoS损失率门限条件下，使用实际业 务测量得到的D2D通信和蜂窝上行通信的吞吐率关系。从图中可以看岀，通过 有效的复用策略，即使是在这种极限情况的实验场景下，蜂窝上行通信与D2D 通信的混合网络系统仍然可以达到与只允许其中一种通信的系统近似的系统吞 吐速率。而当蜂窝上行终端不处于边缘覆盖状态，或者D2D终端与eNodeB之
间的距离较远时，混合网络可以实现比只允许其中一种通信的系统高数倍的吞吐 速率。

图6-14远场干扰场景实验（一般条件）示意图

在如图6-14所示场景中，D2D终端与eNodeB之间的距离相对较远，且蜂 窝上行终端的收发天线处不再使用衰减器，这使得D2D终端对蜂窝上行通信造 成的较低干扰可以通过稍提高蜂窝上行终端发射功率的方式进行补偿。图6-15 展示了在这一场景下，使用实际业务测量得到的D2D通信和蜂窝上行通信的吞 吐率关系。此时混合网络的总容量为蜂窝上行网络与D2D网络之和，系统的总 吞吐速率实现了一倍左右的提升。
〜一	I — — r — 	 	 						―— Cellular Throughpu!
14COD		—+— D2D Throughput
Sum Throughput


CeUE Traffic ThreshoM (1-LossThreshold)
图6-15 D2D通信与蜂窝上行通信吞吐率关系图（一般条件）

79
由此我们可以得知，D2D验证平台可以很好地实现文献［27］的干扰控制算法, 验证了 D2D通信在蜂窝网络覆盖环境下可以与蜂窝上行通信实现良好共存。在 基站能够提供更多控制或辅助信息的情况下，我们有理由相信D2D验证平台还 可以实现并验证其它的干扰控制算法，使得D2D网络与蜂窝网络的混合网络在 不同的场景下获得更高的系统性能提升。
6.3中继通信
D2D验证平台在基本的点对点通信和广播通信能力的基础上，通过babeld 实现了自主路由和中继转发的功能。在如图6-16所示的实验场景中，终端1和3 之间由于距离较远且没有视距链路，导致不能直接通信，但二者可以通过终端2 实现中继通信。


图6-16 D2D中继通信场景示意图
图6-17通过文件传输业务展示了中继通信下的业务效果。ping业务的RR 字段表明当前通信链路经过了一跳的中继转发，而此时文件传输业务可以与ping 业务同时进行。这说明D2D验证平台系统可以为D2D中继通信提供良好的功能 支持。
80
]360,252^16
]360,400,512
]360,637,^84
]360,876,288
]368,960.272
I 361,130.368
1 361,351.1^4
1 361,4.^,256
]361,565.408
]361,671,112
]361,881,072
]362,B19?328
]362?221,232
]162,430,372
1 382,51G,512


6.4覆盖延伸

图6-18 D2D通信用于蜂窝覆盖延伸示意图
D2D技术的一个重要的功能是延伸蜂窝小区的边缘覆盖，这一功能也可以 通过D2D验证平台系统实现。当蜂窝终端和一个D2D终端连接在同一网段时, 即可通过简单的桥接和代理，模拟一个同时接入蜂窝网络和D2D网络，同时与 BS和其它D2D终端进行通信的复合终端。在图6-18所示的场景中，当UE1 与BS之间链路中断时,UE1仍可以通过与UE2的D2D链路与蜂窝网络连接， 并接入Interneto实验使用普通D2D终端模拟UE1,复合D2D终端模拟UE2。 在该工作模式下，UE1可以通过蜂窝网络访问Interneto图6-19展示了 UE1浏 览的Internet页面，画面右下角的图标说明UE1当前是通过移动4G网络访问
81


Internet 的。
图6-19 D2D通信用于蜂窝覆盖延伸业务演示图

























第七章总结与展望
7.1论文工作总结
在蜂窝移动网络下引入D2D通信，可以有效利用蜂窝授权频谱资源对移动 互联网夺地业务予以支持，实现提升网络整体吞吐，降低功率损耗等目的。为了 给D2D通信技术的理论研究提供验证性支持，本文旨在在ETE-Advanced协议基 础上，依托目前已有的D2D技术相关研究，设计和开发用于D2D技术可行性验 证的测试平台。为此，本文首先列举了该验证平台应满足的设计需求，根据已有 的相关理论研究论文分析了 D2D通信中的一些关键技术，并根据现有的蜂窝网 络状况给出了一系列系统假设和基本方案。随后，本文以分布式资源调度、通信 模式固定和复用蜂窝上行资源作为基本方案框架，提出了 D2D终端的整套初始 化和通信的流程，并对其中的系统同步、路由与终端发现、时域资源竞争接入、 无线资源选择、功率控制、自适应编码调制等关键技术提出了具体的可行性方案。 为了承载流程中的一些额外信令的传输，本文使用了一些系统频带外的资源作为 物理层的专用控制信道，并给出了 D2D协议体系下的逻辑信道与物理层信道映 射关系。
接下来，本文依托开源的SDR系统框架和基于GPP的LTE物理层算法，将 一些已有的物理层算法模块进行整合，给岀了包括协议栈、物理层和层0的系统 架构设计，并对各层根据功能模块进行了详细设计。首先介绍了协议栈基于消息 驱动的处理机制，可移植的无线资源管理模块设计，以及D2D协议栈相比于ETE 协议栈的定制化设计，并给岀了驱动协议栈的消息类别及其消息格式，随后介绍 了物理层各信道模块之间的功能与组合关系及多线程处理流程，最后介绍了提供 数据接收发送和采样率转换的层0的工作机制。随后，本文介绍了在系统开发过 程中应用到的一系列实时处理保障技术，包括流程的流水并行处理和轻耦合的接 口设计等，并给出了优化前后的系统实时性能比较。
本文的最后展示了开发完成的D2D验证平台系统实物，给出了基于该验证 平台的多台组网实验中，D2D通信所支持的基于IP的业务功能展示，包括FTP 文件传输、实时视频点播等，基于这些业务功能展示了 D2D验证平台对与蜂窝 网络之间的干扰协同能力，以及对中继功能的支持，说明了该D2D验证平台的 可用性与高效性。
总的来说，本论文创新性地完成了对D2D验证平台的流程方案和系统设计, 为蜂窝网络下D2D技术的功能验证提供了良好的基础，为新的D2D无线资源管 理方案提供了可靠的实验平台，也为D2D技术向工程实践的转化提出了一个可
83
行方向。而在通用处理器平台上，基于非实时的Linux操作系统开发这样的高实 时性要求的无线通信软件系统，其中所釆用的实时处理保障技术，也为日后类似 系统的开发提供了经验和技术支持。
7.2未来研究展望
本论文开发的D2D验证平台仍属于实验性质的系统，以下一些研究可在该 验证平台的基础上继续进行：
第一，本验证平台是在蜂窝基站不知道D2D网络存在的假设下开发的，D2D 终端不能通过基站接入蜂窝网络，基站也不能为D2D终端提供任何专用的控制 信令。而在实际的蜂窝网络与D2D网络的混合网络中，D2D终端将与蜂窝终端 在同一终端上实现，基站也将很有可能参与到D2D通信链路的建立和无线资源 管理等关键流程中。如果商用的基站可以提供相关功能，或者有新的相关研究可 以模拟蜂窝基站对D2D通信的支持功能，那么就可以在本验证平台上对D2D的 模式选择问题展开研究，同时也可以充分利用基站具备的全局调度信息提升现有 的D2D干扰协同算法的性能，进一步提高频谱利用效率和用户体验。
第二，本验证平台的协议栈中以终端对为单位建立无线承载，不同业务的数 据将使用相同的底层传输服务，然而不同的业务对于通信的实时性、准确性和吞 吐率的要求是不同的。因此本验证平台的后续研究可以尝试以业务或业务类型作 为参考进一步细化地建立无线承载，根据业务对通信性能的不同需求，为业务数 据提供不同的传输服务。
第三，本验证平台在设计中提出了 D2D局域网规模较小的假设，因此尚不 能支持大规模、大范围的D2D终端联网的需求。目前许多D2D技术的理论研究 在Ad-hoc网络拓扑研究的基础上，提出了多层次的D2D网络结构以解决这一问 题。后续研究可以以此为参考，增强本验证平台对复杂网络拓扑情况下D2D通 信的支持能力。
第四，本验证平台在中继选择的问题上，沿用了 babeld路由算法自身的中 继选择策略，即通过系统通信的延时和丢包率进行决策。然而由于D2D终端自 身具备链路测量的性能，如果能将链路测量信息用于中继选择策略，无疑将大大 提升路由算法的效率与实时性。同时，随着D2D网络拓扑的复杂化和多样化， 系统对路由与中继功能的需求也将进一步升级。因此在本论文的后续研究中，针 对专用于D2D通信的中继算法的研究也是一个可行的方向。
84
