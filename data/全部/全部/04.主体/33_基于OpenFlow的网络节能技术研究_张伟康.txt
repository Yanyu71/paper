
第一章绪论
1.1研究背景及意义
随着近些年互联网和云计算等ICT产业的快速发展，各种网络的建设规模 不断扩大，新型的网络架构也层出不穷的出现，而在网络快速发展的背后还有一 个不容忽视的因素一一网络能耗。互联网的规模日益扩大，导致了网络能耗的不 断增大，网络能耗占全球总能耗比重也逐渐增大。资料显示2007年互联网的能 耗已经达到了 90000亿千瓦时，占全球总能耗的约5.5%,该比重也在以每年 20%-25%的比重增长⑴。根据一些调査显示，由于网络等硬件设备的不断增多， ICT产业能耗在世界总能耗的2%-10%范围内变化，数据中心网络产生的能耗甚 至可以达到总能耗的23%[2Io意大利的研究学者，也指出在2013年的网络能耗 要比2012年的全球网络能耗提高19%[2]o网络产生的能耗之大，增长速度之快， 己经使网络能耗成为制约当前网络快速发展的关键因素。
在传统网络设计中有两个原则⑶，一是超额资源的配给，二是冗余设计。这 两个原则是为了增强网络的健壮性和应对网络突发流量而设定，但是却带来了两 个“副作用”。首先，超额资源的配置，由于为网络增加了大量的网络设备，直 接增加了网络能耗；其次，当网络处于负载较低时，存在大量低利用率的网络设 备，从而导致了网络能量利用率不高。随着互联网的发展，网络规模也日益的扩 大以及网络设备也在不断的更新换代，这两个原则带来的能耗高、效率低、浪费 多等诸多问题日益凸显。根据资料显示，骨干网中忙时的最大平均链路利用率不 足30%,很多类型网络的闲时链路利用率低于5%[4]o
网络能量利用率低与网络设备本身也有很大的关系，当前网络设备的能耗与 其处理流量的大小不匹配⑶。理想情况下，流量越少，网络设备消耗的网络能量 应该就越少。而实际的情况却与之相悖，网络设备的能耗基本上与网络流量的变 化无关，这也导致了网络中不进行流量处理或者处理较小流量的网络设备消耗了 大量的网络能量，产生了大量的能量浪费。
与此同时，随着互联网规模的日益庞大和网络需求的日益多样化，网络作为 社会基础设施重要的组成部分，其结构和功能日益复杂，网络管理者对网络功能 的管控力也逐步减弱。为了满足网络中日益增长的网络需求、保证网络的服务质 量(QoS： Quality of Service),最初只是定义为简单的数据转发单元的路由器在 功能上也变得臃肿不堪，并且各个路由器厂商的产品，为了自身技术的考虑只是 提供了少量的接口，研究人员难以在真实的网络中部署新型的网络架构和网络技 术⑹。为了解决现有的问题，世界各国和组织都致力于研究未来网络的体系架构。
OpenFlow，技术作为一种新型的网络体系架构协议，最初是由斯坦福的Nick McKeown提出，OpenFlow技术将网络的控制功能从网络设备中分离出来，网络 设备将控制平面下发的流表作为数据转发的依据。OpenFlow网络中的流表将网 络处理变得扁平化，并且可以对数据包进行更加细粒度的处理。在OpenFlow网 络中，网络的逻辑控制功能可以由控制器进行配置和管理，这样可以在不影响网 络的基本功能的前提下，部署新型的网络架构和网络协议。
随着云计算、移动互联网等不断兴起和快速发展，人们对于网络服务质量的 要求也越来越高，网络运营者和建设者在建设网络时，不得不关注高能耗所带来 的网络建设和运营成本的增加。同时，能量消耗其自身固有“碳足迹"，对环境 也产生了巨大的破坏和不利影响。建设绿色网络，实现网络节能，势在必行。
因此，近些年，网络能耗问题来引起了学术界和工业界的广泛关注，提出越 来越多行之有效的方案来降低网络能耗和提高网络的能量利用率。由于 OpenFlow网络控制和管理功能的分离，对于网络管理控制带来了极大的灵活性, 也有许多的学者不断尝试利用OpenFlow技术来解决网络的能耗问题。
1.2国内外相关研究现状及趋势
网络节能技术的研究一直是学术界和工业界研究的重点，当前网络节能技术 主要分为两种：设备级节能技术和网络级节能技术团。
（1）	设备级节能技术
设备级节能技术就是当网络设备负载非常低时，将设备的某一个部分比如网 卡、设备背板等网络设备部件进行关闭或者是调节到较低的功率上，从而可以降 低网络的能耗。设备级节能技术一般也可分为两个方面⑶：设备级休眠技术和动 态适配技术。
为了实现网络设备能耗与负载匹配，降低以太网的能耗，电子电气工程师协 会（IEEE）正式批准了 802.3azEEE标准规范㈣，其中EEE是Energy Efficient Ethernet的缩写，即是高效节能的以太网。该标准规范旨在降低网络设备的能耗， 当网络设备的负载较轻时，网络设备自动调节为低能耗状态，这样网络设备的能 耗就能与其负载的大小成比例，从而降低了网络的能耗，提高了能量的利用率。
网络链路速率动态适配技术通过根据网络负载的变化，动态调整网络接口的 配置速率，从而减少了低流量网络链路带来的能量浪费。网络链路速率动态适配 技术方案重点研究是链路速率调整的条件和时机，既要满足能耗的最优目标和服 务质量约束，也要避免频繁的速率调整所引起的网络振荡。
（2）	网络级节能技术
网络级节能技术是当网络处于低负载时，通过修改路由将网络流量聚集在某 一个子拓扑上进行传输，然后关闭其他无用的网络设备或链路，从而实现网络节 能。
网络级节能技术一直学术界研究的热点。文献［11］基于对传统网络域内路由 协议的OSPF的修改，通过将网络中的设备分为ER和IR、NR三种类型，节点 ER与普通OSPF协议中的节点一样，利用Dijkstra算法去计算以自己为根节点 到其他节点的路由，IR在计算以自己为根的路径树会复用其临近的ER的路径树 (计算出来的路由)，从而降低了网络规模，但是由于该方案是对传统网络协议 进行修改，将产生一定程度上的网络开销，并且该节能算法并不能适应高负载、 网络突发流量等情形。文献［12］基于OpenFlow技术实现了在数据中心网络实现 了网络节能，通过将网络流量限定在某个子拓扑中进行传输，节省了网络的能量, 论文中指出网络在该算法下可以节约50%的网络能量，但是该方案主要在数据中 心网络，具体来说是FatTree拓扑中研究，所提出ElasticTree算法的普适性较为 有限。文献［13］使用图论中代数连通度的概念，基于网络代数连通度阈值和网络 性能两个参数，文中提出的算法首先根据每条链路对网络拓扑的代数连通度的影 响做一个排序，然后将影响较小的链路从当前拓扑中试着删除，如果删除后的拓 扑的代数连通度满足代数连通度的阈值，则可以将该链路进行删除，仿真显示该 中算法在节能方面具有很好的作用，但是该算法没有将网络的实时流量这个重要 的信息纳入到算法的计算参数中，并且该算法的复杂度较高。
以上介绍了当前设备级节能技术和网络级节能技术，其中设备级节能技术的 研究相对较为完善，网络设备厂商已经推出了很多成熟的网络节能产品。而网络 级节能技术虽然有很多节能模型提出，但是仍然有很多的问题需要解决，因此本 文主要关注网络级节能技术。通过上述的分析，当前网络节能技术主要存在实时 获取网络流量困难、应对网络突发流量差、计算复杂度高、网络开销大等问题。 为了有效地解决这些问题，本文利用OpenFlow技术提出了基于网络实时流量的 节能算法(Real-Time Traffic Energy Saving： RTT-ES)。该算法利用 OpenFlow 技 术，可以方便的获取网络设备的流量。在OpenFlow网络中，控制消息通过安全 通道传输，不会对数据转发网络产生附加的网络开销。在大多网络节能算法中以 网络链路利用率或吞吐量作为判断指标时，釆用固定阈值策略来判断网络资源空 闲与否，而固定阈值策略往往不能与网络实时负载状况相匹配。为了能够有效地 应对网络突发流量，在基于固定阈值RTT-ES算法的基础上提出了改进算法一一 基于动态阈值的RTT-ES算法，该算法通过动态调整阈值以匹配网络负载，从而 保证网络服务质量。
1.3论文内容与章节安排
本文在深入分析网络能耗现状、当前网络节能相关技术、网络流量模型的基 础上，详细分析了当前两类节能技术的研究现状，并指出了当前网络级节能技术 中存在的不足和缺陷，为此提出了一种基于网络实时流量的网络节能算法。该算 法在满足网络服务质量的基础上，借助于OpenFlow技术，利用网络实时流量信 息，对网络进行节能操作。本文还借助于接近真实硬件环境的仿真工具Mininet 和企业级网络控制器Floodlight来评估RTT-ES算法的性能。
为了详细介绍RTT-ES算法，本文的章节具体安排如下：
第1章首先介绍当前网络能耗现状，分析网络出现能耗大、能量利用率低的 原因，然后重点阐述了当前主流网络节能技术以及当前网络级节能技术的研究现 状，并指出其不足和缺陷，最后在此基础上简要的介绍本文提出的算法。
第2章对OpenFlow技术的相关发展历程进行了回顾，介绍了 OpenFlow协 议1.0版本的具体内容，包括流表的基本结构、数据包的匹配和解析过程、 OpenFlow协议的三种消息类型。然后，介绍了当前主流控制器，对本文仿真釆 用的Floodlight控制器的功能模块进行了具体的介绍。最后总结OpenFlow协议 在实现网络节能方面的四大优势。
第3章首先介绍了本文釆用的能耗模型一一简化能耗模型，并对网络节能问 题进行了数学模型。然后，基于网络流量分布的普遍规律性以及OpenFlow技术 在网络节能上的优势，提出了基于网络实时流量的节能算法RTT-ESo为了能够 更好地应对网络突发流量，本文在基于固定阈值的RTT-ES算法的基础上提出了 改进方案——基于动态阈值的RTT-ES算法，给出了两种RTT-ES算法的具体流 程，并对动态阈值算法和负载均衡算法进行了讨论。
第4章在RTT-ES算法的基础上设计了网络节能系统，讨论了节能系统中主 要功能模块，并在实际的网络控制器Floodlight上实现了该节能系统。
第5章比较分析了 RTT-ES算法的性能。首先，简单介绍了仿真环境和评价 标准。然后讨论了 RTT-ES算法的节能效果以及对网络QoS影响，还分析了当网 络突发流量时，固定阈值和动态阈值的RTT-ES算法对网络QoS的影响。最后还 对基于动态链路权重的路由算法的进行了性能评价。
第6章，对本文的创新点和贡献进行了总结，并对本研究存在的问题和下一 步的研究方向进行了探讨。
第二章OpenFlow关键技术
OpenFlow^是软件定义网络实现控制功能和数据转发功能分离的关键技术。 本章主要介绍OpenFlow关键技术，首先回顾了 OpenFlow技术的发展历程，然 后对OpenFlow协议中的流表、数据匹配和解析流程、OpenFlow三种类型消息 的具体内容进行详细介绍。接着，也介绍几种主流的开源OpenFlow控制器，并 对本文仿真釆用Floodlight控制器的主要模块进行了详细的描述。最后，分析给 出了 OpenFlow技术在网络节能上的优势。
2.1 OpenFlow发展历程
软件定义网络(Software Defined networking, SDN)〔⑷是一种新型的网络架 构，如图2.1四所示。SDN网络架构包括三层，分别是基础设施层，控制层和应 用层。基础设施层主要由物理转发设备组成，主要负责网络数据包转发工作，控 制器层是SDN网络的“大脑”，由控制器构成，主要负责网络的链路发现、路由 计算、设备管理等，应用层是网络应用者根据个性化需求制定的应用程序。SDN 的核心思想是将网络的控制功能和数据转发功能进行分离。在SDN网络中，网 络研究者可以更加专注于网络控制功能的开发而无需关注底层的转发设备，给网络开发者带来了极大的便利。
业务应用
API



$ OpenFlow协议等
基础设施层
图2-1 SDN架构图
OpenFlow 是当前软件定义网络(Software-defined Networking, SDN)的南 向接口通用协议。OpenFlow最初是在从斯坦福大学Clean state计划资助的 Ethane项目发展起来，该项目尝试使用集中式的控制器让网络管理员可以更加便 捷地定义基于流表的安全策略，并且将这些安全策略应用于网络设备中，从而实 现对整个网络通信的控制和管理。
2008年，斯坦福大学的Nick Mckeown教授发表的一篇重要的论文 "OpenFlow： Enabling Innovation in Campus Networks"】 ”，正式提出了 OpenFlow 的概念。OpenFlow的最初出发点是考虑到网络创新思想需要在实际网络上才能 被更好地验证，而研究人员又无法修改网络中的设备。通过OpenFlow,网络可 以实现将控制功能和数据转发功能的相分离，研究者可以通过编程实现新型的网 络协议。
2009年，第一个可用于商业化的正式标准OpenFlow Specification Version 1.0.0[15]正式发布，标志着OpenFlow协议正式地走向了商业化。
2011 年 3 月，在 Nick Mckeown 教授等的推动下，由 Google> Facebook、 Microsoft公司等联合成立了非盈利性的开放网络基金会(ONF, Open Networking Foundation) [14],该组织致力于SDN网络的发展和标准化工作。
2015 年 5 月，ONF 发布了 最新 OpenFlow Specification Versionl.5。
OpenFlow的核心思想的将网络的控制功能和数据转发功能进行分离， OpenFlow是作为SDN(software defined network,软件定义网络)的原型提出的， 主要包括OpenFlow控制器和OpenFlow交换机两个部分，如图2-2。OpenFlow 交换机作为SDN网络的数据转发平面，以OpenFlow控制器下发的流表作为数 据转发的依据，通过与控制器建立的安全通道与控制器通信。OpenFlow控制器 作为SDN网络的控制平面，拥有网络的拓扑信息、流量信息等，并且负责整个 网络的决策工作，是SDN网络的“大脑”，控制着各种网络行为。

图2-2 OpenFlow网络通信架构图

2.2 OpenFlow 协议
OpenFlow协议从2009年发布第一个可商用化版本1.0协议开始，到2015 年5月发布了最新的1.5版本，本文主要是基于OpenFlow协议1.0版本进行介 绍。
2.2.1 OpenFlow 流表
OpenFlow的核心思想是将网络的控制功能和数据转发功能进行分离，数据 的转发功能由OpenFlow Switch来完成，而交换机以控制器下发的流表为转发依 据，流表结构如表2-1所示：
表2-1流表组成表
包头域	计数器	动作列表
(Header Fields)	(Counters)	(Actions)
如表2-1所示，OpenFlow流表项包括三个部分，包头域(OpenFlow vl.l之 后成为匹配域)、计数器、动作：
1)包头域(header fields)
包头域主要负责数据包匹配字段的描述，其结构如表2-2所示：
表2-2包头域
Ingress	Ether	Ether	Ether	VLAN	VLAN	IP	IP	IP proto	IPTOS	TCP/UDP	TCP/UDP
Port	Src	Dst	Type	id	priority	src	dst		bits	Src port	Dst port
如表2-2所示，包头域主要是为了实现与接收到的数据包进行匹配。在 OpenFlow协议1.0中，支持了 12元组，涵盖了 TCP/IP协议组中第二层到第四 层的网络配置信息，每个元组中既可以支持精确匹配，也是支持对于任意值得匹 配。12元组的匹配方式科技更加细粒度地管理网络中的数据流。
2)计数器(Counters)：
OpenFlow协议中为每张流表、每条流表项、每个交换机端口和每个队列都 是设置了一个计数器，如表2.3所示，针对每张流表，可以统计当前活动的表项 数、数据包的査询次数、数据包的匹配次数等；针对每个流表项可以统计接收到 数据包的个数、接收的字节数、以及生存时间；针对于每一个端口，可以统计每 个端口接收和发送数据包的个数、字节数等信息；针对于每一个队列，可以统计 发送的字节数和包个数以及发送溢出(Overrun)错误次数等。
3)动作(Actions)：
OpenFlow协议中的动作(Actions)用于指示交换机在收到匹配的数据包时应 该进行的行为操作。在传统网络中，二层交换机只能对帧进行转发和修改VLAN 的信息，三层路由器只能对数据包进行转发和修改MAC (包括源地址和目的地 址)的操作，这些操作都是基于固定的协议和配置来进行，用户无法进行自定义。 在SDN网络中，OpenFlow交换机缺少了网络控制的能力，所以对匹配数据包的 处理不仅仅是简单的转发等操作，而是需要用动作(Actions)来详细地说明交换机 将要对数据包所做的处理操作。

表2-3计数器
类型（type）	计数器(counter)	位数(bits)
每张表	有效表项	32
匹配的数据包	64
査表的数据包	64
每条表项	接收的数据包	64
接收的字节	64
持续时间（秒）	32
持续时间（纳秒）	32
每个端口	接收的数据包	64
发送的数据包	64
接收的字节	64
发送的字节	64
接收出现的错误	64
发送出现的错误	64
接收的帧排列错误	64
溢出错误	64
CRC校验错误	64
帧冲突	64
每个队列	发送的数据包	64
发送的字节	64
溢出错误	64

OpenFlow交换机通过定义动作列表来描述对数据包进行的各种操作。动作 又可以分为两种类型：必备动作（Required Actions）和可选动作（Optional Actions）。 顾名思义，必备动作是所有的OpenFlow交换机必须默认支持的，而可选动作并 不是所有交换机都必须支持的。如果交换机接收到一个本身不支持的动作，则交 换机会向控制器发送一个错误消息，OpenFlow 1.0协议中规定的动作如表2-4和 2-5所示：
表2-4必备动作表
类型	名称	说明
必备动作	转发(Forward)	交换机必须将数据包转发给设备的物理端口及如下 的一个或多个的虚拟端口 ：
ALL：转发给除了入端口外的所有其他端口
Controller：封装数据包并转发给控制器
Local：转发给本地的协议栈
Table：对PacketOut消息执行流表的操作
InPort：从入端口发出
丢弃(Drop)	对于没有明确指明动作列表的流表项，交换机将会把 匹配该流表项的所有数据包进行默认的丢弃操作

表2-5可选动作表
类型	名称	说明
可选动作	转发(Forward)	交换机可选支持将数据包转发给如下的虚拟端口：
NORMAL：利用传统交换机原有的转发机制来对数据包进 行处理
排队	交换机将数据包转发到某个出端口对应的转发队列上，便 于提供QoS的支持
修改域
(Modify-Field)	交换机可选修改数据包的包头内容，可以包括： 设置VLAN ID、VLAN的优先级、剥离VLAN头 修改源MAC地址、目的MAC地址
修改源IPv4地址、目的IPv4地址、Tos位 修改TCP/IP端口，目的TCP/IP端口

2.2.2流表的匹配
前一小节中给出了 OpenFlow协议中流表项的结构，该节主要介绍交换机完 成数据包匹配和处理的具体流程，协议中规定的流程如图2.3所示。
在OpenFlow vl.O中流表项的包头域中定义了 12元组，交换机必须将数据 包中的12元组中的信息解析出来，然后进行流表匹配。如果流表匹配成功，就 应用该流表项后的动作(Actions)o如果没有匹配的流表，则将数据包通过安全通 道发送到控制器，交由控制器进行处理，具体如图2-3所示。
9

图2-3交换机处理数据流的流程图

在图2-3中存在一个可选的STP处理过程。OpenFlow 1.0版本在设计之初, 希望OpenFlow交换机和传统的二层网络交换机进行混合组网，因此为了交换机 防止存在连接环路而造成网络广播风波，一些OpenFlow交换机可以通过配置启 动生成树协议。当OpenFlow交换机接收到数据包时，首先判断是否为生成树协 议的BPDU,如果是生成树的协议的BDPU,则交由生成树协议的进行处理，否 则进行解析包头，进行匹配。
在图2-3中包头解析并没有详细的介绍，图2-4详细地描述了数据包头解析 的流程。
当OpenFlow交换机接收到数据时，初始化包头的入端口、以太网的源地址 和目的地址、协议类型，并将包头的其他元组设置为0,继续根据以太网协议类 型来决定接下来的解析流程：
1.如果以太网协议类型是0x8100,则表示这是一个含有VLAN标签的以太 网数据帧，此时就解析VLAN标签和VLAN优先级字段，然后更新二层协议类 型字段继续判断；
2.如果协议类型是0x0806,表示这是一个ARP数据包，根据ARP数据包 中的IP源地址和目的地址更新匹配包头信息，然后结束解析流程
3.如果协议类型是0x0800,表示这个IP数据包，则解析IP数据包中的IP 源地址、目的地址、协议类型和TOS字段，然后根据IP包头中的协议类型继续 解析TCP/UDP和ICMP的协议信息，至此，就得到了流表项包头域中的12元组 的信息。
数据包的解析过程完成后，就可以根据数据包的12元组信息进行后续的匹 配流程；
10


图2-4包头解析的流程图

2.2.3 OpenFlow 消息类型
OpenFlow交换机通过安全通道利用OpenFlow消息与控制器进行通信，如 图2-2所示。在OpenFlow协议中，定义了三种类型的消息：控制器到交换机的 消息、异步消息、对称消息。
1.控制器到交换机消息(Controller-to-Switch Message)
顾名思义，该类型消息是由控制器发送到交换机的消息，主要用于管理和 获取当前交换机的状态信息，包括Features消M. Configuration消息、Modify-State 消息、Read-State 消息、Send-Packet 消息、Barrier 消息。
1)Features消息：控制器通过Features消息可以获取交换机的特征描述信 息，当控制器和交换机建立连接后，控制器就可以通过该消息获取交换机的特征 描述信息；
2)Configuration消息：控制器通过Configuration消息配置交换机的一些参 数；
3)Modify-State消息：控制器通过该消息可以修改交换机的状态，可修改的 状态包括流表信息和端口状态信息等；
4)Read-State消息：通过该消息可以获取交换机的状态信息，控制器可获 取交换机的状态信息包括流表的查询、端口信息的查询以及其他的统计查询；
5)Send-Packet消息：控制器可以通过把该消息通过交换机的某个端口发 到数据平面中，用于转发数据包；
6)Barrier消息：控制器通过该消息来确保之前下发的消息已经被交换机执 行完毕；
2.异步消息(Asynchronous Message)
异步消息主要是由交换机发送到控制器的消息，主要用于交换机通知控制器 网络和交换机状态的变化，该类型的消息包括：Packet-In消息、Flow-Removed 消息、Port-Status 消息、Error 消息。
1)Packet-In消息：当到达交换机的数据包没有匹配的流表表项时，就会向 控制器发送Packet-In消息。如果交换机有足够的缓冲区时，首先将该数据包放 入缓冲区，然后数据包的包头信息和缓冲区编号以packet-in的方式发送到控制 器。如果交换机没有足够的缓冲区空间，就把该数据包全部发送到控制器；
2)Flow-Removed消息：当交换机中的流表项因超时被删除或者被控制器下 发信令删除时，都会向控制器发送该消息，用于标识该流表项发生了变化；
3)Port-Status消息：当交换机的端口状态发生变化时，交换机就会向控制 器发送该消息，比如交换机端口被置为down或者up时，就会向交换机发送该 消息；
4)Error消息：交换机通过Error消息来通知控制器发生的错误消息；
3.对称消息(Symmetric Message)
该类型的消息可由控制器或者交换机的任意一方进行发起，并且该消息类型 一般是成对出现的，包括Hello消息、Echo消息、Vendor消息：
1)Hello消息：当交换机和控制器建立连接后，就通过该消息进行握手并且 协商使用OpenFlow协议的版本信息；
2)Echo消息：该消息主要用于指示交换机和控制器之间的连接的是否处于 活动状态、延迟和带宽等信息；
3)Vendor消息：该消息属于厂商的自定义消息，厂商可以提供额外的非标 准控制功能。
2.2.4 OpenFlow协议在网络节能方面的优势
前一节详细的介绍了 OpenFlow协议的具体内容，包括流表、匹配流程，以 及OpenFlow协议规定的三类信令，其中流表是OpenFlow网络中控制和数据转 发分离的重要部分。由于OpenFlow网络中控制和数据转发功能相分离，网络的控制信令通过安全通道发送到交换机，所以在OpenFlow网络中控制信令产生的 网络开销相对较小。根据前文介绍的OpenFlow三类消息的具体内容，本节具体 分析OpenFlow协议具有若干特性，可以有效解决传统网络中进行网络节能遇到 的实时流量统计困难，网络信令开销大等问题。
1.控制器可以方便地周期性获取OpenFlow交换机端口的流量
在OpenFlow协议中，控制器可以通过Read-State消息来获取交换机每个端 口的流量，也就是网络中每条链路的流量。
为了能够精确的获取到各个交换机的流量统计信息，控制器周期性的去查询 各个交换机端口中的流量（以字节为单位），然后利用两次查询之间的差值作为该 端口有关链路的流量信息，通过该值与链路容量的比值，就可以计算出包含该端 口的链路利用率。
首先定义一个获取流量的周期T,在本论文中设定的査询周期是T=5s,控 制器通过向每一个交换机发送一个STATS_REQUEST消息，去请求各个交换机 的端口的流量信息，然后各个交换机会向控制器发送一个STATS_REPLY消息， 该消息中包含了该交换机各个端口当前接受和发送的字节总数，然后控制器会保 留该字节信息，当下一个周期到达时，控制器继续向交换机发送获取流量统计信 息的请求消息，通过两次査询到的字节信息，求差值，可以计算出当前的交换机 端口的流量速率。
每次査询交换机上流量信息的网络开销是非常小的，请求消息和响应消息的 包的大小分别是8字节和104字节（根据OpenFlow协议具体定义得到）。
2.控制器能够控制OpenFlow网络中链路的开启和关闭
在OpenFlow协议中，支持通过Modify-State消息去控制网络中网络链路的 开启（up）和关闭（down）操作，通过网络链路的开启和关闭，可以将原有的 网络拓扑进行一部分的裁剪，然后对网络中的数据流进行重新的规划路径，从而 可以到达网络节能的目的，这是在OpenFlow网络中能够进行网络节能的基础。
3.控制器能够方便实时获取全网拓扑
链路发现技术是软件定义网络获取全网信息的基础，OpenFlow控制器通过 使用链路发现协议（Link Layer Discovery Protocol, LLDP）作为链路发现协议。 控制器执行链路发现的过程中，控制器会以PacketOut消息来想与之相连的交换 机发送LLDP的数据包,该消息会使交换机将LLDP的数据包发送给所有的端口 o 控制器通过接下来收到了的Packetin的消息，建立整个网络的拓扑视图，拓扑发 现的机制在控制器中是周期性执行的。
根据OpenFlow协议的规定，当交换机的网络端口状态发生变化时，会向控 制器发送一个Port_Status消息，该消息表示底层网络拓扑发生变化，通过该消息控制器得以感知网络的变化，从而可以实时掌握网络拓扑的状态。
4.控制器能够随时更新数据流的传输路径
当达到交换机的数据包没有匹配的流表项时，交换机会向控制器发送一个 Packetin消息，控制器会为该数据包计算传输路径。当网络的拓扑和负载状态发 生变化时，控制器也可以通过Modifystate消息对流表项修改，从而可以实时的 更改数据流的传输路径。
2.3 OpenFlow 控制器
2.3.1主流控制器
OpenFlow控制器作为SDN网络中的核心“大脑”，其重要性自然不言而喻， 学术界和工业界也都致力于研究各自的OpenFlow控制器，控制器的发展也呈现 出百花争鸣的发展态势。本小节将简单的介绍当前一些主流的控制器。
1.NOX/POX[2°]控制器
NOX控制器是由Nicira公司主导开发，是第一个开源的SDN网络控制器。 由于Nicira公司的创始团队大多来自于斯坦福大学的OpenFlow的研究小组，所 以可以说NOX是和OpenFlow协议互相推动发展起来的。NOX是基于C++语言 开发的，NOX的核心组件提供了用于与OpenFlow交换机进行通信的API和一 些功能方法，包括连接、事件引擎、路由计算法、拓扑发现等。
POX控制器也是Nicira公司开发的一款控制器，POX主要是基于Python语 言的，POX是在NOX的基础上开发的，其事件处理机制和NOX保持高度的一 致。
2.Floodlight1211 控制器
Floodlight是一款基于Java语言的企业级的OpenFlow网络控制器，遵循 Apache规范，主要由来自Big Switch Networks公司的工程师来维护该项目。 Floodlight控制器是基于斯坦福大学的Beacon控制器开发的，是作为Big Switch 公司商业版控制器Big Network Controller (BNC)的开源版本开源共享，旨在为 企业提供SDN应用的解决方案。
Floodlight控制器除了提供NOX和POX控制器中提供的基本网络功能外， 还提供了友好的前端Web管理界面，用户通过浏览器可以方便的査看网络中交 换机、主机、流表、网络拓扑等信息。
3.Ryipa控制器
Ryu是一个基于组件完全用Python实现的开源的控制器，由日本电报电话 公司的实验室负责支持。Ryu的目标是提供了一个拥有逻辑上集中控制能力的SDN操作系统，Ryu的组件包括OpenFlow协议支持、事件管理、消息机制、内 存状态管理、应用程序管理、基础设施服务和一系列可重用的库。Ryu 一个重要 的特点就是Ryu支持OpenStack云计算管理平台整合，并且也支持GRE的叠加 网络和VLAN配置。
当前，Ryu控制器己经被Pica8等公司在其推出的面向云计算的网络开发平 台产品中釆用，取得了良好的效果。随着OpenStack的不断发展和成熟，Ryu在 利用SDN改善云计算服务方面将会起到越来越重要的作用。
4. OpenDayLight"】控制器
OpenDaylight (ODL)项目是在2013年初由Linux协会联合业内多家企业 包括思科、瞻博、博通等创立，OpenDaylight项目的目标是推出一个开源的通用 的SDN开发平台。OpenDaylight控制器具备拓扑管理、交换机管理、路径转发 管理、主机管理、网络资源切片这5个基础功能，支持OpenFlow.LISP(Locator/ID Separation Protocol)^ BGP (Border Gateway Protocol)等多种协议，多个控制器 之间可以釆用集群的模型进行工作。
OpenDaylight控制器与之前NOX等控制器不同的一点是OpenDaylight在南 向接口不仅支持OpenFlow协议，还可以支持其他多种的南向接口协议，并且对 于底层网络也支持传统交换机和OpenFlow交换机。OpenDaylight控制器也提供 开放的北向接口，网络的开发者可以依据北向接口开发定制化的网络应用。 OpenDaylight控制器也是可以跨平台使用，可以部署在任何支持Java开发环境 的系统平台上。
在众多OpenFlow网络控制器中，Floodlight控制器性能相对较好，支持的 节点较多，并且Floodlight模块化的加载方式，可以使研究人员非常容易的加载 和扩展控制器的功能系统。因此，Floodlight控制器成为研究人员的首选，本文 也基于Floodlight控制器实现了网络节能系统。
2.3.2 Floodlight 控制器
Floodlight作为一款企业级跨平台的网络控制器，具有以下的特点：
?模块化的加载系统，可以非常容易的加载和扩展控制器功能系统；
?支持虚拟和物理的OpenFlow交换机；
?支持OpenFlow网络和非OpenFlow网络的混合组网；
?具有较高的性能，可以达到企业级的使用标准；
?支持OpenStack云管理平台；
?在较小的依赖下即可运行；
?广泛地支持各个主流厂家的OpenFlow交换机。
Floodlight项目是Github上的一个开源项目,使用者可以轻松的获取项目源 码。Floodlight控制器釆用模块化的结构来实现控制器功能和应用，主要的模块 主要包括事件管理模块(FloodlightProvider)、拓扑管理模块(Topology Manager) > 链路发现模块(LinkDiscovery)、设备管理模块(DeviceManager)、转发模块
(Forwarding )o
1.事件管理模块
事件管理模块主要负责了两大主要功能。?首先，FloodlightProvider负责了与 OpenFlow控制器的连接(通过Netty架构)，并将接收到的OpenFlow消息转换 为对应网络事件，从而其他监听该事件的模块可以对OpenFlow消息做出处理。 其次,FloodlightProvider可以决定监听网络事件的模块处理对应消息(Packetin、 FlowRemoved、PortStatus等消息)的顺序，模块处理对应的消息时可以决定将 消息继续按照次序传递依次处理还是结束处理消息的流程。
2.拓扑管理模块
拓扑管理模块主要负责维护网络的拓扑信息，并且为网络计算最短路由路径。 拓扑管理模块是通过从链路发现模块获取的链路信息计算网络拓扑。在拓扑管理 模块中，有个OpenFlow域(island)的概念，OpenFlow域是由OpenFlow交换 机互相连接构成的拓扑，不同的OpenFlow域之间可以通过非OpenFlow交换机 进行连接。拓扑管理模块会将所有的拓扑信息保持在一个不变的数据结构 (Topologylnstance)中，如果网络的拓扑发生任何的变化，一个新的实例将会 被创建，然后拓扑变化的通知消息将会被发出，从而其他监听拓扑变化通知消息 的模块将会接收到该消息。
3,链路发现模块
链路发现模块主要负责发现网络中的链路信息，并且保持网络中链路的状态。 链路发现模块通过链路发现协议LLDP和BDDP消息来发现网络中的链路。如 果LLDP数据分组从一个端口发出去，另外一个端口收到了同一个LLDP数据分 组，这就说明这两个端口是直连的，从而会建立一条直连链路。如果一个BDDP 分组从一个端口发送，从其他的端口收到了该分组，说明两个交换机之间有控制 器无法控制的二层交换机，就会建立一条广播链路。
4,设备管理模块
设备管理模块主要负责记录在OpenFlow网络中的设备信息。设备管理模块 从Packetin请求消息中获取设备信息，并且通过实体分类器将设备进行分类。在 默认情况下，实体分类器是使用MAC地址和VLAN来标识一台设备，设备管理 器也可以获取其他的信息比如IP地址、最后一次观察到的时间信息，还可以获 取设备上次接入交换机的DPID及端口。
5.转发模块
转发模块主要是负责将数据包在两个设备之间进行转发，源主机和目的主机 主要是通过IDeviceService进行标识。由于Floodlight控制器是支持OpenFlow网 络和非OpenFlow网络的混合组网，所有转发模块也必须将混合组网的情况考虑 在内。为了实现这个目的，转发模块会找出所有的源主机和目的主机的OpenFlow 域,然后转发模块就会把沿着最短的路径路由将相关的流表下发到对应的交换机 上。如果在OpenFlow域中收到Packetin消息，但是在OpenFlow域中没有该设 备的依附点，那么这个数据包将会被广播出去。
2.4 OpenFlow网络仿真平台
当前包括思科、华为、NEC等设备厂商推出了 OpenFlow专用硬件交换机。 除了一些硬件交换机设备外，OpenvSwitch作为一款虚拟软件交换机也得到了广 泛的使用。Mininet1171是基于OpenvSwitch开发出来的OpenFlow网络仿真平台。 本节主要介绍Mininet的相关内容。
2.4.1 Mininet概述
Mininet是一个可以在单个有限资源的普通PC上快速建立大规模SDN网络 原型系统的仿真工具，由斯坦福大学Nick Mckeown教授小组在发表的论文“A Network in a Laptop： Rapid Prototyping fbr Software-Defined Networks "卩句中正式 的提出。Mininet是基于Linux Container轻量级的内核虚拟化技术，能够在单个 普通PC上秒级别时间内创建一个运行于真正内核和应用的真实硬件环境的虚拟 网络。在Mininet中，所有的虚拟主机、OpenFlow交换机、控制器、链路等， 虽然是使用软件创建，但是它们与真实网络环境的中设备基本没有区别。Mininet 还可以将一个真实硬件网络作为虚拟网络的一部分，真实硬件网络和软件虚拟网 络是可以共存的oMininet中最为重要的一个特点就是在Mininet中运行地所有的 代码可以无缝迁移到真实的硬件环境中，这极大地方便了研究者在OpenFlow网 络中进行新型网络协议的验证以及网络功能的测试。
Mininet以其轻量级、可移植性等特性，从提出之初就得到了学术界的广泛 关注，其主要的特性可以总结如下：
1）	灵活性：研究者可以利用Mininet,简单快速地创建一个用户自定义的网 络拓扑，并且可以为网络快速地配置各种功能；
2）	可移植性：研究者在Mininet中编写的测试开发代码可以无缝地迁移到 支持OpenFlow协议的硬件中；
3）	可扩展性：Mininet支持拥有成百上千个网络节点的网络；
4）	真实性：Mininet实验平台中，网络行为与真实网络中保持着高度的一致 性，并且Mininet中模拟的主机可以运行任何可以运行在宿主机中的程序。而其 他的仿真工具比如NS-3,其真实性与Mininet相差甚远；
5）	简便性：研究者可以提供了丰富的Python API,通过编写Python scripts 来进行网络的研究。
2.4.2 Mininet库文件
Mininet不仅为使用者提供了友好的可交互式命令行，还提供了丰富的库文 件泌1,根据这些库文件可以灵活地创建网络。Mininet提供的库文件主要有6个： mininet.cli 模块、mininet.link 模块、mininet.net 模块、mininet.log 模块、mininet.node 模块、mininet.topo模块。通过这些模块，使用者可以自定义编写网络脚本，实 现自定义的网络功能。
1.Mininet.cli 模块
该模块主要包括CLI类，能够为网络节点提供命令行终端控制台。
2.Mininet.link 模块
该模块描述了与网络链路相关的类，包括Intf类、TCInf类、Link类、TCLink 类。其中Intf类表示网络中节点接口, TCInf类通过tc（Linux系统下的traffic control 工具）限制带宽、延迟、分组丢失率、最大排队长度等链路信息，TCInf类是Intf 类的子类，Link类标识的虚拟网络中的一条链路，而TCLink类是Link类的子 类，TCLink是链路两端都是TC接口的Link。
3.mininet.net 模块
该模块包括Mininet类和MininetWithControlNet类，其中Mininet类表示模 拟的虚拟网络，包括拓扑、交换机、主机、控制器、链路等信息。 MininetWithControlNet 类是 Mininet 的子类，主要用于在使用 userspace datapath 时模拟一个控制器网络。
4.mininet.log 模块
该模块下主要包括MininetLogger类，主要用于实现日志记录等功能。
5.mininet.node 模块
node模块下主要包括了描述网络基本元素的类，包括网络中的主机、交换机、 控制器等，包括Node类，Controller类，Host类、Switch类。其中Node类是其 他三个类的父类，在实现上其实就是网络名字空间中的一个shell进程，可以通 过各种管道进行通信。Controller类表示网络中的控制器，Host类表示网络中主 机，Switch表示网络中的OpenFlow交换机，这三个又包含许多的具体的实现子 类。
6.mininettopo 模块
mininet.topo模块主要负责标识网络拓扑的相关信息，包括Topo类、 SingleSwitchTopo 类、SingleSwitchReverseTopo 类、MinimalTopo 类、LinearTopo 类。其中Topo类是网络拓扑基类，所有拓扑相关实现类的父类，其他的类都是 Topo类的直接子类，标识了特定的网络拓扑，比如线性网络拓扑、星型网络拓 扑等。用户还可以根据自己的需要自行继承Topo类，实现特定网络结构和相关 链路配置参数的网络拓扑。
2.5本章总结
本章首先从OpenFlow的基本概念出发,介绍了 OpenFlow协议的发展历程。 其次，详细的分析OpenFlow协议的具体内容，重点阐述了流表的结构、数据流 匹配流程、OpenFlow消息类型。最后，通过详细分析OpenFlow协议，并且通 过与传统网络比较，给岀了 OpenFlow协议在网络节能领域的优势。本章还介绍 了当前几款主流的网络控制器，并且重点介绍后续仿真中釆用的Floodlight控制 器的主要模块。为了能够对本文提出的算法进行验证，本章也对OpenFlow仿真 平台Mininet进行了简要的概述，并重点介绍其内容的库文件。通过本章对 OpenFlow协议的详细介绍，为下一章基于网络实时流量的网络节能算法(RTT-ES) 的提出，提供了协议依据和强有力的技术支撑。



第三章 基于网络实时流量的RTT-ES节能算法
网络的超额资源配置和冗余设计给网络节能带来了可能性，在保证一定网络 服务质量的前提下，使用尽量少的网络资源来实现流量传输是网络节能的基本目 的。当前实现网络节能的基本思路是将网络流量限定在网络的子拓扑中，将空闲 的网络设备或链路关闭，从而用较少的网络资源实现了流量传输，达到了网络节 能的目的。
对于网络节能一般选择是将冗余的网络设备或者链路关闭。由于网络交换设 备的睡眠和苏醒需要耗费较长的时间，并且在OpenFlow网络中，控制器不能通 过OpenFlow协议信令来控制网络设备(OpenFlow交换机)的休眠(down)和苏醒 (up),本文借鉴了 GreenOSPF[n]的节能思路，主要通过减少网络链路数来实现网 络节能。
本章将首先给出网络节能中常用能耗的模型，然后对网络节能问题进行数学 建模，最后描述RTTES算法的具体内容。
3.1简化能耗模型
典型的模块化网络交换设备主要由设备背板、网络线卡、网络接口等组成， 网络设备的总能耗也由这些部分能耗组成。当前网络节能研究釆用的能耗模型一 般有两种【24】，一种是通用能耗模型，另一种是简化能耗模型。其中通用能耗能 够较为精确地计算出网络设备的能耗，但是计算结果与网络实时负载变化有关。 因此其计算复杂度较大并且难以应用于实时能耗计算。当前网络设备存在能耗与 流量大小不匹配的问题，也就是网络设备在低负载时与满负载时，网络能耗几乎 是一致的，网络负载变化对于网络接口能耗影响较小SI,所以通用能耗模型对 于目前网络设备而言过于复杂。而简化的能耗的模型，仅使用设备配置信息计算 网络设备的能耗，忽略了网络负载实时变化对设备能耗的影响，因此具有计算复 杂度低，实时性好的特点。在本文中，为简单起见，釆用简化网络能耗模型。
简化网络能耗模型为：
E(C) = F(C) + ￡"(C)	(3-1)
E(C) = F(C) + LxP	(3-2)
公式(3-1)中，参数C表示网络设备的配置参数，简化能耗模型只与网络设备 的配置参数有关。E(C)表示整个网络的能耗，F(C)表示网络设备固定部件的能量 开销，主要包括交换机背板能耗，散热风扇能耗、转发查找计算能耗以及TCAM 和RAM等存储能耗开销。￡(C)表示每个交换机端口的能耗，I表示网络中的所有交换机活跃端口的集合。本文假设所有网络设备都是同一规格的，那么交换机 每个端口的能耗就是一致的，可以用P来代替，并用L表示网络中活跃端口的 个数，可以得到式(3-2)o公式(3-2)表示网络产生的总能耗等于网络中所有网络设 备固定部件的能耗与网络端口能耗的和。
3.2问题描述
上一节中给出了本文中采用的简化能耗模型，该模型中定义网络的能耗由网 络设备的固定部件和网络端口能耗的和。在简化能耗模型的基础上，网络节能问 题可建立如下的数学模型：
己知网络拓扑(包括节点、节点间连接信息以及每条链路的链路容量)和网 络的流量矩阵，以及每个节点和链路的能耗信息，通过最优化的算法去找出最佳 的网络拓扑，该网络拓扑在当前的流量矩阵下可以实现最小化网络能耗。在网络 中该最优化必须满足两个约束条件，一是网络流守恒的条件，二是最大链路利用 率的约束。
上述问题也可用数学符号进行更加精确的表述，对于给定的网络G(V,E), V 表示节点集合，E表示节点间链路的集合，同时可得N=|/0=|E|。其中N表 示网络拓扑中节点的数量，L表示网络链路的数量。为方便表述，规定以下数学 符号：
(1)令勺表示节点i和节点j之间链路的容量，同时设定ae[O,l],其中a表 示在保证网络服务质量的前提下，网络中链路利用率的阈值参数。
(2)令严表示源节点和目的节点之间的通信量，易€{0,1}表示节点i和节点 j之间的链路是否存在，0表示该链路处于关闭状态,1表示该链路处于活跃状态。
⑶爲M司0,产]表示节点s和节点d之间通信流从节点i和节点j所直连的链 路上通过的流量，同理，K?表示的节点i和节点j所直连的链路上的所有流量。
(4)令以，表示节点i和节点j所直连链路所消耗的能量。
(5)令r响表示网络消耗的总能量；
根据以上的假设，可以将本文的节能问题具体描述如下：
要实现网络的节能，必须实现：
Minimize p,otal
其中皿=￡忑；=产网	(3-3)
必须满足的约束条件有：
tsd, V5 d,i-s
￡：据_￡二疔+产，Wdj = d	(3-4)
0, Ps d,详 s,d
九 W/ f	(3-5)
fy < ac.q Vz,j	(3-6)
其中，式(3-3)描述了网络能耗的定义，本文釆用简化能耗模型，因此最小 化网络能耗可以等价于最小网络链路的数量。式(3-4)?(3-6)描述在实现网 络节能时必须满足的约束条件，式(3-4)表示网络流必须满足的网络流守恒的 条件，式(3-5)含义是节点i和节点j直连链路中的全部流量等于网络中所有通 信流量在该链路上流量之和；式(3-6)表示为了保证网络服务质量必须满足的 约束条件，该条件保证每条链路的链路利用率低于设定的阈值。
式(3-4)表示网络流守恒定理，网络流守恒定理描述的是:对于链路容量句,该 链路有两个相关的节点，一个是节点i，称之为源节点(source),另一个是节点 j,称之为收点(sink)。式(3-4)的含义是如果i是源点(s),那么在节点s和 节点d的通信中，流出节点i的流量与流入节点i的流量之差为产；如果i是收 点(d),那么在节点s和节点d的通信中，流出节点i的流量与流入节点i的之 差是如果节点i既不是收点也不是源点，那么在节点s与节点d的通信中， 流入节点i的流量与流出节点i的流量之差为0o
在本文的简化的能耗模型下，以〃等于两个网络接口所消耗的能耗，pl〃=p， 所以式(3-3)可做如下简化：
二流为	(3-7)
从而Minimizeplolal也就是Minimize^xv。由于e {0,1},并根据易的定义， 要实现Minimize?硕,其实就是最小化网络活跃链路数。
本论文的节能问题实际上是多物网络流问题，该问题是一个NP-hard问题〔I 很难在多项式时间内寻找到最佳的解决方案。因此很多学者针对该问题，提出了 许多启发式的算法。考虑到网络流量分布的规律，基于OpenFlow在实现网络节 能的优势，提出了一种基于网络实时流量的节能算法(RTT-ES算法)。
3.3基于网络实时流量的节能算法(RTT-ES)
上一节对网络节能问题进行了数学建模,指出了实现网络节能其实就是在保 证网络服务质量的基础上，对网络拓扑进行裁剪，减少传输负载的网络资源，降低网络消耗的能量。其中，网络链路利用率可以直接反映出网络服务质量的优劣。 由于本文节能问题属于NP-hard问题的范畴，所以本文提出了一种启发式的算法 来解决该问题。
3.3.1 RTT-ES算法概述
网络流量分布具有普遍的规律性，总是会出现峰值和极小值，因此存在某个 时刻可以使网络到达最佳节能状态。
当网络流量处于极小值时，由于网络设计的两大原则⑶，造成了网络大量能 量的浪费。对于一般的网络而言，比如企业网络、校园网、数据中心等网络，网 络流量的极小值一般出现在夜间，并且也会持续一定的时间。根据文献介绍，数 据中心网络大部分处于低负载〔26]㈣。
为了保证网络服务质量，一般将网络的链路利用率设定为低于100%[2],因 此本文选用网络链路利用率作为衡量网络服务质量的指标，通过设定阈值，来判 断链路是否拥塞。
基于网络流量的规律性，尤其是网络流量极小值的存在，结合OpenFlow在 实现网络节能的优势，本文提出了基于网络实时流量的节能算法(Real-Time Traffic Energy Saving, RTT-ES)。RTT-ES算法的基本思想是当网络最佳节能时刻 到达后，在充分考虑网络节点间可达性，釆用最小生成树算法对网络拓扑进行裁 剪，这样实现了在保证网络中所有节点互相连通的前提下，所能到达网络节能的 最佳状态。为了能够保证网络服务质量，该算法通过OpenFlow周期性获取网络 的实时流量，根据当前网络流量实时感知网络的拥塞程度(在本文中使用链路利 用率作为衡量链路拥塞程度的依据)。如果网络中某一条链路出现拥塞，算法会 进行负载均衡操作，负载均衡算法将通过为该拥塞链路开启均衡链路，然后重新 计算路由，将拥塞链路上部分的流量导入到其他链路中，实现负载均衡。这样就 实现了在保证网络服务质量的同时提高网络的能量利用率。
在RTT-ES算法中，充分考虑了网络节点之间的连通性，所以对于3.2节提 到的x『，在RTT-ES算法中始终至少存在(N-l)x2个匀值为1,其中N表示网 络中节点的个数。
3.3.2负载均衡算法
为了解决由于网络节能操作所引起网络负载不均的问题和更好地保证网络 服务质量，本文重点研究了网络在节能状态下如何适应网络负载的变化，并提出 了负载均衡算法。本文提岀的负载均衡算法是通过为拥塞链路计算最优的均衡链 路(网络新增链路)，然后Dijkstra算法将根据实时的链路权重，为拥塞链路上的流量重新规划路由，实现负载均衡。
负载均衡的伪代码如图3-1所示，对于拥塞链路CLinks,负载均衡算法以迭 代的方式去为每条拥塞链路计算均衡链路。首先利用IBFS算法，根据当前网络拓 扑，网络链路权重和拥塞链路计算出当前链路的均衡链路，其中IBFS算法是对基 本广度优先搜索(Breath First Search： BFS)算法的改进，IBFS通过链路权重和 均衡链路的深度(相对于拥塞链路节点的树的深度)两个参数为拥塞链路计算最 优化的均衡链路。如图3-1中的第五行代码所示，算法也会根据均衡链路是否存 在，区别对待。如果该均衡链路为空，则说明网络活跃链路数己经等于网络最大 链路数，此时只能根据网络实时权重信息重新为拥塞链路上的流量重新计算均衡 路由，实现负载均衡。如果存在均衡链路，则将根据均衡链路、当前网络的实时 权重信息计算均衡路由，实现负载均衡。
G：表示当前网络的拓扑信息
T：表示网络流量矩阵
cost：表示实时网络链路权重
CLinks：表示网络中拥塞链路
Blink：表示计算出的均衡链路
Routes：表示计算出的路由
1.Begin:
2.for Clink in Clinks:
3.cost = updateCost(G, cost)
4.BLink= IBFS(G,cost,CLink)
5.ifBLink is null:
6.route = Dijkstra(G, cost, CLink, true)	〃重新规划路由
7.else:
8.route = Dijkstra(G, cost, BLink, false) 〃增加链路并重新规划路由
9.Routes, put(route)
10.reutrn Routes
11.End
图3-1负载均衡伪代码
3.3.3基于固定阈值的RTT-ES算法
为了保证网络服务质量的要求，一般将网络的链路利用率设定为低于 100%[2],链路利用率越低，反映岀当前网络服务质量越好。对于超过链路利用 率阈值的链路，需要对其进行有效地负载均衡⑵。由于当前节能技术中设定的阈 值参数多数为固定的参数，在RTT-ES算法中，首先设计了基于固定阈值的 RTT-ES 算法。
基于固定阈值的RTT-ES算法流程图如图3-2所示，其基本流程详细描述如 下：
1.首先，算法获得当前网络交换机端口的发送和接收字节数，通过计算，将该 信息映射为网络链路权重和链路利用率；
2,接下来，当网络处于空闲时，在网络流量极小值处也就是最佳节能时刻到达 后，利用最小生成树算法根据当前网络链路权重，计算当前网络最小生成树 拓扑，在本文的算法实现中使用的是Prime算法；
3.为了保证网络服务质量的要求，接下来，算法将周期性地获取网络设备接口 的流量信息，并且将流量信息映射为网络链路利用率；


图3-2基于固定阈值的RTT-ES算法流程图
4.接下来算法将对超过网络链路率阈值的链路，进行负载均衡，这里的负载均 衡算法在3.3.2中已经介绍。
5.等待下一个周期的到来，重复3-4步骤。
3.3.4基于动态阈值的RTT-ES改进算法
上一节中介绍了基于固定阈值RTT-ES算法，网络流量通常会产生较大的波 动，出现突发流量等高负载情况。由于固定阈值策略不能根据网络负载情况动态 调整阈值，所以在应对突发流量等情景时，网络性能会变得很差，导致不能满足 网络服务质量的要求。
为了更好地保证网络在突发高流量情况下的服务质量，本文针对固定阈值的 RTT-ES算法的不足，设计了一种基于动态阈值的RTT-ES改进算法。该算法可 以根据网络负载实时调整阈值，以匹配网络负载的变化。
基于动态阈值的RTT-ES算法与基于固定阈值的RTT-ES算法的流程基本一 致，只是在算法中加入了动态阈值策略，具体流程图如3-3所示。
当网络中的拥塞链路数超过了网络活跃链路数的1/2时，将会触发动态阈值 策略。动态阈值算法釆用了线性阈值调整方案，具体如式(3-8)所示。
yn linkUR
4=4 __二一心（3-8） fi
式（3-8）描述了网络链路的平均链路利用率对当前阈值的影响。其中7；表 示当前网络设定的链路利用率阈值，7；表示动态调整后更新的阈值，〃表示当前 网络中活跃链路的数量，〃泌或表示网络中的链路利用率，a是权重参数，该参 数描述了网络平均链路利用率对阈值的影响。少表示网络阈值参数设定的下限。 当7；大于〃时，会对网络阈值进行动态调整，而当7；小于或等于尸时，为了防止 网络阈值调整过低，对网络服务质量产生影响，设置了阈值下限戶。网络中的拥 塞链路越多，对网络阈值产生较大的影响也越大。在本文算法中设定a = 0.005 , 少=2.5。

图3-3基于动态阈值的RTT-ES算法

3.4本章小结
本章主要讨论了基于网络实时流量的节能算法（RTT-ES）的具体细节。首 先，给出了釆用的网络能耗模型一一简化的能耗模型，该能耗模型将网络能耗归 结为网络设备固定部件的能耗和网络端口的能耗，而网络端口能耗正是节能算法 所考虑节能的部分。接着，详细地阐述网络节能问题并给出了数学模型，指出网 络节能问题就是在保证网络服务质量的前提下，利用尽可能少的网络资源来完成 流量传输。为了有效地解决网络节能问题，本文在基于OpenFlow在网络节能上的优势，并且结合网络流量的普遍规律性，提出了一种基于网络实时流量的网络 节能算法（RTT-ES）,并对算法的细节进行深入的讨论。
为了更好地讨论RTT-ES算法，本文首先阐述了负载均衡算法，然后基于负 载均衡算法讨论了基于固定阈值的RTT-ES算法具体流程。为了更好地应对网络 突发流量，本文还提出一种改进算法——基于动态阈值的RTT-ES算法，并对动 态阈值策略中的阈值调整算进行了讨论。
在本章对RTT-ES算法详细描述的基础上，下一章对基于RTT-ES算法的网 络节能系统进行深入地讨论。

第四章RTT-ES网络节能系统的设计与实现
上一章对本文提出的RTT-ES算法进行了具体地论述，本章将在RTT-ES算 法的基础上，设计基于RTT-ES算法的网络节能系统，详细地描述了设计的各个 功能模块，并且在当前主流OpenFlow网络控制器Floodlight实现了该节能系统。
4.1基于RTT-ES算法的节能系统设计
软件定义网络(SDN)的基本架构如图2-1所示，包括应用层、控制层和基 础设施层，控制平面负责整个网络的逻辑控制功能。本文基于该网络架构，设计 了基于RTT-ES算法的网络节能系统，该系统的基本组成如图4-1所示，该系统 中主要由五个功能模块组成，分别是最小生成树模块、流量釆集模块、QOS保 证模块、设备管理模块及路由计算模块，各个功能模块分别完成相应的功能。以 上五个功能模块均属于SDN网络中的控制平面中。


图4-1基于RTT-ES的网络节能系统功能模块图
流量釆集模块主要是采集物理网络中的交换机的各个端口流量，包括发送和 接收的字节数，并根据这些流量信息计算网络活跃链路的链路利用率和权重。
最小生成树模块主要是当最佳网络节能时刻时，根据当前网络实时链路权重, 为当前网络生成最小生成树拓扑。该模块输出需要关闭的网络链路，然后交给设 备管理模块来执行具体的关闭操作。
QoS保证模块主要功能是对网络中的拥塞链路进行负载均衡。该模块根据流 量釆集模块计算出的各个活跃链路的链路利用率，根据设定的阈值，得到网络中 的拥塞链路，然后通过负载均衡算法为当前的拥塞链路计算均衡链路。在本系统 中，RTT-ES算法中阈值参数是动态的，动态阈值策略可以根据网络实时负载情 况不断更新当前网络阈值。
设备管理模块主要是根据输入的链路信息和类型对相应的链路进行开启(up)和关闭(down)的操作，该模块主要通过OpenFlow协议信令来完成相关操作；
路由计算模块主要功能是根据网络实时链路权重，为拥塞链路上的流量重新 计算最优路由。通过为相关的交换机重新下发流表，实现了为拥塞链路的数据流 重新路由。
在图4-1中，其中最小生成树模块与其他模块有所不同，最小生成树模块是 在最佳节能时刻时运行，完成网络拓扑裁剪，从而使网络达到了在保持网络节点 相互连通下的最佳节能状态。
4.2 RTT-ES算法在Floodlight控制器中的实现
在2.3.2节中，详细地介绍Floodlight控制器中基本功能模块。本节将在此 基础上，深入地讨论RTT-ES算法如何在Floodlight控制器中的实现。
为了在Floodlight控制器中实现RTT-ES算法，主要设计了三个模块，分别 是 LinkCostManager 模块、MstTopology 模块、EnergySaving 模块，其中 EnergySaving模块是网络节能的核心模块，LinkCostManager是链路信息服务提 供模块，继承了 IFloodlightService接口，向其他的模块提供链路权重和链路利用 率信息。这些模块也都实现了 Floodlight中基本模块接口 IFloodlightModuleo
以上的三个模块是RTT-ES在具体控制器中的实现，与图4-1中的网络节能 系统中的模块是相互对应。其中，LinkCostManager模块包括图4-1中的流量釆 集模块，MstTopology模块包括系统中的最小生成树模块和设备管理模块， EnergySaving模块包括了 QoS保证、部分路由计算、设备管理模块。接下来将 重点讨论这三个模块设计思想和工作机制。
1.LinkCostManager 模块
Floodlight控制器在通过Dijkstra算法计算最短路由路径时，需要链路权重参 数，在开源版本的Floodlight控制器中，链路权重设定都为1。因此，链路权重 并不能反映出网络链路的拥塞状况。为了能够实时地获取网络流量，增加了 LinkCostManager模块。该模块的主要作用是将网络实时流量映射为网络链路权 重和链路利用率参数，该模块的具体实现流程如图4-2所示，可描述如下：
(1)首先将进行网络初始化的操作，主要完成包括设定LinkCostManager 探测网络流量周期T等。在本文中，设定的探测周期是5s。
(2)控制器将向交换机发送ofp_stats_request消息来获取当前时刻的各个 OpenFlow交换机的端口的发送字节和接收字节数。
(3)控制器接收到oQ)_stats_reply消息，并将其中端口流量信息保存到 LastPeriodTraffic 中。
(4)等待一个周期时间T。
(5)控制器继续通过发送ofp_stats_request消息来获取当前时刻的各个 OpenFlow交换机端口的发送字节和接收字节数。
(6)根据当前周期内的流量信息和前一个时刻的流量信息lastPeriodTraffic, 做差值来计算链路权重和链路利用率。
(7 )将当前周期内的流量信息保存到lastPeroidTraffic中，更新 LastPeroidTraflfic。
(8)重复(4) ~ (7)。

图4-2 LinkCostManager模块流程图
2.MstTopology 模块
网络流量具有规律性，网络流量在某个时间点或者某个时间段内，总是处于 较低的范围内，此时就存在了最佳网络节能时刻。根据网络的该规律性， MstTopology模块的主要作用是在网络的最佳节能时刻，将网络拓扑裁剪为最小 生成树的拓扑，从而使网络实现最佳的网络节能。
最小生成树拓扑是整个网络实现最佳节能时的拓扑。为了实现最小生成树的 拓扑，MstTopology模块中釆用的算法是Prime算法，MstTopology模块的流程 图如图4-3所示：

［网络初始化
link Cost Manager 模块中获
取实时瑟路权重
Prime算法
r
DownLinks
+
发送0 ip_port_mod消息关
闭网纟j端口
生成最小生成树拓扑
图4-3 MstTopology模块流程图
MstTopology模块首先进行网络初始化，然后从LinkCostManager模块获取 网络实时的网络链路权重，基于实时权重信息，通过Prime算法计算出需要关闭 的链路。下一步，MstTopology向交换机发送ofp_port_mod消息关闭相关的网络 接口。当完成相关的端口关闭的操作，网络拓扑就变成了最小生成树拓扑，实现 了最佳网络节能。
3.EnergySaving 模块
EnergySaving模块是RTT-ES节能算法的核心模块，实现图4-1中的QoS保 证、路由规划的部分功能。EnergySaving模块通过LinkCostManager模块获取网 络实时的链路利用率信息，对于链路利用率超过阈值的链路，进行负载均衡。通 过为拥塞链路寻找均衡链路，利用均衡链路的均衡作用，从而降低拥塞链路的拥 塞程度，可以在保证网络QOS同时实现网络的节能。EnergySaving模块的流程 图如图4-4所小:
(1)EnergySaving模块首先是进行的是网络初始化的工作，设置模块运行 周期等参数，在仿真中设定的周期是10s。
(2)初始化完成后，EnergySaving模块将通过LinkCostManager获取网络实 时链路利用率。
(3)根据获取的链路信息和所设定的阈值，得到超过阈值的拥塞链路。如 果当前的过载链路数超过了网络开启链路数的一半时，将会进行阈值调整的操作, 否则经进行步骤(4)的负载均衡操作；
(4)负载均衡主要是首先为拥塞链路计算出均衡链路，向交换机发送 o^)_port_mod消息开启相关链路，并通过ofp_flow_mod删除与拥塞链路相关的 流表项，最后由Dijkstra算法为数据流计算最优路由，并下发流表；
(5)重复步骤(2)?(4)o

Dijkstra算法计算最优路由
发送。fp_flow_mod消息下发流表
图4-4 EnergySaving模块流程图
4.3本章小结
本章在第三章提出RTT-ES算法的基础上，设计了基于RTT-ES算法的网络 节能系统，详细地探讨了网络节能系统中的最小生成树模块、流量采集模块、 QoS保证模块、设备管理模块、路由计算模块的具体功能。在此基础上，还给出 了各个模块在Floodlight控制器中的具体实现，节能系统中的五个模块在具体实 现时变为三个模块，其中LinkCostManager模块主要负责流量釆集、映射链路权 重和链路利用率等工作，MstTopology模块负责生成最小生成树拓扑，其中包括 计算出需要关闭的链路和完成设备管理等工作，EnergySaving模块是Floodlight 中的核心节能模块，完成了包括链路拥塞判断、节能路由计算、负载均衡等功能。 通过网络节能系统的介绍，下一章将基于该系统对RTT-ES算法的性能进行仿真, 并详细地分析了算法的性能。

第五章RTT-ES算法性能仿真分析
第三章对提出的RTT-ES算法进行了具体的论述和数学建模，第四章又详细 地讨论了基于RTT-ES算法的网络节能系统的实现。在本章，将在RTT-ES算法 的基础上，具体分析该算法的性能。本章将首先介绍仿真所用数据中心网络拓扑, 然后给出仿真环境和评价标准，最后对RTT-ES算法的性能进行深入的分析。
5.1数据中心网络拓扑Fat-Tree
数据中心(DataCenter)卩可是为互联网内容提供商、企业、媒体和各类网站 提供大规模、高质量、安全可靠的专业化服务器托管、空间租用、网络批发带宽 等业务。为了能够为数据中心租户提供更高质量的服务，提出了多种“富连接” 的网络拓扑。在多种多样的数据中心网络架构中，Fat-Tree㈣改进了传统树形网 络架构，在当前的数据中心中得到了广泛的应用。典型的Fat-Tree的拓扑如图 5-1所示：

图5-1 k=4的Fat-Tree网络拓扑图

Fat-Tree网络中包括三层：核心层，汇聚层、边缘层。左元的Fat-Tree网络 包括k个pod,每个pod中有"2个汇聚层交换机和k/2个边缘层交换机。具有k 个端口的边缘层交换机，其中有2个端口与4/2个主机直接连接，其它的有2端 口与有k个网络端口的汇聚层的交换机直接连接，在核心层中具有(左/2)2个力端 口的交换机，核心层中的交换机的上个端口与左个pod分别连接，每一个核心层 中交换机中的第i个端口与第i个pod连接，这样汇聚层中的交换机以"2的步 长连接到核心层中的同一个交换机。一般来说，由左个端口的交换机组成的 Fat-tree数据中心网络包括// 4个网络主机和5P/4个交换机。
在k=4的Fat-Tree网络中，包含16个主机和20台交换机，而k=8的Fat-Tree 网络中包含128台主机和80台交换机。显然k越大，网络的“富连接”就越严重， 相应的网络服务能力就越高。

5.2仿真环境和评价标准
为了能够更好的评估RTT-ES算法的性能，本文利用Floodlight作为网络控 制器，并且使用Mininet网络仿真平台对网络拓扑进行模拟，在本文中选用的仿 真网络拓扑是k=4和k=8的FatTree数据中心网络拓扑。本小节将对仿真中釆用 的流量模型和评价标准进行详细的介绍。
5.2.1流量模型
数据中心网络是一种商业网络架构，其实际的流量模型一般是不公开的，文 献［30］、［31］指出可以通过程序生成通信流，产生的通信流可以非常接近于数据 中心网络的流量模型。在本文中，选用了两种常用的流量模型——随机流量模型 和概率流量模型，具体介绍如下：
(1)随机流量模型
在随机流量模型中，数据中心网络中的任何一台主机可以和网络中其他的任 何一台主机进行通信。在选择通信主机时，服从均匀分布。
(2)概率流量模型
概率流量模型中有两组参数和｛Pa,Pb,Pc) o标号为m的主机可以与标 号为(i+m), (j+m), (k+m)的主机通信，标号为m在选择通信主机时，依据概率 (Pa,Pb,Pc)来选择通信的主机标号，也就是说，标号为m的主机与标号为(i+m) 的主机通信的概率为月，与标号为(j+m)主机通信的概率为3，同理与标号为(k+m) 主机进行通信的概率为心。在该流量模型中，Pa,Pb,Pc非常重要，本文仿真釆用 的 ￡=0.5,女=0.3,￡=0.2。
5.2.2 评价标准
本文选取平均带宽利用率(Bindwidth Ratio)和能量节省效率两个指标来衡量 RTT-ES算法的性能。
(1)平均带宽利用率
平均带宽利用率，是网络主机实际的通信速率与设定速率之间的比值，描述 了网络的拥塞程度。在仿真中，通过Linux系统中的Iperf工具来产生UDP流量， 设定的速率是指定的Iperf^〕在Client端设定的带宽速率。由于网络拥塞会造成 网络数据包在传输过程中的丢包和差错，因此，网络流在实际网络通信时通常会 小于设定的速率。
平均带宽利用率％:

其中，oB不表示网络流实际达到的通信速率，如步表示的是网络流设定的 通信速率，〃表示网络中网络通信流的数量。
本文的仿真中，釆用平均带宽利用率来衡量网络服务质量的好坏，其中平均 带宽利用率越大，网络服务质量越好。
(2)能量节省效率
能量节省效率是网络节能的重要评价指标，该指标直接反映了 RTT-ES算法 在网络节能方面的节能效果。依据前面内容的介绍，本文的网络节能算法是通过 链路数量来衡量，也就是说链路数量越多，网络的节能效果就越差。能量节省效 率定义为关闭链路的数量与网络中全部链路的数量的比值。
能量节省效率％：
(5-2)
其中，与表示网络节能前全部链路的数量，孔表示当前网络中链路的数量。 根据能量节省效率的定义可知，能量节省效率的值越大，网络节能的效果越 好，相反，能量节省效率越低，网络的节省效果越差。
RTT-ES算法是基于最小生成树算法来生成最简的网络拓扑。因此，即使网 络无流量存在，RTT-ES算法所能到达的能量节省效率也存在一个最大值。对于 具有N个节点、L个链路的网络拓扑而言，所能达到的最高能量节省效率是：
? S(N —1) % =			 (5-3)
对于N个节点的网络，其最小生成树中的链路数是N-1,也就是网络所能到 达的最佳节能状态，此时能量节省效率是最高的。
除了上述评价参数外，在本文的算法仿真中还有一个流量负荷的概念。流量 负荷定义为网络主机与其直连的交换机之间链路上的实际带宽和链路带宽容量 的比值。在本文的仿真中，为简便起见，仿真中所有链路的容量相等，都为10Mbps。 对于流量负荷的定义来说，如果主机设定的通信速率为1Mbps,那么流量负荷就 是0.1 (IMbps/lOMbps)。本文描述了网络评价标准在不同流量负荷下的变化。
5.3仿真结果分析
5.3.1动态链路权重对网络服务质量的影响
Floodlight控制器的Topologylnstance模块中实现的Dijkstra算法时，链路权 重是固定的，都为1。固定链路权重的路由算法不能根据网络负载状态计算出最 优路由，所以本文为控制器加入LinkCostManager模块，实现动态链路权重。本节给出了动态链路权重和固定链路权重对网络服务质量的影响。




图5-2平均带宽利用率和丢包率随流量负荷变化的关系图

图5-2(a)和(b)中的网络拓扑选用k=4的Fat-tree拓扑，在该拓扑中有20台交 换机和16台网络主机,网络流量负荷釆用了 0.1-1十组数据,采用概率流量模型， 各个通信流之间的间隔是5s,通信流持续时间为120s。
图5-2 (a)给出了在固定链路权重和动态链路权重两种情况下，平均带宽利 用率与流量负荷的关系。当网络流量较低(流量负荷小于0.2)时，平均带宽利 用率均为1,表示当前网络的拥塞情况良好，网络中主机间的通信都能到达设定 的带宽速率。随着流量负荷的不断增加，网络的拥塞程度不断严重，所能到达的 平均带宽利用率也在不断降低，当流量负荷达到1时，降为最低值。从图5-2(a) 中，可以明显地看出在相同的流量负荷下，动态链路权重下的平均带宽利用率优 于固定链路权重。

从图5-2 (a)中也看到，动态链路权重相对于固定链路权重，对平均带宽利 用率的提高相对有限。这是由于网络中出现严重的拥塞，网络中缺少有效的负载 均衡策略，在一定程度上造成了平均带宽利用率的损耗。图5-2 (b)描述了网络 的丢包率随着流量负荷的变化曲线，与图5-2 (a)类似，在流量负荷较低，丢包 率较少，随着流量负荷的不断增加，网络中的丢包率也不断增加。
5.3.2 RTT-ES算法性能仿真分析
在5.2.2中对能量节省效率和平均带宽利用率两个评价标准进行了讨论。其 中，能量节省效率是描述网络关闭的链路数占网络总链路数的比值。能量节省效 率越大，当前网络的节能效果越好。平均带宽利用率描述了当前网络端到端通信 所达到的实际速率与设定速率的比值，平均带宽利用率越高，网络服务质量越好。
为了对RTT-ES算法的性能进行评估，本次仿真釆用k=8的Fat-Tree数据中 心网络拓扑，釆用平均带宽利用率和能量节省效率两个指标，利用了概率流量模 型来产生网络流量。其中每条通信流的持续时间为60s,对基于动态阈值的 RTT-ES算法进行了仿真分析。
图5-3给出了时间间隔为Os和5s时，RTT-ES算法和非节能(Non-Saving) 两种不同条件下平均带宽利用率随流量负荷变化的关系图。从图4-3可以看出， 当网络负载较低时，RTT-ES算法和Non-Saving在两种时间间隔下，平均带宽利 用率曲线非常接近。当流量负荷逐渐增大时，由于网络资源相对较少，网络服务 质量出现了一定的下降。从图5-3中也可以发现两种时间间隔下的平均带宽利用 率相差不是很大，说明RTT-ES算法对网络服务质量的影响相对较小。


图5-4给出了不同时间间隔下能量节省效率随流量负荷变化的关系图。从图
5-4中可以看出当时间间隔为Os和5s时，网络的能量节省效率整体上逐渐降低， 可以明显发现在网络负载较低时，可以有效地实施网络节能。在Fat-tree网络中， 当流量负荷低于0.05时，网络能量节省效率可以达到70%。当网络流量超过0.1 时，网络节省效率出现了下降。当网络流量负荷超过0.2时，网络节省效率出现 了严重的下降，这时的原因是当前网络在设定网络链路利用率的阈值条件下，出 现了大量拥塞链路，RTT-ES算法进行了动态阈值的调整，通过将更多的网络纳 入到网络传输资源中，这样实现了更好的QoS。结合图4-3中可以发现在两种时 间间隔下的平均带宽利用率，在流量负荷为0.2到0.25之间实现了较为平滑的过 渡，保证了网络QoS o
随着流量负荷的逐渐增加，网络能量节省效率逐渐降低。当流量负荷超过0.5 时，不同时间间隔下的能量节省效率几乎一致，这是由于当前网络出现了严重的 拥塞情况,RTT-ES算法为了保证网络QoS,将更多地开启置于休眠的网络端口。 因此，当流量负荷（网络负载）较大时，不适合进行网络节能。

图5-4不同时间间隔下能量节省效率与流量负荷的关系图

通过以上的分析，得到以下的结论：当网络负载较低时，基于动态阈值的 RTT-ES算法能够在保证网络服务质量的同时实现网络节能，随着流量负荷的增 加，该算法牺牲了网络节能效果，从而保证了网络服务质量。
5.3.3固定阈值与动态阈值策略对网络服务质量影响
当网络处于节能状态时，有时短时间内会岀现流量激增的情形。此时，对网 络进行节能相对于保证网络服务质量来说相对弱化。为了更好地应对网络突发流 量的情形，如3.3.4中提到的，在基于固定阈值RTT-ES算法的基础上提出了基 于动态阈值的RTT-ES改进算法。

图5-5给出了在固定阈值和动态阈值两种策略下，网络平均带宽利用率的变 化曲线。为了模拟网络突发流量，仿真中将时间间隔Os定性描述为网络突发流 量。当时间间隔为Os时，仿真网络的128主机，将同时产生通信流量，网络瞬 间产生128条网络通信流。同理，将时间间隔为5s定性描述为非突发流量。从 图5-5中可以看到：
在Interval = 5s时，当流量负荷低于0.25时，网络平均带宽利用率在两种阈 值条件下差距不大。当流量负荷大于0.25时，固定阈值的仇开始低于动态阈 值此，这是因为当流量负荷大于0.25开始，网络在该流量模型下出现一定拥 塞，动态阈值策略根据网络的负载情况，降低了阈值，从而使用更多的网络 资源（链路）来换取平均带宽利用率的提高。
在Interval=Os时，网络从流量负荷0.1开始，固定阈值下的仇低于动态阈值 策略下的冊，并随着流量负荷的增加，两者之间的差距逐渐增大，说明了动 态阈值策略在应对网络突发流量上比固定阈值有更好的性能。
通过对图5-5的分析，可以发现动态阈值策略能够较好的应对突发流量和网 络高负载等情况。当网络出现突发流量或者负载变大时，动态阈值策略通过阈值 调整算法，使RTT-ES算法阈值适应网络实时负载，通过为网络增加了更多的网 络资源，从而保证了网络服务质量。



5.4本章小结
本章首先简单地介绍RTT-ES算法仿真所釆用的数据中心网络Fat-Tree拓扑, 并给出了釆用的仿真环境和评价标准。基于以上介绍，对仿真结果进行了分析, 主要围绕平均带宽利用率和能量节省效率两个评价标准，重点分析了动态链路权 重对网络服务质量的影响、不同阈值策略下的网络性能、以及基于动态阈值的 RTT-ES算法的节能效果和对网络服务质量的影响。
通过仿真分析可以发现，基于动态阈值的RTT-ES算法在网络处于较低流量 时，能够实现较好的网络节能。对于仿真中釆用的Fat-Tree网路拓扑，网络能量 节能效率可以达到70%。通过动态阈值策略，网络可以更好地应对网络出现突发 流量的场景，能够实现网络服务质量的平滑下降。通过以上的仿真分析证明，基 于动态阈值的RTT-ES算法在网络负载较低时能够有效地实现网络节能，并且当 网络负载较高时，可以在网络能量节省效率和网络服务质量上做出较好的折中， 保证网络的服务质量。
虽然算法仿真中釆用了数据中心网络Fat-tree拓扑，但是该算法的适应场景 并不仅限于数据中心网络，对于其他类型的网络比如骨干网，校园网等，RTT-ES 算法同样具有较好的性能。

第六章 论文总结与展望
6.1论文工作总结
随着网络技术的不断发展和网络规模的不断扩大，网络能耗已经成为网络中 不可忽视的关键因素。本文在详细分析现有网络节能技术的基础上，将软件定义 网络中的关键技术一一OpenFlow用于解决网络节能问题，本文主要完成以下的 工作：
(1)本文分析了当前网络耗能的现状，讨论了网络能量利用率低的原因。 为了能够有效地解决网络节能问题，本文在对当前网络节能两类技术一一设备级 节能技术和网络级节能技术详细分析的基础上，提出了一种基于网络实时流量的 网络节能技术。
(2)本文深入地调研了基于OpenFlow协议的SDN体系架构以及相关工作 原理，并且对OpenFlow协议进行详细地介绍和分析，包括其交换机转发流表的 结构、数据包的解析匹配过程。在对OpenFlow协议分析的基础上，本文深入分 析了 OpenFlow技术在实现网络节能的四大优势。最后，还对当前主流的 OpenFlow网络控制器以及OpenFlow网络仿真平台Mininet做了简要地介绍。
(3)本文基于网络简化能耗模型对节能问题进行了数学建模，并指出网络 节能问题就是在满足网络服务质量和网络流守恒定理的约束条件下，利用最少的 网络资源实现较好的传输。为了解决节能问题，本文基于网络流量规律性以及 OpenFlow实现网络节能的优势，提出了基于网络实时流量的节能算法(RTT-ES 算法)。
(4)本文设计了 RTT-ES算法网络节能系统，并且对于该系统的相关节能模 块进行的详细的讨论。本文还在企业级Floodlight控制器实现了网络节能系统， 增加的控制器模块包括LinkCostManager模块、MstTopology模块、EnergySaving 模块，其中EnergySaving模块是RTT-ES的核心实现模块。
(5)为了评估RTT-ES算法的性能，本文利用Mininet仿真平台模拟出 Fat-Tree数据中心网络拓扑，基于数据中心网络流量模型一一概率流量模型，分 析了 RTT-ES算法对于网络能量节省效率和平均带宽利用率的影响，本文还分析 了不同阈值策略下RTT-ES算法对网络平均带宽利用率的影响。
6.2未来工作展望
本文对网络节能进行了问题分析、算法设计、系统实现和仿真验证等，论证 了提出的RTT-ES网络节能算法可以有效地解决网络存在的能量利用率低的问题,并且还能有效地应对网络的突发流量，但是RTT-ES算法依然有很多可以改善的 地方。
(1)本文使用关闭网络链路的数量来衡量能量节省效率。但是最优网络节 能方案需要将网络冗余的节点也纳入到网络节能的范畴。由于当前OpenFlow协 议并不支持进行节点休眠的方案，需要对OpenFlow协议进行完善或设计出专有 的网络节能协议，并且还需要深入地评估和分析节点休眠对网络性能产生的影响。
(2)在本文中存在一个流量最低点或者是网络最佳节能状态的假设，但是 本文并没有对该流量最低点或者网络最佳节能状态做过多地阐述。在实际网络中, 需要该流量最低点进行较为精确的评估，可以依据机器学习的相关算法对最佳节 能时刻进行预测和估计，这也是属于本文后续需要优化需要探讨的问题。
(3)为了分析算法的能量节省效率，本文釆用简化能耗模型，该算法在精 确性上不如通用能耗模型。为了进一步提高对网络能耗的精确分析，可以使用通 用能耗模型深入地分析网络能耗。
(4)动态阈值策略是RTT-ES算法能够有效地应对网络突发流量的关键因 素。虽然在仿真中，在网络平均带宽利用率上比固定阈值有更好的效果，但是仍 有较多不足，后续的优化工作也可以针对阈值调整算法展开。

参考文献
[1]Koomey J G. Estimating total power consumption by servers in the US and the wor!d[J]. 2007.
[2]Chiaraviglio, Luca, Marco Mellia, and Fabio Neri. ”Reducing power consumption in backbone networks.n Communications, 2009. ICC'09. IEEE International Conference on. IEEE, 2009.
[3]林闯，田源，姚敏.绿色网络和绿色评价：节能机制，模型和评价[J].计 算机学报,2011, 34(4): 593-612.
[4]Chiaraviglio, Luca, Marco Mellia, and Fabio Neri. "Reducing power consumption in backbone networks.H Communications, 2009. ICC'09. IEEE International Conference on. IEEE, 2009.
[5]Li, Dan, Yunfei Shang, and Congjie Chen. "Software defined green data center network with exclusive routing J* INFOCOM, 2014 Proceedings IEEE. IEEE, 2014.
[6]左青云，陈鸣，赵广松，等.基于OpenFlow的SDN技术研究卩]?软件 学报,2013,24(5): 1078-1097.
[7]McKeown N, Anderson T, Balakrishnan H, et al. OpenFlow: enabling innovation in campus networks [J]. ACM SIGCOMM Computer Communication Review, 2008, 38(2): 69-74.
[8]Gupta, Maruti, and Suresh Singh. "Greening of the Internet.M Proceedings of the 2003 conference on Applications, technologies, architectures, and protocols for computer communications. ACM, 2003.
[9]商云飞，徐明伟，李丹.互联网路由设备与协议节能研究综述[J]?电子学 报,2012,40(11): 2290-2297.
[10]Christensen K, Reviriego P, Nordman B, et al. IEEE 802.3 az: the road to energy efficient ethemet[J]. Communications Magazine, IEEE, 2010, 48(11): 50-56.
[11]Cianfrani A, Eramo V Listanti M, et al. An energy saving routing algorithm for a green OSPF protocol[C]. INFOCOM IEEE Conference on Computer Communications Workshops, 2010. IEEE, 2010: 1-5.
[12]Heller, B., Seetharaman, S?，Mahadevan, P., Yiakoumis, Y, Sharma, P?, Banerjee, S.,& McKeown, N. (2010, April). ElasticTree: Saving Energy in Data Center Networks. In NSDI (Vbl. 10, pp. 249-264).
[13]Cuomo, F?，Abbagnale, A., Cianfrani, A., & Polverini, M. (2011, April). Keeping the connectivity and saving the energy in the internet. In Computer Communications Workshops (INFOCOM WKSHPS), 2011 IEEE Conference on (pp. 319-324). IEEE.
[14]OpenNetworking Foundation, https://www.opennetworidiig.org
[15]https://www.opennetworking.org/images/stories/downloads/sdn-resources/wh ite-papers/wp-sdn-newnorm.pdf
[16]OpenFlow Switch Specification version 1.0 https://www.opennetworking.org/images/stories/downloads/sdn-resources/on 「specifications/openflow/openflow-spec?vl.O.O.pdf
[17]Mininet, http:〃mininet.org/
[18]Lantz, Bob, Brandon Heller, and Nick McKeown. ”A network in a laptop: rapid prototyping for software-defined networks.M Proceedings of the 9th ACM SIGCOMM Workshop on Hot Topics in Networks. ACM, 2010.
[19]Mininet APL http :〃mininet.org/api/annotated. html
[20]NOX controller, http://www.noxrepo.org/
[21]Floodlight controller, http://www.projectfloodlight.org/floodlight/
[22]Ryu controller, http://osrg.github.io/ryu/
[23]OpenDaylight controller, https://www.opendaylight.org/
[24]商云飞.数据中心网络节能路由研究[D].清华大学.2014
[25]Mahadevan R Sharma E Banerjee S, et al. A power benchmarking framework for network devices[M].NETWORKING 2009. Springer Berlin Heidelberg, 2009: 795-808.
[26]Bohrer P, Elnozahy E N, Keller T, et al. The case fbr power management in web servers[M].Power aware computing. Springer US, 2002: 261-289.
[27]Barroso L A, HSlzle U. The case for energy-proportional computing。]. Computer, 2007 (12): 33-37.
[28]数据中心.http://baike.baidu.com/
[29]Al-Fares M, Loukissas A, Vahdat A. A scalable, commodity data center network architecture [J]. ACM SIGCOMM Computer Communication Review, 2008, 38(4): 63-74
[30]Benson T, Anand A, Akella A, et al. Understanding data center traffic characteristics [J]. ACM SIGCOMM Computer Communication Review, 2010,40(1): 92-99.
[31]Kandula S, Sengupta S, Greenberg A, et al. The nature of data center traffic: measurements & analysis[C] .Proceedings of the 9th ACM SIGCOMM conference on Internet measurement conference. ACM, 2009: 202-208.
[32]Iperfihttp://iperf.sourcefdrge,net/

