3.3.1SOVA算法与MAP算法复杂度比较
本节主要对SOVA算法、MAP算法、Log-MAP算法和Max-Log-MAP算法 进行对比，对四种算法的译码复杂度进行对比，并为后续提出一种简化的SOVA 算法提供方向。
这四种算法的共同点是搜索对应于信息比特的两个度量值最大的分支，输出 两条路径的差值作为软判决信息、，且这四种算法都可以接收来自信道信息和令一 个分量译码器的先验信息作为输出，输出判决值且给出最大后验概率。
由322节可知，MAP算法和Log-MAP算法都是基于所有可能路径的计算 方法，且两种算法在路径的选择和取得软判决信息的方法上也是相同的。但是由 于MAP算法中存在大量乘法及指数运算，对其进行对数域变换，变为Log-MAP 算法，使其具备实用性。对于Log-MAP算法用式(3-45)进行近似计算，这会 造成一定损失，但是并不会明显影响译码性能。同样地，Max-Log-MAP算法对 Log-MAP算法进行进一步简化，省略了 Log-MAP算法中的加法和查表步骤，从 算法层面来讲，这造成了 Max-Log-MAP算法变为寻找最大似然路径分支，其译 码性能相比于Log-MAP算法会有所下降。但是，Max-Log-MAP算法这种寻找最 大似然路径的方法和SOVA算法相似，且由上一节对两者的推导可以看出Max-Log-MAP 算法和SOVA算法有着相似的分支度量函数，二者具有极大地相似性。
Log-MAP算法是MAP算法的对数变换，二者在算法上是等价的，几乎不存 在性能损失。进行Log-MAP算法译码时，对于格图中的每条路径都要将其分为
38
两种，输出0的分支路径和输出I的分支路径。所有经过0的分支路径和所有经 过1的分支路径的比值就是该码字中信息位的后验概率。
Max-Log-MAP算法是Log-MAP算法应用最广泛的简化算法,它在Log-MAP 算法的基础上对Jacobian公式进行近似处理。Max-Log-MAP算法计算对应于输 出为0和1的分支度量和，且以二者的差值作为软判决输出。在计算后验概率时 只考虑最大似然路径和最大竞争路径。在计算前向分支度量和后向分支度量时， 只考虑最大竞争路径的变化所带来的后验概率的转变。
与基于MAP算法的译码思路不同，根据第二章对维特比算法搜索路径算法 的简化可以看出，SOVA算法只搜索最大似然路径，并不会遍历译码格图中的每 个节点，在搜索路径上即存在巨大优势。从第3.2.1节对SOVA算法的推导可以 看出，SOVA算法计算前向度量值的方法与Max-Log-MAP算法一致，但是SOVA 算法无需计算后向分支度量，因此SOVA算法相比较于Log-MAP算法会有精度 上的损失，损失程度大约0.5dBo但是从搜索路径和计算复杂度的角度来讲， SOVA算法相比于Log-MAP或Max-Log-MAP算法具有巨大的优势。
假定编码长度L,编码器寄存器个数为v, SOVA算法中反向修正长度为3。
MAP、Log-MAP> Max-Log-MAP及SOVA算法复杂度分析如表3-1所示。
表3-1四种Turbo译码算法复杂度分析
MAP	Log-MAP	Max-LogMAP	SOVA
加法运算	4x 2V	15 x 2V + 9	10 x 2V + 11	2 X 2V 4- 8
乘法运算	6 x 2V + 1	8	8	8
指数运算	6	0	0	0
最大值	0	5 x 2V - 2	5 x 2V - 2	2 x 2V + 6/2
查表操作	0	5 x 2V - 2	0	0
存储量	(L + l) x 2V+1	(L+l) x 2V+1	(L+l) x 2v+1	(8 + 3) x 2V
从表3-1中可以看出，MAP算法的复杂度最高，Max-Log-MAP算法相比于 Log-MAP算法复杂度稍有降低，且无需查表操作，SOVA算法与Max-Log-MAP 算法所需操作基本相同，当分量编码器约束长度超过4时，Max-Log-MAP算法 的计算量将达到SOVA算法的两倍以上。
由以上分析可知，当译码器寄存器个数不小于4的情况下，SOVA算法的计 算复杂度要明显低于其他三种算法。并且，由于第二章已经介绍的对Viterbi算 法搜索路径的改进，又可以大大减少格图的搜索范围，更加降低SOVA译码算法 的算法复杂度。基于以上两点原因，SOVA算法具有相当大的应用前景。对于已 经具有较低算法复杂度的SOVA算法进一步简化使得其具有更加广阔的应用场
39
旦
o
本章第3.3.2节和第3.3.3节提出了一种继续简化的SOVA算法(Trimming SOVA),以下简称为T-SOVA算法。
