3.3.3T.SOVA(Trimming
通过前几节的分析，本节将介绍一种新的低复杂度SOVA算法，即简化的软 输出维特比译码算法(TrimmingSOVA),因此本算法简记为T-SOVA算法网29］。
为了减少度量差值的个数，首先应对SOVA的第一步进行优化，所以我们采 用Lazy-Viterbi译码算法进行最大似然路径的选择。Lazy-Viterbi译码寻找最大似 然路径极大降低了搜索路径的宽度，利用Lazy-Viterbi算法搜索ML分支仅仅是 T-SOVA算法的第一步，结合3.2.1对SOVA算法对数似然比LLR的介绍，T-SOVA算法的第二步就是要计算各个信息比特的软输出信息。
针对Lazy-Viterbi基于深度优先的思路发现，在信道条件较好，信噪比较高 的情况下，并不是每一个最大似然路径都有相应的竞争路径能够被插入到译码格 图中。在极端情况下，当信噪比极高时，可能大部分竞争路径没有机会排到优先 序列PQ的顶端。信噪比较高，即根据Lazy-Viterbi快速寻找到ML路径的情况 如图3-6所示：
LLR(t-l) LLR(t) LLR(t+l) LLR(q)	LLR(t+2 6 )
I.获得LLR的节点	ML路径	!
：二 \	I
：1 被忽略LLR的节点	路径 被忽乱勺竞争路径
一国HMEa务工t/f霹殍露回百目拓卷一
图3-6中加粗的实线表示经过Lazy-Viterbi算法搜索得到的最大似然路径， 实线表示在搜索过程中搜索到的某些节点的最大竞争路径，虚线表示在Lazy-Viterbi译码过程中被忽略掉的分支路径。由以上介绍可知，图中只有实心圆表示 的节点有软判决信息A3其他节点并没有通过竞争路径与最大似然路径的差值获 得软输出信息。
正是由于Lazy-Viterbi算法的这种特性，使我们在计算软判决输出LLR时有 如下两点优势：第一，由Lazy-Viterbi译码的过程我们可以知道，这种算法天然 地找到了节点的最大竞争路径，计算出了与最大似然路径最接近的缄，结合式(3-
43
24),这种算法从搜索机制上就适合于SOVA算法的计算和简化。第二，Lazy-Viterbi算法给那些被忽略掉的路径节点提供了更低的对数似然比LLR边界值， 这种削减了路径度量差值的算法更加适合于SOVA算法的简化计算，即T-SOVA 算法。
由Lazy-Viterbi算法可知，任意被忽略掉的分支路径差值都比距离该节点最 近处已经得到的LLR值大。这个结论极易证明，因为Lazy-Viterbi算法首先取出 某一点的ML路径值，后面再取出的就是竞争路径的最大值，其他任何路径都不 会比这个竞争路径的度量值再大了，所以得到的纯已经具有了最小值。根据这个 结论，我们可以近似得到那些被忽略的节点的LLR值：任何被忽略的节点处的 LLR值都比那些已经计算出LLR值的相邻节点处的值大，对于时刻3其中相邻 节点的范围为£ = t + l,....,t + 25o
由上面得到的结论，那些被忽略的节点处的LLR值可以由式(3-48)得到：
\LLRn(t^\LLR{q^	(3-48)
式(3-48)中的LLR(q)是｛|LLR(t + 1)|, |LLR(t + 2)|,…，|LLR(t + 26)|｝中的最 小值。
时刻/处的对数似然比LLR如式(3-49)所示:
LLR(J) = ln
迎=+1 ] D =T卜)
2⑺ % = +1)	/(%=+1)
p｛r\ut =-1)	p(%=-l)
Max-Log近似公式由式(3-50)表示：
In (x + y) = max (in x, In y)
(3-49)
(3-50)
综合式(3-49)和式(3-50)可得到LLR在时刻/处的值：
〃况(1卜0.5〃("勺(々=+1) —= -1)) + 4+"(月)	(3-51)
式中L如式(3-13)所示，儿表示先验信息，表示时亥贝+1)最大似然 路径上的节点，Si+i表示时亥1(1+1)的普通节点，式中火0)如式(3-52)所示：
△(尸)=In g+1(7〃4+J — In 力+i (% J	(3-52)
且有
!nA+i (^/+i) = ln/?0；＞/ l^/+i)	(3-53)
先将LLR的一部分只考虑信道信息和先验信息的影响，将d(£)由式(3-48) 表示，可以得到〃此：
\LLRi (z)i- I。乜 L - q (% = +1)	(% = -1))1 + \La (/)|	(3-54)
综合式(3-48),式(3-51)和式(3-54)可以得到那些在ML路径上竞争
44
分支被忽略的LLR的计算公式：
〃穴(/) = 〃«(/) + 〃k(/)	(3-55)
为了将T-SOVA算法应用到Turbo译码器中，需要分量译码器在迭代过程中 输入外信息Le：
4。) = 2 •(〃"(/)-40)	(3-56)
式中外和%为计算外信息的修正因子网］，可以避免两个分量译码器之间外信 息传递的相关性随迭代次数不断增加，从而造成译码性能的损失，增加该修正因 子的作用即为降低外信息相关性使SOVA算法性能更接近于Log-MAP算法。 乙⑷表示分量译码器的内信息，由信息位的信道信息和传入本译码器的先验信息 构成。
为了进一步简化SOVA算法，T-SOVA算法还设立了一个简化参数M,用来 限制分支度量差值队列的长度。假设竞争路径和最大似然路径的度量差值队列长 度超过L/M,则只取前L/M最小的值。利用这种简化参数M,可以使T-SOVA算 法的复杂度降低为SOVA算法的1/M。
综上所述，T-SOVA算法计算步骤可以归纳为以下5步：
1	.利用Lazy-Viterbi算法寻找最大似然路径；
2	.假设最大似然路径与竞争路径的度量差值大于L/M长度，选取最小的 L/M个度量差值，其余的度量值舍弃；
3	.检查是否最大似然路径上的节点的LLR值都已经有值，若某些LLR值 仍为8,则利用式(3-55)计算该处的LLR；
4	.用LLR的符号作为判决依据，若为负数则输出1,为正数则输出0；
5	.利用式(3-56)计算分量译码器输出的外信息L，并将外信息作为先验信 息传递给另一个分量译码器。
本节提出了 一种新的基于SOVA算法的简化算法，即T-SOVA算法，本算法 使得SOVA算法寻找最大似然路径更为直接，需要计算的软判决信息的数量大 大减少，且队列的存储及插删操作的复杂度变为原来的1/M。然后我们又给出了 将T-SOVA算法应用到Turbo码分量译码器中的方法,下一节将针对基于T-SOVA 算法的Turbo码译码器进行译码性能仿真及复杂度分析。
