3.2.3基于元胞自动机的选择算子设计
在传统遗传算法的求解过程中，种群中个体之间的交互是随机的。实际上早 在十九世纪，达尔文便意识到生物种群的分布被空间结构所限制，个体间的联系 与互动不可能是任意的。生物种群的演化过程也证明了地理上的隔离很大程度上 维护了生物种群的多样性，例如澳大利亚因为地理上与欧亚大陆的隔离，使得澳 洲物种与欧亚大陆上的物种在数万年内各自沿着不同的方向进化，最终诞生了同 一物种的不同亚种。
元胞自动机作为一种动力系统的理想空间模型，通过一系列简单的演化规 则便可以模拟出自然界极其复杂的演变现象，然而利用元胞自动机理论解决虚拟 网络映射问题的研究成果极为罕见，文献［60］提出了一种基于元胞遗传机制的虚 拟网络映射算法，该算法首先改变了染色体的编码方式，采用二进制方式对染色 体中的各个节点编号进行编码，随后将每一个二进制位作为元胞个体，运用元胞 自动机的演化规则改造了传统遗传算法中的交叉操作，使得染色体间的交叉操作 在更为微观的尺度上进行，然而该算法没有考虑到空间结构对种群进化的影响， 未能显著地改善传统遗传算法容易收敛于局部最优值的问题。
本文利用元胞自动机对传统遗传算法中的选择操作进行改造，将染色体疋丿 作为元胞个体放置于元胞晶格中，Z,丿为染色体的空间坐标，种群以矩阵表示， 如公式（3-4）所示：
Y
•• n,n
每一条染色体都对应着一个生存状态, S’』取值为1或者0,以“1 ”代表 染色体处于“生”状态，以“0”代表染色体处于“死”状态，种群的生存状态 以矩阵表示，如公式（3-5）所示:
Sl,2 …S],”
$2,2 …$2,”
S”,2 ^n,n
邻域结构是影响信息扩散速度的重要因素之一，信息的扩散速度随着邻居数 量的增长而加快，在常用的邻居结构中，冯诺依曼型由于邻居数量最少，信息扩
25
散速度过慢导致算法收敛困难。扩展摩尔型由于其庞大的邻居规模，信息扩散速 度过快，如果采用扩展摩尔型邻居，在种群中个体数量较少的情况下会导致大多 数个体之间都可以进行互动，无法体现出空间结构对于种群演化的影响。因此, 本文采用周期型边界条件的摩尔型邻居作为邻居结构，如图3-6所示：
—汽讓疔Ilf字j「
X—j
發1摻滲滲撐浄鬓资:殘II邂
1
1
XqT	Xg
1
Xf,j + L
i " ■■
+1,7-1	X*,j
si
图3-6染色体邻居示意图
在周期型边界条件下，元胞空间的上下边界被设定为相互衔接，左右边界也 被设定为相互衔接，所以元胞空间边界上的元胞个体将另一侧边界上的个体作为 其邻居，以染色体/,］为例，其邻居个体的集合心］,1如公式(3-6)所示：
Xg ~ {^1,2 > ^2,1 >^2,1'^n.n ^l.n > ^n,\ > } (3-6)
在自然界中，如果种群的密度过大，个体很容易因为生存资源的枯竭与同类 之间的激烈竞争而快速消亡。与此相反，如果种群密度过小，个体很容易因为没 有足够的同类以相互协作并繁衍下一代而快速消亡。因此，一个恰当的种群密度 对于物种的生存是至关重要的。元胞空间仅仅能够表现种群内不同个体间的静态 空间结构关系，然而元胞自动机作为一种对大自然规则进行有效模拟的工具，可 以设定一系列的演化规则来定义种群密度对于个体生存状态的影响，通过不断改 变元胞个体的“生” “死”状态，实现种群的动态演化过程。
演化规则实质上是元胞生存状态的状态转移函数，文献［61］对元胞自动机的 演化行为进行了研究，将演化规则分为稳定型、周期型与复杂型三种。周期型代 表着元胞种群的生存状态随着演化过程的进展在几种状态下不停循环，稳定型代 表着元胞种群的生存状态经过一定时间的演变过程后处于一个固定状态，而复杂 型代表着元胞种群的生存状态处于混乱与秩序之间的一种复杂中间状态。文献 ［62］对三类演化规则进行了仿真实验，仿真结果证明了稳定型演化规则会导致进 化过程停止，无法取得优质解，而周期型与复杂型可以取得较好的寻优结果。
由于虚拟网络映射问题是著名的多峰问题，周期型演化规则为摆脱局部最优 值提供了可能，本文将周期型的元胞自动机演化规则引入虚拟网络映射问题的求
26
解过程中，可以进一步降低算法的选择压力，避免适应能力较强的染色体过度繁 衍造成算法局部收敛。本文设计的周期型演化规则如公式（3-7）所示：
其中必？代表空间坐标为2•打的染色体在t时刻的生存状态，s£严代表空间 坐标为必丿的染色体在t+1时刻的生存状态，明代表t时刻空间坐标为i,j的染 色体的邻居集合中为“生”状态的个体数量。
元胞自动机的空间结构将遗传算法的交叉与变异步骤限定在每个染色体的 邻居空间内，而元胞自动机的演化规则使得每一代种群中只有部分处于“活”状 态的染色体执行遗传操作，基于元胞自动机的选择算子具体流程如下：
第一步：遍历元胞空间，依次选择染色体。
第二步：判断染色体X万的状态％是否数值为“1” ,即个体处于“生”状 态。若元胞个体处于“生”状态则进入第三步，否则进入第四步。
第三步：将染色体兀丿与其邻居空间内适应度最强的个体进行交叉与变异操 作，遗传操作后的个体与操作前个体的适应度进行比较，若子代拥有更好的适应 度，则利用最优的子代个体代替中心元胞个体，否则保持中心元胞不变。
第四步：若所有个体遍历完毕则进入第五步，否则返回第一步。
第五步：按照公式（3-7）对全部染色体的生存状态同步进行更新操作。 3.2.4交叉算子设计
本文采用传统遗传算法中的部分交叉方法，通过随机数的方式产生两个交叉 点，随后交换两个父代染色体在交叉点之内的部分。由于同一个虚拟网络中的各 个虚拟节点必须位于不同的底层节点上，所以对于交叉结果中重复的节点序号， 本文选择对匹配区域以外的重复序号重新进行随机选取，直到子代个体内部没有 重复的节点，如图3-7所示：
27
交叉点1	交叉点2
8
3
7
2
9
5
11
5	2
13
8
16
1
15
,交叉
*
3
13
8
16
5
11
1 5
7
2 I 9 |
1
15
t冲突消除
10
3
13
8 I 16 |
5
11
5
6
7
2 1 9 1
1
15
图3-7交叉操作示意图
