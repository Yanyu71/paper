2.1.5多态技术
多态(Polymorphism)技术是一种加密方法，它通过变换静态二进制代码而非 运行时代码来躲避基于签名的恶意代码扫描器。变换了内容的恶意代码能够躲避 扫描器的识别是因为由原始恶意代码生成的签名字节序列无法匹配现有的文件 [9]o下图展示了多态技术的典型示例，即通过多态引擎对恶意代码进行自我复制。
12
入口点
图2-3 Polymorphic处理流程
1从入口点进入。宿主机的应用程序可能会先行开始，但执行到某时刻多态 引擎将开始控制CPU。
2执行转换函数。多态引擎把在感染主机上转换后的恶意代码解码为本地操 作码，在这个过程中使用了•在感染主机的文件中的多态密钥。
3载入可执行文件。多态引擎把本地操作码写入内存用于执行。
4运行。当多态引擎完成了加密操作后就会跳到解码后的恶意代码起始处， 然后开始执行这段代码。
5执行恶意代码。恶意代码能够完成一些行为如设置病毒后门，设置一个键 盘记录器或窃取个人信息。
6生成一个新的密钥。对于多态引擎生成新的变种，必须首先生成一个新的 密钥，然后存储新变种的版本信息。
7执行逆分发函数。这个逆向过程函数把可执行文件转换为变异的代码。但 是一些信息必须被清楚地记录在类似多态引擎跳转变换函数。
每次执行代码的时候，多态技术会使用不同的密钥来对自身代码进行变异然 后写入到被感染主机中，这导致每次新的拷贝都会生成新的签名。当多态引擎把 恶意代码进行解码并载入到内存中运行时，操作码对于每个实例都是有相同语义 的，即多态引擎不会显著地改变内存中运行的操作码。所以当恶意代码在运行的 时候使用签名检测方法是可行的。另一种检测效果良好的方法是使用神经模式识 别。
13
