1.2研究现状
分析恶意代码的功能是恶意代码分析的基础，目前常规的恶意代码分析方法 分为静态分析和动态分析两种。动态分析是指在一个可控的环境内运行恶意代码, 分析恶意代码与运行环境之间交互行为的方法。该方法通过比较环境在运行样本 前后产生的变化，从多个方面给出样本的指令以及系统调用的描述来大致还原恶 意代码实际功能。动态分析实质上就是运行程序，再根据各种寄存器、变量等的 变化来描述其行为。用户可以直接对这些寄存器、变量进行观察，也可以使用一 些辅助工具。这些辅助工具一般会在样本程序中加入部分代码来实现动态监视功
4 能。常见的动态检测工具有CWSandbox⑵,Norman Sandbox⑶,Joebox囹,Anubis⑸， ThreatExpert[6]等。静态分析方法是指不运行恶意程序而是通过文件结构进行分析 的方法。一般而言，静态分析需要首先对可执行文件或源代码进行反汇编、反编 译等方法进行处理，然后再做相应的分析。和动态分析相反，静态分析不编译运 行程序，而是通过对程序源代码进行分析以发现其中的错误。静态分析一般是作 为动态分析的补充来施行的，程序的运行时间可能远超预期，如果每次分析都完 整运行整个程序的成本过高，并且由于未对其进行静态分析，程序的不可预见性 也大大提高。这些都是不利于动态分析的。在程序运行前尽可能多地发现其中的 错误就显得很有必要。事实上，任何成熟的系统中都还有很多未知错误。手工测 试需要做大量重复冗余的操作，检测效果可能也并不尽如人意，而通过静态分析 方法则发现了现存系统中的很多错误。由于有些分支条件在实际执行中极难满足, 而使用静态分析方法可以了解恶意代码在执行中极难获取的分支细节，能够提炼 出恶意代码的静态特征。1996年，Forrest等人提出了一种具有里程碑式意义的入 侵检测模型，这一模型基于系统调用⑺：N-gram模型是基于进程行为的入侵检测 技术的典型代表。由于系统调用在操作系统中具有重要作用，系统调用的相关属 性常用来描述进程行为，检测程序的入侵行为也常使用这些系数。受Forrest等人 工作的启发，后续出现了大量优秀成果，包括Vt-Path模型、FSA模型和Var_gram 模型等。但这些系统仍存在诸多问题，例如进程行为建模不够准确，检测率随环 境变化较大，系统实时性较差等，这些问题仍有待完善。
另外，词法分析技术和二进制比对技术是静态检测中常用的两种专门针对软 件代码审查的检测技术。这类针对代码审查的检测技术普遍具有简单高效的特点, 但是只针对代码本身特征的检测并不能很好的检测出代码语义层级的缺陷，虽然 可以对其中引入模式识别来加强检查特征的匹配类型，但这只能略微突岀其检测 的特征，实际检测效果的提升并不明显；下面介绍的几种检测方法一定程度的客 服了上述两种方法的缺点。规则检查(Rule Check)对于已知类型的漏洞具有极高 的检测率，并且对于已知类型的漏洞检测效率颇高，但规则检测对未知类型的漏 洞就无能为力了。类型推导(Type Inference)的自动化程度较高，是一种专门针对 编程语言的检测技术，但这种检查只对与控制流无关的漏洞具有较高的检测率。 模型检测(Model Detection)主要检测涉及时序的漏洞，是一种比较成熟的形式化 检测方法，但这种检测方法的资源开销较大，并且对内存相关漏洞类型的支持度 不高。定理证明(Theorem Proving)与符号执行(Symbolic Execution)则使用严格的 数学推理来进行检测，这两种方法偏重于理论证明，目前还没有与能够实际应用 的算法。静态分析在实际使用时非常复杂，而且也可能得不到精确的数字。为了 找出能够显著降低生成过程合同信息的填充测试代码，静态分析有时会得出某种
语义，而这种语义对于代码本身是不相关的。目前优化合同分析的步骤大致如下： 首先，检测程序创建一个特殊的初始配置并启用基于此配置的静态检查，定期地 获取反馈并利用这一反馈进行基本分析。这一步骤完成之后，检测程序将转移到 无需处理额外负担的静态分析的解决方案。然后，检测程序可以尝试使用合同规 约对代码进行逐段的处理并进行深层分析。
