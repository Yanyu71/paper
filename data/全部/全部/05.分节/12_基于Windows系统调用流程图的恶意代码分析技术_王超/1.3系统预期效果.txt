1.3系统预期效果
本文提出了针对可执行文件静态分析的检测模型，并对这种模型中使用的关 键技术进行了研究讨论与综合分析。构造模型的基本思想是将输入的可执行文件 进行反汇编得出汇编指令序列，然后提取出其中所有的系统调用归纳出此样本的 系统调用集合，再将此样本的系统调用同数据库中的家族签名进行比对分析。具 体分析过程大概如下，首先对可执行文件进行反汇编，然后从函数的入口地址开 始顺序扫描可执行代码，之后通过RET、JMP、JXX（除JMP外的其他跳转指令） •和CALL四种类型的指令建立函数整体的执行流程图。在建立流程图的时候，通 过适当过滤一些分支进行一定的简化与处理，从而得到比较直观地流程图，方便 比对等操作。由于理解应用程序的语义是非常复杂的，为了高效地分析程序，此 处只关注系统调用函数而忽略其他调用操作。为了分析应用程序的系统调用的偏 序关系，需要以应用程序各个函数的系统调用图为基础构建样本程序的流程图， 为了过滤冗余信息，提取样本的本质特征，并且方便后续处理，此过程之后会对 所有的系统调用进行一步映射操作，即将系统调用函数分解为一个二元组，此二 元组中的一元表示系统调用中影响的资源，即类型元，另外一元表示此系统调用 的具体操作，即操作元。不同于单纯的文法分析，本课题借助动态分析的思想， 引入了系统调用流程图。相对于传统的文法分析，提升了恶意代码静态检测的精 确度，对部分Windows系统的可执行文件恶意代码测试特征库的生成提出了较 为完整的解决方案并预期获得以下成果：
1.获得恶意家族特征并构建对应的特征库。	一
2.实现特征矩阵相似性比对算法。
3.实现基于Windows API的恶意代码检测系统。
在实际使用中把未知的可执行文件作为输入进行检测，通过对输入文件进行 预处理然后与训练生成的签名进行匹配得出测试结果。通过整合处理这些序列生 成误报率较低、漏报率较低的恶意代码测试特征库，为恶意代码检测提出快捷简 便的特征库生成方案。本题预期发表论文一篇，创建恶意代码测试特征库一个并 实现基于Windows API的恶意代码检测系统，生成测试报告。
