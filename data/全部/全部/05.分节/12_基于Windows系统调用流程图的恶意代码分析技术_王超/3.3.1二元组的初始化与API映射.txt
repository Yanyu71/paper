3.3.1二元组的初始化与API映射
程序的库函数调用关系非常复杂，直接对其进行分析不仅繁琐，而且极易产 生新的错误，如果能够进行提炼将大幅简化后续工作，并能剔除函数的冗余信息, 从更抽象的层次获取程序行为：在此我们增加了一步处理操作以实现上述目的。 由于库函数调用名千差万别，但是本质操作可能是相似的，所以，我们把增加了 一步化简操作，即将每个Windows API分成一个二元组，其中之一是具体类型， 另一部分是执行动作。具体类型即常见的API调用资源，ACS系统只关注常见的 APE 根据MSDN, ACS将Windows API的调用资源分为32种，如memory, register, mutex等。操作动作又分为打开、关闭、读和写共4种，所以API调用即被分成128 种(32*4)。例如，malloc()函数可以转换为memory + writeo这样处理能够屏蔽 API中大量的非关键和冗余信息，提炼出语义层级的抽象含义。实践证明，这一 处理过程极大克服了一般静态检测的缺陷，检测模糊化处理的恶意文件具有较好 的适用性。具体映射表如下：
表3-1类型映射表
类型映射码	0	　1	　　　2	3	　　4
具体类型	application	　　　■ Hg	　　　、、，' ，i	driver	　　event
类型映射码	5	　6	　　　7	8	　　9
具体，.	?圣	' handle	　　　heap		　　iDsiaLu..'e
类型映射码	10	　11	　　　12	13	　　14
裝类型	job
]5	　mailslots
1 A			　　i - ：技:籍
.大生,liA.月J
「丄	mod it?.e	　　' -ex .		　　、z	　　register
类型映射斤\	20		　　　2。	23	　　24
r'egistiy	<cnirce		　　ivi.ce	　　session
类型映射码	25	　26	　　　77	28
具体类型	socket	storage	　　　thread	timer	token
类型映射例 30	31
.具体类型**	window	密"霉籌套WWS
表3-1展示了二元组的操作类型映射关系，其中操作类型依据MSDN,每个操作
类型都有一个对应的操作类型映射码，映射码的范围为0-31。
表3-2动作映射表
动作映射码 0	.	1	2	3
25
表3-2展示了二元组的动作映射关系，其中具体动作为打开、关闭、读和写，分 别对应一个映射码，依次为0、1、2、3。
表3-3常见API映射表（操作类型映射码+动作映射码）
API映射码	130	　　　132	　　132	132	　　132	　　　133
API	malloc	　　　sirchr	　　strlen	strenip	　　strstr	　　　a ton
API映射码	133	　　　133	　　•ICC	133	　　133	　　　133
htonl	　　　htons	　　memset	inemcpy	　　strcat	'寥，饗戀復警愆笠渗
strepy
AP诫射码	]3 3
API	sircat	•' ''I/*--' 'i’a ；；
表3-3展示了一些常见API的映射关系，由于在类型映射表和动作映射表中都没有 明确对应关系，因此提取出一些常见的API并列出其对应的映射码，API映射码 由具体类型码和动作类型码两部分组成，前者占两位，后者占一位，具体对应关 系如表3-3所示。
表3-4常见类型映射表
类型映射码 5	13	13	13	13	13
具体类型 ic	is	region str	mem arg
类型映射码	13	13	13	14	25	wsa
具体类整 ffjfllll___:兰―tab、." "" _亠
表3-4展示了一些常见的类型映射关系，由于在表3-1中并未出现，所以需要单独 进行设置，具体对应关系见上表。
表3-5常见动作映射表
动作映射码	00111
具体动作	alloc	start	exit	terminate	fi*ee
动作映射矶	2	2	2	3	3
具体动作	is	find	get	set	init
动作映射码 3	3	3'
具体动作create	cpy	m
表3-5展示了一些常见动作的映射关系，由于在表3-2中并未出现，所以此处对其 进行了单独的设置，具体对应关系见上表。
