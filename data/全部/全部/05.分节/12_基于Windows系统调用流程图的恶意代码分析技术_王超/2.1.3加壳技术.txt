2.1.3加壳技术
壳(shell)是指在一些计算机软件里专门负责保护软件不被非法修改或反编译 的程序。壳一般都是先于程序运行的，它首先获得程序的控制权，然后完成它们 保护软件的任务。加壳技术和加密技术密不可分，在加壳技术出现初期，由于当 时的加密技术也才起步，所以大多数经过加壳软件和(或)加密软件处理所生成的 程序在原始程序与壳之间存在一条明显的分界线。随着软件加密技术与加壳技术 的发展，越来越多的加壳程序能使加壳的恶意程序不被跟踪和反编译，如ASPack、 PECompact, DBPE、MESS、HACKSTOP> UPX等。加壳技术是利用一些特殊 算法，对可执行文件(exe)或动态链接库文件(dll)里的资源进行压缩处理。经过加
10
壳处理的程序虽然可以直接运行，但是直接对加壳后的程序进行反汇编是无法得 到汇编指令序列的，要经过脱壳等预处理操作才可以得到汇编指令序列。加壳处 理后的程序代码在磁盘中是以加密的形式存在的，加密的代码执行时在内存中通 过解密算法还原，执行之后则会立即删除。这样就能防止程序被静态反编译，并 能有效地防止破解者对程序文件的非法修改。由于加壳后的程序难以被检测，加 壳技术被广泛应用于恶意代码隐藏和反检测保护上。下面简述软件加壳的过程:
图2-2壳的装载过程
1获取壳自身所需的API地址。通过PE工具比对加壳前后的输入表近乎无交 集，加壳后的程序API调用函数极少，有些可能只有GetProcAddress()函数或者 Kemel32.dll动态链接库。为了更好地伪装恶意程序，壳会调用GetModuleHandle。、 GetProcAddress()和LoadLibrary。等API来掩饰程序的目的。
2解密原程序中各个区块的数据。出于保护程序代码和数据的目的，加壳程 序一般会将原程序文件的各个区块加密。在程序执行时解壳程序会对这些区块数 据解密，让程序能够正常运行。壳一般是按照程序的结构进行分块的，例如一个 程序是由若干子函数(Subroutine)构成的，那么壳就以子函数为划分的最小单位将 程序进行分块，再将每块中的程序进行加密。在这种情况下每段子函数的加密过 程是独立的。
3重定位。将被加载到指定内存地址中，这个内存地址称为基地址。由于系 统每次运行程序的初始状态不同，运行环境也不同，所以每次运行恶意程序时文 件执行时的基地址一般不同。因此每次执行恶意程序代码都需要重新定位其在内 存中的基地址。
4 HOOK-APL由于系统无法保证每次运行程序都能提供完全相同的初始状 态，所以程序每次运行时都会动态生成程序的入口地址以及IAT。壳通过模拟操 作系统自动将IAT和入口地址进行赋值。完成赋值操作后壳便完成了自己的使命,
11
将控制权交还给恶意程序。
5跳转到程序原入口点(OEP)。这时候壳的任务就完成了，它会把控制权交 还给原始程序。过去加壳后的文件往往具有一条明显的“分界线”，但随着加壳 与加密技术的提高，现在的壳己经没有这条“分界线"了。
