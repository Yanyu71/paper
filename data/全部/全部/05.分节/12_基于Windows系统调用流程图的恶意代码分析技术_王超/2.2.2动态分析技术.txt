2.2.2动态分析技术
动态分析通常在一个隔离的、可控的环境中运行恶意代码，在运行的过程中 通过监视程序寄存器、内存状态来分析恶意代码对操作系统所引发的行为活动， 相比于静态分析，动态分析并不关注程序代码本身，通过运行分析代码的恶意行 为，非常直观有效的获取程序的行为特征。由于动态分析不关注程序代码本身， 这种分析技术能有效地应对采用了加壳、多态和变形技术进行伪装的恶意代码。 动态分析技术的适用范围较广。按照在时间上使用策略的不同，动态分析技术可 分为动态追踪法和状态对比法〔⑵。
1.状态对比法。恶意代码在运行前后会对系统造成一定的影响，状态对比
17
法就是在这个基础上进行讨论的。该方法只考虑恶意代码的运行始末两个点系统 环境的变化，忽略了其运行过程这条线中系统环境动态连续的改变。因此，状态 对比法不能完整全面的反映恶意代码运行过程中任意时间片系统状态的变化情 况，所得到的分析结果非常片面，无法准确全面地反映恶意代码的真实行为。虽 然状态对比法所得到的恶意代码行为特征的信息量有限，但是这种方法在实现上 比较简单，易于实现。
2.动态追踪法。和状态对比法不同，动态追踪法在恶意代码的执行过程中 进行全程监视。与状态对比法相比，这种方法可以完整记录恶意代码执行过程中 任意时刻系统环境变量与状态的变化，能够准确完整地反映恶意代码的行为特征。 相应的，动态追踪法的实现难度较大。按采用行为监测技术的不同，动态追踪法 分为基于用户态的监测技术、基于内核态的监测技术和基于指令集模拟器的检测 技术三种，下面将依次介绍：
(1)基于用户态的监测技术。基于用户态的监测技术是指利用系统提供的编 程接口进行钩挂，切入检测程序，然后通过监测恶意代码执行过程中的系统API 调用及其输入输出来提取恶意代码的行为。基于用户态的检测技术容易实现，但 该技术的不足之处在于无法分析和截取直接请求系统内核服务调用的行为。基于 该技术实现的恶意代码自动分析工具有：Norman Sandbox、CWSandBox和Joebox 等。Norman Sandbox和CWSandBox是运行于虚拟操作系统环境中的沙箱工具， 因为这两种沙箱工具使用系统快照(Snapshots),能够很快恢复系统的初始状态， 分析中将运行过程分片进行监测，将时间片划分为较小粒度即能近似获得系统任 意时刻的系统环境变化。然而虚拟机技术较易被恶意代码识别。与前两种沙箱不 同，Joebox使用真实操作系统环境对恶意代码进行动态分析，整个分析过程并未 使用仿真模拟，Joebox最明显的优势是它能够有效处理具备仿真识别功能的恶意 代码，相应的，这种沙箱技术恢复初始状态较为复杂，恢复时间长。
(2)基于内核态的监测技术。与基于用户态的监测技术相对，基于内核态的 监测技术是基于内核态的API Hooking来对恶意代码的行为进行监测的一种技术。 基于内核态的监测技术主要通过修改内核的系统服务分发表SSDT(System Service Dispatch Table)中系统服务函数的地址来实现对恶意程序的检测功能。另 夕卜，用户态函数与内核态函数一般是多对一的关系，基于用户态监测技术的挂钩 多并且分布较为混乱，而实现同样功能的内核态监测技术则使用少而集中的挂钩。 基于内核态的监测技术工作于操作系统内核态，监测能力强，但是实现难度较大， 使用基于内核态监测技术的自动化分析工具有MwDAS和Capture等。
(3)基于指令集模拟器的监测技术。指令集模拟器(Instruction Set Simulator, 简称ISS)是在主机上模拟被侵入的主机的指令集来对恶意程序的侵入过程进行
18
仿真。按实现方法进行划分，基于指令集的模拟器可分为解释型和编译型指令集 模拟器两种。解释型模拟器由于是对每条程序指令解释执行的，所以其性能相对 于编译型模拟器低。基于指令集模拟器实现的主流恶意代码分析工具有 TTAnalyze、Zero Wine、Panorama等。
