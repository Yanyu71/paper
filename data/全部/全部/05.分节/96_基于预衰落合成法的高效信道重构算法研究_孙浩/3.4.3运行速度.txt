3.4.3运行速度
本小节利用Matlab的内置探查器命令对实际执行时间进行了跟踪，比较了 本章所提出的算法和multi-shot算法的实际执行速度，证明该算法在信道重构效 率上的优越性。本小节一共进行了两种情况的仿真。在情况A中，在第一种探 头配置下复现由单个簇组成的目标信道，簇内子径的角度呈拉普拉斯分布，目标 探头数量为K = 8；在情况B中，在第二种探头配置下，选择文献［27冲定义的 CDL-A信道模型作为更复杂信道环境下的目标信道，目标探头数量为K = \6 o
可以预期，由于算法本身的随机性，算法多次运行的结果可能会有所不同。 因此，在这两种情况下，这两种方法都进行了五次独立运行，其执行时间以及以 均方根偏差(Root Mean Square Deviation, RMSD)如表3-2所示。可以观察到， 由于本章出的算法会在每次迭代中从相关性集合中随机选择一个子集，因此在不 同的运行批次中，算法的RMSD结果之间会有细微的差别。
37
表3-2算法运行结果对比
运行次数
1
2
3
4
5
情况
A
Multi-shot
RMSD
执行时间（秒）
梯度下降
RMSD
执行时间（秒）
情况
B
Multi-shot
RMSD
执行时间（秒）
梯度下降
执行时间（秒）
对比两种算法的表现可以看出，基于梯度下降的算法的仿真精度可以非常接 近甚至优于multi-shot算法，但其计算复杂度在执行时间上比multi-shot算法低 几个数量级。除此之外，随着需要求解的问题的规模逐渐增加，例如从情况A 到情况B, multi-shot算法的执行时间比梯度下降算法增加得更快。这是因为 multi-shot算法的额外计算复杂度会随着迭代次数和和优化问题规模的增加而增 加。与之相反的是，本章提出的算法的计算复杂度只会随着训练过程中权值数量 的增加而线性增加。值得注意的是，实际执行时间的结果与第3.3.5小节中的计 算复杂度的理论分析结果是一致的。
