2.4.2VoLTE测试例的构造过程及方法
测试中分为白盒测试和黑盒测试。协议一致性测试不关注内部实现，因此是 黑盒测试的一种。协议一致性测试中，将测试系统（如测试仪表）和被测系统（如 终端）通过端口连接起来，测试系统向被测系统发出激励信号，接收被测系统的 反馈消息。测试系统收到反馈消息后根据协议与本地数据进行对比，判断该激励 的反馈是否通过，通过则执行下一条激励，如此直到测试例执行结束。测试例就 是这个测试过程的一个描述。如图2-6所示：
M 激励 \
测试系统 <	被测系统
图2-6协议一致性测试模型
在协议一致性测试中，从3GPP规范到开发出最终的可用的测试例和测试平 台过程复杂，需要深入研究测试内容。一般来说，成功的设计一个测试例大概有 这几个过程：首先，深入分析协议要求，提取出关键的测试点和测试过程中需要 重点关注的地方。其次，协议规定了必须执行的步骤，也规定了可选步骤，必须 准确把握测试例的核心点，设计良好的测试例是简单高效的。这样可以减少测试 过程中可能出现的漏洞。最后，协议对测试环境和相关配置都有所规定，必须准 确按照协议要求进行配置，否则可能因仪表问题使得终端无法通过测试。
基于TTCN-3语言以及相关开发工具开发一个完整可用的测试例要经过以 下过程［1刀：
首先，根据协议规定，定义测试相关的数据类型，主要包括消息的数据结构 和消息内部的信息元素的数据结构。
其次，在测试例的执行过程中，需要构建相关的数据和消息，主要包括消息 模板和相关常量的定义，消息的初始化以及执行过程中的参数配置以及数据消息 和相应参数的一致性。
再次，定义和创建相关的端口和测试套组件，包括各端口的定义以及执行的 操作，各组件的创建和中止，各组件之间的连接，各组件和抽象测试接口之间的 映射等等。
最后，测试过程中的各种操作，包括消息数据的运算处理，例如加解密等过 程，各端口对数据的接收和发送，根据接收到的消息和数据进行判定测试点是否 通过以及据此生成下一条消息的过程。
