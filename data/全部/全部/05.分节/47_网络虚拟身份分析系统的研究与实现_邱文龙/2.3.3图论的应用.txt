2.3.3图论的应用
图的概念在现实生活中很普遍，在互联网中亦是如此，并且图论中的算法在社交网络中有着广泛的应用，尤其是在处理人际关系方面的应用。因为本文的算去是基于图论中的标签传播算法，所以后面会对这一算法进行详细的介绍，这里只对图论中的常用算法的应用做一下简单的介绍。331最小生成树
假设图G=(V，E)是一个连通的无向图，则把它的所有的节点V和部分边E构成的一个子图G即G=(VE将图中所有的节点相连但又不形成回路，则称子图G是图G的一生成树。而对于带有权值的加权连通图，生成树的权值是将生成树中所有边上的权值进行相加，从定义知生成树不上一种，其中权值最小的生成树称为图的最小生成树。求图的最小生成树有两个经典的算法，分别为Prim算法和Kruskal 算法。
Prim法
O设置一个节点集合V和一个边集合E，V和E的初始状态都为空;@选定图中的一个节点i，从i开始生成最小生成树，将i加入到集合 V;O重复下列操作，直到选取了 n-1 条边:
1.选取一条权值最小的边(M，N，其中Mev，NEV
2.将节点N加入集合V，边(M，N加入集合 E;得到最小生成 T(V’，E)
2)Kruskal 算法
假设最小生成树为 T=(V’，E，设置边集合E的初始状态为空集。首先将图 G 中的边按权值从小到大进行排序，然后从最小的边开始选取，若选取的边使生成树T不形成回路，则把其加入集合 E中，作为最小生成树 T的一条边:若选取的边使生成树构成回路，则将其舍弃;如此进行下去，直到 E中包含了 n条为止。最后得到的生成树 T即为最小生成树。
最短路径
在带权值的图 G=(V，E)中，若节点 Vi，V是图G中的两个节点，从节点 V到V的路径长度定义为路径上所有边的权值的和。从节点V到V可能有多条路径，其中权值的和最小的那条路径就称为节点 Vi到V的最短路径。求最短路径的算法有多种，下面只简单的介绍其中的两种: Diikstra 算法(也叫 D算法)和Floyd-Warshal1 算法(也叫F算法)。
Diikstra 算法
Diikstra(迪杰斯特拉)算法大多用来用来计算一-个节点到其他节点的最短路径，是解决单源最短路径的经典算法[18-19。其主要思想是以始发点为中心向外层层遍历，直到访问到终点为止。
O算法思想
设 G=(V，E)是一个带权值的有向图，将其节点集合 V 分成两组，第一组为已遍历过的最短路径的节点集合，用 R 表示初始状态 R 中只包含一个始发点，以后每次计算出的一条最短路径就将其计入到集合 R 中，直到所有的节点都加入到R 中，算法停止:另一组为其余未被访问过的节点集合，用 W 表示，按照最短路径长度的递增次序依次把这一组的节点加入到集合 R 中。注意，在加入的过程中，要始终保持从始发点 V 到集合 R 中的每个节点的最短路径长度不大于从始发点 V 到集合 W 中任意节点的最短路径长度。另外，集合 R 和集合 W 中的每个节点对应一个距离，R 中节点的距离代表从节点 V 到此节点的最短路径长度，W 中节点的距离则代表从此节点只包括 R 中的节点为中间节点的当前最短路径长度。
O算法步骤
1)初始状态时，R中只包含始发点 V，即 R=V)，V 的距离为0。而集合w 包含除V以外的其他所有节点，即 W=其余节点，若V与W中的节点w有边，则<w，V>的权值为常量，若 w不是V的出邻接点，则<w，V>的权值为o;2)从W 中选取一个距离 V 最小的节点i，然后把节点i加入到集合 R中选定的该距离就是V到节点i的最短路径长度;
3)以节点i为新的始发点，更新 W 中各节点的距离。若从始发点V到节点w 的距离(经过节点i)比原来的距离(不经过节点i)短，则更新节点 w 的距离，更改后的距离为节点i的距离加上边的权值;
4)重复步骤2)和3)直到所有的节点都加入到集合 R 中Floyd-Warshall算法
Floyd-Warshal1(佛洛伊德)算法是处理任意两点间的最短路径的经典算法可以很好的处理有向图和带有负权值的最短路径问题。
1算法思想
Floyd-Warshall 算法其实是一个动态规划的算法。假设在图 G=(V，E)中，从任意节点i到j的最短路径不外乎有以下两种情况，一是从i直接到i:二是从i经过若千个节点到i。所以，我们假设 Distance(i，j)为节点i到节点的最短路径的距离,对于其余每一个节点n,我们验证 Distance(i,n)+Distance(n,j)<Distance(i.i)是否成立，如果成立，说明从节点i经过节点n再到节点的路径比从节点i直接到节点;的路径距离要短，所以我们修改节点i到节点的距离 Distance(i,i)=Distance(i，n)+ Distance(n，j)，如此进行下去，当我们遍历完所有的节点后Distance(i，j)中的值就是从节点i到节点i的最短路径的距离[2012算法步
1)选取图中的任意一条边路径，两个节点之间的距离即为边的权值，如果某两个节点之间没有边将它们相连，则权值记为o;
2对于给定的节点i和i，验证是否存在另外一个节点n，使得从节点i到节点n再到节点i的距离比已知的距离更短，如果存在则更新已知的距离,否则保留原来的距离。
