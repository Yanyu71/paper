4.4.2统计相同设备上的虚拟身份
首先，为了确定跨度为一小时的时间窗口，我们对first time和last time 取平均值，然后将计算后的值分别转换成离它最近的整点时刻 hourtime 和半点时刻 halfhour。这样就解决了虚拟身份出现在时间窗口两边缘的情况，即实现了时间窗口的半点移动。
其次，以custom idMAC hourtime作为 key，统计出在很短时间内出现在某设备上的虚拟身份，同样，对 halfhour 做同样的操作，后面会对这两个时间窗口的结果进行合并。而且我们会对这两个时刻打上标签，另外，在此过程中会对出现的虚拟身份进行去重。
1输入数据
这一步的输入数据包含两个文件:
1原始数据，数据量约为100GB;
2上一步(4.4.1)的输出数据，数据量约为100MB;
并将文件@作为分布式缓存文件。因为此文件比较小适合作为分布式缓存文件，这样会很好的提高运算速度。
2伪代码
在伪代码中可以看出:
O在Mapper 阶段首先对公用账号进行了分布式缓存，其次对不同的时间窗口进行了分开统计，并在虚拟身份后面打上标签加以区分。@在 Reducer 阶段对不合理的身份数进行过滤，只出现一个虚拟身份的肯定无法和其他虚拟身份进行合并;其次，对一个设备上出现的虚拟身份数过多的也进行剔除，因为这个 MAC 地址有可能是一台 NAT 设备，如路由器，会汇集不同人的虚拟身份，造成很大的噪声干扰。
3输出结果
由图 4-6 可以看出，同一设备上出现的虚拟身份已去重，且虚拟身份后面的“1”和“2”就是所打的标签，标识是属于整点的时间窗口还是属于半点的时间窗口4.4.3对相同设备上的虚拟身份组合计数
