2.3.2图论综述
在图论的研究中，一般用一个二组 G=(V，E)来表示图，集合V中的元素称为图G的节点(或者点、定点)，而集合E 中的素称为边(或者线)。通常，描绘一个图的方法是把节点画成一个小圆圈，若两节点之间存在特定的关系就用一条线把这两个小圆圈连接起来，至于如何绘制这些小圆圈和连线都无所谓，重要的是要表现出哪些节点之间有边，哪些节点之间没有边。2.3.21有向图和无向图
有向图
若图G中的每条边都是有方向的，则称图G为有向图17。有向边的表示
在有向图中，一般用尖括号来表示有序对，如<Vi，V>表示一条有向边，Vi是有向边的始点，Vi是有向边的终点。所以，<Vi，V>和<Vi，V>是两条不同的有向边。
如图2-3 所示，此图G即为一个有向图，图中边的方向是用从始点到终点的箭头表示的，该图的节点集和边集分别为:
V(G)={V1，V2，V3)
E(G)={<V1,V2>，<V2,V1>，<V2,V3>!无向图
若图G中的每条边都是没有方向的，则称图 G 是无向图无向边的表示
无向图中的边都是节点组成的无序对，一般用圆括号来表示无序对，如(Vi,V)表示一条无向边，无序对(Vi，V)和(Vj，V)表示的是同一条边。
如图2-4 所示，此图G即为一个无向图，它的节点集和边集分别为V(G)=V1，V2，V3，V4
E(G)={(V1,V2)，(V1,V3)，(V1,V4)，(V2,V4)，(V3,V4)}节点的度
节点度是指与该节点相连的边的条数。特殊的，对于有向图还会有节点的入度和出度，所谓节点的入度是指进入(有向箭头指向)该节点的边的条数;节点的出度是指从该节点出发(有向箭头远离)的边的条数。2.3.2.2图的存储方式
图的存储方式有很多种，本章主要介绍最常用的两种方法:邻接矩阵表示法和邻接表表示法，根据不同的应用类型和进行的不同操作选择合适的存储类型邻接矩阵表示法
图的邻接矩阵存储方式一般用两个数组来表示。一个一维数组用来存储图中的节点信息，另一个二维数组用来存储图中的边(或弧)的信息。
假设图G中有 n个节点，则该图的邻接矩阵表示则为一个 nxn 的方阵，其定义式:
就对图2-4来说，节点数组(即一维数组)为:V1 V2 V3 V4边数组(即二维数组)为:
从上面的表示可知，无向图的边数组是一个对称矩阵，且两个节点间有连线的位置的元素值为 1，没有连线的位置的元素值为0。而且从此矩阵中可以得到以下信息:
1)根据对称矩阵中元素的值可以很容易的判断任意两节点是否有边2)想要计算某个节点的度，就把该节点 Vi在邻接矩阵中第i行(或第i列)的元素的值加起来，之和就是该节点的度;
3)阵中第i行的值为1的节点就是节点 V的所有的邻接点邻接表表示法
邻接矩阵是一种很好的而且是很常用的图的存储结构，但是，对于边数相对节点较少的图来说，这种结构就会对存储空间造成极大的浪费。因为矩阵中的大多元素的值都为0，此矩阵就变成了稀疏矩阵。因此为了弥补这个缺点，我们采用数组与链表相结合的存储方式来表示这种特殊的图，并将这种存储方法称为邻接表表示法。
邻接表的处理原理如下:
1)图的节点有两种存储方式，一个是用一维数组来存储，另一种是用一个单链表来存储，不过，对于较多的读取操作则数组更加方便
2)图的任意节点V的所有邻接点构成了一个线性表，因为邻接点的个数是不确定的，所以用单链表存储较好，在无向图中称为节点 V的边表，而在有向图则称为节点 V;的出边表。
如图2-4 所示，它的邻接表的结构可以表示为图2-5
从图2-5可以看出，节点表的各个节点由 data 和 firstedge 两个域表示，data是数据域，存储节点的信息，firstedge 是指针域，指向边表的第一个节点，即此节点的一个邻接点。边表节点由adivex 和next 两个域组成。adivex 是邻接点域存储节点的邻接点在节点表中的下标，next 则存储指向边表中下一个节点的指针对于带权重的图，可以在边表节点定义中再增加一个 weight 的数据域，存储权重值即可。
图的遍历
图的遍历是指从某一个节点开始,沿着某一路径对图中的所有节点进行全部且仅做一次访问。在众多的研究领域中被各大学者所青睐的遍历图方法为深度优先遍历和广度优先遍历。
Y深度优先遍历
其遍历过程为:选择一个被访问节点i并对其标记;然后从该节点开始选择条边(i，j)，如果节点j被访问过，则重新选择另一条边(i，k)，否则，对节点;进行访问标记;然后再从节点j选择一条边做上述操作;直到从j连通的节点全部遍历完;再返回到节点 i，选择另一条边做同样的操作，直到从点i出发的边全部遍历完遍历过程结束。基本思想是先深再广。如图 2-6 所示的图 G，其深度优先遍历得到的序列为:V1->V2->V4->V8->V5->V3->V6->V7。
广度优先遍历
其遍历过程为:在广度优先遍历中一般采用对列这种数据结构来保存已经访问的节点。假设节点i和i的邻接点分别记为i1，i2，·.，is和j1，j2，··，jt。遍历开始时，先将节点i和i按顺序存入队列，随后，节点出队列，并遍历其邻接点i1，i2，··，is，将其中未访问过的节点存入队列;接着节点j出列，并遍历其邻接点i1，i2，··,jt，将其中未被访问的节点存入队列。基本思想是先广再深。如图2-6所示的图G，其广度优先遍历得到的序列为V1->V2->V3->V4->V5->V6->V7->V8。
