4.1研究背景
单路径传输控制协议已经无法满足用户需求，多个基于TCP的多径传输的 协议已被提出，如SCTP、mpTCP和MTCP,目的是聚合多条路径的带宽，提升 网络容量，但由于不兼容主流的TCP协议，这些协议都没有得到广泛的部署。 MPTCP是在2011年由IETF标准化，是常规TCP协议的延伸，支持同时在多个 路径进行端到端的数据传输。MPTCP的结构类似于TCP协议栈的分层结构，因 而很容易在现有的网络中进行部署。MPTCP弱耦合的把传输层分为两个子层， 即MPTCP层和TCP子流层。各个TCP子流之间独立运行，可以复用标准TCP 的大部分功能。尽管每个TCP子流在发送端都维护一个拥塞窗口，在MPTCP 子层则采用耦合的拥塞控制机制。为了在交付给应用层之前重组数据，MPTCP 采用两级序列号，-个是TCP子流层的子流序列号(Subflow Sequence Number , SSN)来确保每个子路数据包按序到达，与TCP协议中的序列号类似，SSN在 每个子流相互独立；另一个是在MPTCP子层的数据序列号(Data Sequence Number ,DSN), DSN对于接收端的分组是唯一的，因此接收端可以利用DSN进 行数据重组。
MPTCP中与调度相关的技术涉及拥塞控制策略和调度算法的设计。拥塞控 制策略方面，耦合拥塞控制策略(CCC算法)[28,29] (Coupled Congestion Control scheme ), OLIA 算法(Opportunistic Linked-Increases Congestion Control Algorithm) 和 wVegas 算法由 IETF(The Internet Engineering Task Force)在近几年陆续提出， 并有良好的性能。Raiciu等[28]利用机会重传和在发送端惩罚性能较差的子流的 机制来避免重传问题，并使用了受限的接收缓存。然而，他们并没有能够让 MPTCP使用全部的可用带宽。关于调度器的设计，队头阻塞和接收缓存受限是
31
两个技术挑战，尤其是当路径属于异构网络时问题更加突出。当所有的路径都状 态良好时，可以在每个子流进行数据传输，MPTCP具有较高的有效吞吐量。然 而，如果路径传输特性上具有多样性如具有不同的损耗或延迟，MPTCP的有效 吞吐量将急剧恶化。当接收端等待发送一个状态较差的路径的分组时，接收缓冲 器将会被填满。这时即使其它路径状态良好，也无法发送更多的数据包，低质量 的路径成为MPTCP的瓶颈。文献［29］表明，MPTCP的有效吞吐量甚至比普通 TCP的更差。为了解决网络瓶颈问题，文献［38,39］已经对高丢包率的网络的吞吐 量提升进行了一些研究。然而，如果有大量数据丢包的需要重传，调度器将产生 较大花销。轮询调度算法(Round Robin) 一个接着一个的选择子流可以保证每 一个路径容量可以充分利用，但无法避免ACK-CLOCK带来的性能衰减。另外 一个影响调度性能的要素是往返时间(RTT),总是在RTT最小的子流上发送数 据，这种算法被称为最小RTT算法(Lowest RTT)。一旦出现ACK-CLOCK,性 能也急剧下降。另外，还有两个基于RTT调度算法的延伸算法：即重传惩罚算 法 Retransmission and Penalization (RP)和缓存膨胀转移算法 Bufferbloat Mitigation (BM) o在重传惩罚算法中，当出现拥塞时，会在拥塞窗口不为0的子流重传引 起队头阻塞的数据段。惩罚算法利用更高的RTT来减少引起拥塞的子流的拥塞 窗口来减少发送速率和对该子流缓存膨胀的影响。然而，当由于巨大的缓存膨胀 引起了非常大的时延差时，惩罚算法无法让拥塞控制窗口有效下降。缓存膨胀转 移算法利用限制每条子流的发送数据量来控制RTT以此来减小缓存膨胀。然而， 当接收端的缓存受限，LowRTT+BM较之两种基本的调度算法，对网络性能的提 高微乎其微。
