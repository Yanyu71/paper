3.2.3典型的MPTCP调度方法
MPTCP调度器的核心工作是：在MPTCP的子流中选择合适的子流，再根 据这个子流的特性，选择哪个数据段在这个子流上传输。下面将介绍一些典型的 MPTCP调度方法：
1.轮询(Round Robin) ［25,26］调度方法，选择一个接一个的子流的循环方 式进行调度。这种方法可能会保证每个路径的容量被充分利用，因为在所有子流 的分布是相等的。然而，在大量的数据传输的，调度不是真正的轮询制，由于应 用能够填补所有子流的拥塞窗口，然后分组会尽快安排给拥塞窗口再次可用的每 -个子流。这种情况通常被称为ACK-CLOCK。这样的调度器已经为并发的多径 传输的SCTP研究过。
2.最小RTT (Lowest RTT),在异构网络中，调度数据的子流的基础上的最 低的往返时间(RTT)是有利的，因为它提高了用户的体验。它减少了应用程序 的延迟，这对于交互式应用程序是至关重要的。基于RTT的调度首先向预测最 低RTT的子流发送数据，直到它已填充拥塞窗口。然后，数据发送与下一个相 对高一点的RTT的子流。与循环调度一样的，一旦全部拥塞窗口被填充，调度 变为ACK-Clocko,在每一个子流的ACK确认机制能够让拥塞窗口开放空间， 并且因此允许调度数据在这个子流发送。
3.重传惩罚算法(Retransmission and Penalization, RP),文［18］提出针对 MPTCP的机会重传和惩罚算法来补偿时延差异。机会重传重新注入引起线头阻 塞的数据段到拥塞窗口可用的子流上进行传输。这可以很快的克服线头阻塞并补
28
偿RTT差异。而惩罚算法则通过减小高RTT子流的拥塞窗口来减少数据发送速 率。RP算法的目标不仅是提升有效吞吐量，还可以减小时延抖动和缓存大小的 需求。然而，当由于巨大的缓存膨胀引起了非常大的时延差时，惩罚算法并无法 让拥塞控制窗【1有效下降。
4,缓存膨胀迁移算法(Bufferbloat Mitigation, BM) [27],观察到高RTT 的另一个来源其实是子流路径卜路由器和交换机的巨大缓存。BM算法是RP算 法的另-种解决方式，利用限制每条子流的发送数据量来控制RTT以此来减小 缓存膨胀。BM算法的冃标并不是显著的提升有效吞吐量，而是提升应用的时延 抖动来减少终端主机的大缓存需求，并且当接受缓存受限，LowRTT+BM较之两 种基本的调度算法，性能提高微乎及微。BM算法的核心思想是检测最小平滑 RTT(Smoothed RTT, sRTTmin)和平滑 RTT(Smoothed RTT, sRTT)。一旦 sRTT 渐渐 大于sRTTmin,则预示将岀现Bufferbloat,因此，通过设定拥塞窗口的上限来减 小拥塞窗口：
cwndvim„ = >x(sRTTg/ sRTT)xcwnd	(4-2)
其中人表示sRTT和sRTTm<n之间的差异的忍耐度，一般设为3。
