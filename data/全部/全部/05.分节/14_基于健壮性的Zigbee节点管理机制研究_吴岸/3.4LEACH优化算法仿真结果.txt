3.4LEACH优化算法仿真结果
LEACH算法通过周期性地重新分簇，让节点轮流担任簇头，使得网络中节点均衡
18
消耗能量。但簇头节点将信息以单跳的形式传递给基站消耗能量大，并且没考虑到基站 附近节点的“热区”问题，即其附近簇头节点担负更多的数据转发任务耗费能量大，更 容易失效，造成网络能量消耗的不均衡。高效能非均匀分簇算法（Energy Efficient Uneven Clustering, EEUC）是一种非均匀分簇算法。EEUC算法通过计算每个节点的竞争半径来 划分簇结构在簇头选择阶段随机性的产生一些临时簇头，之后根据临时簇头的能量从中 选择最终的簇头。在簇建立阶段，EEUC算法让基站附近簇头节点形成更小的簇，离基 站远的簇头形成更大的簇通过这种非均匀分簇的方式降低了靠近基站的簇头节点能量 消耗解决了 “热区”问题，并且最终簇头将以多跳的形式将信息发给基站，延长了网络 的生存周期。
不过EEUC也有一些缺陷：
1）	算法的扩展性问题：
EEUC算法开始前需要计算网络中所有节点到基站的距离，并从中找到离基站最近和 最远距离来计算各节点的竞争半径，这影响了网络的扩展性.一旦加入的节点到基站的距 离最远或最近，或者删除的节点到基站的距离最远或最近，则所有节点都要重新计算各自 的竞争半径，并通过发送信息通知其它节点。网络通信代价大。
2）	“空洞”节点问题：
按照EEUC算法形成的网络存在一些节点没有任何簇可以加入。
3）	临时簇头选择问题：
在簇头选择算法上每个节点都以预先设定的概率参与竞选，没有考虑节点的剩余能 量。从而在选择的临时簇头中有一些节点能量不足，无法用它们传递数据。在最终簇头 的选取中无法获胜，导致产生的簇头不够均衡。
选取原始LEACH和EUUC算法作为对照，仿真参数设计如下：随机生成100个节 点部署在100m* 100m的正方形区域中。汇聚节点位于网络中心位置，坐标为（50,50）。 假设普通节点的初始能量为1J。发送和接受电路处理每个比特所需能量互血为 50nJ/bo自由空间模型下的放大电路能耗系数sfs^lQpJ/bit/m2,多径衰落模型 下放大电路能耗系数Smp^j5GpJ/bit/m4 0簇头比例为0.2。实验采用MATLAB进 行仿真。将原始LEACH协议、改进后的LEACH协议（以LEACH-X表示）和EEUC （Energy-Efficient Uneven Clustering, EEUC）协议进行对比。图3-1为以上三种算法的网 络生存周期比较：
19
图3-1节点网络存活时间比较
从图中我们可以看出，改进后的LEACH-X能够明显提高Zigbee网络的生存周期。 LEACH-X通过簇头选择过程的能量选择和距离选择，优先选择在簇内综合状况较好的 节点作为簇头；在稳定阶段，通过对整个网络簇头节点的传输能耗分析，采用单跳和多 跳相结合的方式，均衡了靠近和远离汇聚节点的簇头节点的能量差异，使整个网络的生 命周期延长。
图3-2节点剩余能量均值比较
20
为了更为直观的看出LEACH-X在能量均衡上的优化，比较以上三种协议的节点剩 余能量均值。从图3-2中我们可以看出改进后的LEACH-X节点剩余能量值一直高于 LEACH和EEUC协议，表明了 LEACH-X确实能够更为有效的节约节点能量。
0.014
0	100	200	300	400	500	600	700	800	900 1000
仿真轮数
图3-3节点剩余能量方差比较
图3-3比较了网络节点剩余能量的方差。方差越小，表明整个网络节点剩余能量差 距越小。从图中可以看出，LEACH的方差明显大于其余两者。而且LEACH和EEUC 的方差变动明显，反而LEACH-X 一直维持在一个相对平缓的范围内。之所以LEACH 和EEUC方差前期比较大，后期降低，是因为工作时间较短，节点存活数量多，剩余能 量多，因此方差随着轮数的增大而增大。到达波峰之后，网络节点开始渐渐耗尽能量， 部分节点已经失效，故方差又随着轮数增大而减小。波峰的发生轮数也和图3-1相吻合。 都是在网络存活节点开始下降时到达波峰。通过以上分析可以说明LEACH-X的能量均 衡性能最优。
21
