4.2.1.3Park算法
虽然Minn方法可以在符号定时位置产生尖锐的峰值，但算法的测度函数在错误的 时刻也会产生比较大且尖锐的峰值，与正确定时的峰值差别较小，增加了同步判决的难 度。为了克服以上两个缺点，Park提出一个具有四段共辘对称结构的训练序列。结构 如图所示。
C	D	C*	D*
图4- 6 Park算法同步头结构
其中C为长度为N/2的ZC序列，D为C的对称序列，C*、D*分别为C、D的 共辄序列。测度函数为：
式(4-10)
其中
N_1
6(d) = £r(d _k)r(d + k)
k=Q
27
N-1
&（d）= 2＞（d +幻|
k=Q
上面介绍的几种经典算法的仿真结果如下：
从图4- 7可以看到Schmidl&Cox算法的峰值平台，Minn算法的虚假峰值。特别 需要注意的是Park算法，一般认为Park算法产生的定时估计函数也会出现虚假峰值， 但在仿真结果中却没有发现明显的虚假峰值，本文认为产生这一结果的原因是传统的研 究中Park算法的复UW使用的是对PN序列进行FFT变换得到的复序列，而本文中直 接使用CAZAC序列作为复UW,由于CAZAC序列良好的性质没有产生虚假峰值。
由于以上三种算法中都是用CAZAC序列作为UW[34]，但是在经典算法中都是使用 PN序列，或者与PN序列有关的序列作为UW,有必要研究PN序列作为同步码字的性
一般，使用PN序列作为训练序列的Park算法中会出现虚假峰值〔35】，而虚假峰值产
生与CP有关，当使用CAZAC序列进行仿真时，即使存在CP也没有虚假峰值产生的。 这说明CAZAC序列的相关特性优于PN序列。这也可能是本课题中改变了 Park算法训 练序列的产生方式导致的，使用PN序列的Park算法中训练序列是通过对PN序列进行 IFFT计算产生的复序列，而本文的训练序列一一CAZAC序列为复序列，不再需要IFFT 计算。
这几种同步算法的同步码字都具有两倍的信息量，即在接收端不需要保存任何同步 码字的信息，就可以进行同步。在此之外还有另外一种同步码字的设计，即在接收端保 存一套与同步码字具有相关性的序列，这一套序列将不会受到传输过程中的噪声干扰， 这种方式得到的相关结果优于把所有同步信息都发送的方案。两种同步码字方案各有优 缺点，前一种可以实现系统的多样化，即只要实现相同的同步结构就可以进行解调，后 一种方案在性能上优于前一种，但需要在接收端提前知道同步码字信息，只适用于一些 特殊的系统。
经典算法均为时域算法，逐渐移动进行相关运算，然后得出峰值，认为峰值超过门 限的点为数据起始位置，但这也正是产生峰值平台和虚假峰值的原因，时域算法如果不 逐点移动又有可能导致同步点的丢失。下面介绍的频域同步方案，将从另外一个角度设 计同步方案。
