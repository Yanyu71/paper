4.2.2频域算法
经典的同步算法均在时域进行计算，通过相关运算得出相关峰值的方式判断同步点。 接下来介绍一种通过频域计算得出相关峰值，然后通过峰值位置推算出符号定时点位置 的同步方法〔36】。频域算法的基础是使辅助数据具有循环相关的特性，然后利用傅里叶变 换进行计算。傅里叶变换的结果是一个数据块，利用峰值在数据块中出现的位置，结合 序列本身的循环卷积特性，可以推导出数据起始位置。
FFT计算所需要的时间比较长，不能在一个码元时间内完成计算，因此需要将多个 码元的时间用于进行FFT计算。因此频域同步算法中引入滑动窗的概念，每次将滑动窗 内的数据送入FFT进行计算，因此为了保留A序列的全部信息，引入CP。频域算法基 本的同步码字结构如下。
CP A CPI A
I
..—，丨」
图4-9频域同步算法同步头结构
其中的CP长度为M, A的长度为N。A序列一般取具备良好自相关特性的序列。 在本项目中仿真使用Chu序列。滑动窗大小为N,每次滑动的长度为N。
29
P(tN+n) = IFFT(FFT(r(tN+«)) • FFT(c(n^)	式(4-14)
NT
R(内)= ZI«N + 4)r	式(4-15)
k=Q
其中或〃）表示本地序列。
其测度函数将会岀现如下的峰值情况，仿真波形如下。
图4-10频域同歩算法峰值情况
无论滑动窗起始位置为何，都会出现两个比较大的峰值，只需要找到两个峰值中的 一个就可以判断同步码字的位置。记录找到的测度函数峰值的位置为P，截取P〜P + N 与p +七〜p + N + N.两段数据，其中N/和表示数据块的长度，〃表示FFT点数。写 出新的测度函数如下：
阳（P）= ｛喜P +	5 + " ' /R（P）	式（4-16）
其中，N”为CP的长度,
JV-1
R(p) = j£ r(p + k)r (p + k)
则帧的起始位置可以表示为：
\p-Ncp,W{p)ti 于门限
stan = \P-Nf,w{Py^ 于门限
