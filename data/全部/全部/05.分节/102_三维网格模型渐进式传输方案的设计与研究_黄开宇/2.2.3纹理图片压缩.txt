2.2.3纹理图片压缩
网格模型的属性信息在三维场景的传输占据了很高的比重。在文献［22］进行 的相关研究表明大型MMORPG游戏，Second Life中，纹理图片贡献了网络传输 数据量的61%-88%。这一结果非常符合开发者的习惯，因为开发者会大量复用
13 网格模型素材，通过替换纹理图片实现场景的构建以及内容的更新。因此，对纹 理压缩方法的探讨是非常有必要的。
Beers等人在论文中列举了四项纹理压缩与普通图像压缩算法的区别。1) 解压速度。为了不影响处理器实时渲染的性能,纹理图像的渲染需要满足实时性， 最好能够不解压直接渲染。2)图像质量和压缩率。由于纹理图片映射的网格模 型并不一定都是高精度或者不需要使用高精度纹理图片，纹理图片的质量可以稍 微降低来换取更高的压缩比，节省更多的带宽资源，提升系统的传输效率。3) 编码速度。纹理图片一般都是通过压缩存放在服务器端，跟传输是两个阶段，因 此纹理图片的压缩编码效率并不影响系统效率，降低编码速度而提升其他几个因 素的性能是个不错的选择。4)随机访问。这是纹理图片与普通图片之间最大的 差异。由于纹理图片映射到网格模型这个过程，导致纹理图片中像素被访问的顺 序是不可控的，因此要求纹理图片中的像素都能够被随机访问。正是这个原因， 常用的纹理压缩标准都采用了基于块的框架，方便像素的读取和解压。ARM公 司设计的自适应可伸缩纹理纹理压缩方法(Adaptive Scalable Texture Compression, ASTC)〔24］成为OpenGL的正式扩展标准，与DXTC(DirectX纹理压缩)和ETC (爱 立信纹理压缩)一起成为目前主流的纹理压缩标准，均采用了基于块的框架，支 持在图形处理器渲染时随机访问纹理图像。因此在设计纹理图片压缩算法时，设 计方案必须符合上述三种纹理压缩标准。目前主流的纹理压缩方法都是借鉴Delp and Mitchell等人〔幻提出的块剪裁编码(Block Truncation Coding, BTC)。最流行的 方法是Iourcha等人a】提出的S3TC纹理压缩方法，S3TC被使用在微软的多媒 体组件开发接口 DirectX中，因此也被称为DXTC,同时在OpenGL中也有使用， 它被默认为纹理图像压缩事实上的标准［27】。
在生成一系列LODs网格模型的渐进式传输系统中，纹理图片同样可以通过 简化来匹配不同层次的网格模型。其中，最直接的方式是根据网格模型的简化率， 将纹理图片均匀地降采样到与之匹配的简化率，系统只需要知道所需的像素预算 即可。但是纹理图像的细节特征分布往往是不平均的，即细节特征被定义在几个 小区域中，而平滑的特征或者没有特征往往分布在大区域中。这促使研究人员通 过变形纹理图片的不同区域来优化纹理空间，使得具有更多特征细节和更高失真 的区域能分配在更多的纹理空间，这个优化过程也被称为纹理变形，或者纹理曲 翘。Sloan等人SI提出的算法考虑用户指定的权重和图像本身的失真情况，对纹 理图像进行多级形变处理。Hunter和CoherB】从纹理图像中的频率分布出发，图 像经过傅里叶变化，通过分段线性形变平衡图像频谱。因此，在纹理图片简化时 应充分考虑纹理图片中不同块的细节特征，并对不同细节特征的块采用不同的降 采样系数。
14
