4.3.2Microblaze控制系统Firmware程序设计
复杂的控制功能最终要通过软件来实现，Microblaze控制系统的Firmware 程序使用C语言编写完成，通过软件调用相应的API完成对各个挂载在Microblaze 上的IP核内部功能的控制，而各个IP设备在Microblaze上的配置均是以地址映 射的方式完成的，软件可以通过访问相应的地址空间实现API控制。
Firmware软件控制程序的基本框架图如图4-24所示：
Firmware软件控制程序共包括三个部分：DMA数据传输、以太网数据传输、 频谱感知逻辑控制及参数计算。其中DMA引擎的数据传输功能与频谱感知扫频 的控制功能需要并行不间断的运行，由于Microblaze CPU是在单核的情况下串行 运行，不支持类似Linux的多线程操作，为了克服这个问题，Firmware的设计中 使用消息队列的数据结构，每个过程的处理中都将频谱数据或控制信息存储在队 列中，每个队列的读与写代表着这个过程两端的操作，这样，程序运行中只需要 维护各自的队列即可。
54
Spectrm
Energy DATA
图4-24 Firmware软件控制程序的基本框架
DMA (Direct Memory Access)允许不同速度的硬件装置来沟通，而不需要 依赖CPU的大量中断负载。否则，CPU需要从来源把每一片段的资料复制到暂 存器，然后把他们再次写回到新的地方，而在这个时间内，CPU对于其他的工作 来说就无法使用。DMA传输直接将数据从一个内存区复制到另一个，对DMA来 说，主从设备均被视为内存区域的某一片区域，其自身特点使其特别适合用来传 输大数据的通信，系统中的频谱能量数据会持续不断的从底层RTL传输至 Microblaze,因此此处使用DMA可以大大提高系统的效率。Xilinx系统的可挂载 与Microblaze的DMA引擎设备是基于AXI-Stream接口的，和频谱感知系统各个 子模块釆用的接口一致，可通过Microblaze平台直接相连进行数据通信。
频谱感知系统的扫频控制是整个系统控制的核心，它控制何时下发配置信息、 何时进行DMA引擎的启动接收工作。底层基带处理子系统只有在接收到一次配 置信息之后才会进行一次频谱感知的处理，包括扑捉128帧数据求出频谱能量的 平均值。初始化开始，扫频控制中心会启动一次配置的下发，底层基带处理模块 收到配置后开始基带处理，与此同时，扫频控制中心会提前启动DMA的接收工 作，DMA等待接收基带处理后的数据，将其存在数据队列之中。控制中心时刻 监控DMA接收的状态，一旦接收完成，便通过射频子板的API更改射频的中心 频率，进行下一个频段的频谱感知工作，同时下发配置信息和启动下一帧DMA
55 数据的接收工作。依此规律，DMA接收工作和基带处理持续的运转。DMA接收 每一帧数据都会添加一个帧头数据作为标示，标示这帧数据是整个2.4GHz (600MHz~3.0GHz)感知频段的起始、末尾或者中间频段数据，以方便PC接收 到数据之后进行相应的拼接工作。
Microblaze平台的以太网传输通过Ethernet设备，并基于轻量级的TCP/IP协 议簇的LWIP (Light WeightIP)实现Socket数据传输。控制系统初始化时会与PC 机的Server建立一个Socket长连接，之后以太网通信程序会时刻监控数据队列 里面的数据，一旦数据队列非空，即已有DMA成功接收的频谱数据，便开始一 帧数据的Socket传送，直到数据队列为空，以太网便会等待DMA接收数据并每 隔一段时间扫描一次数据队列。
