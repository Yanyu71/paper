6.2.3推理部分功能测试
（-）目标解析与一阶逻辑转化
目标一阶逻辑子句生成功能
1）测试用例
表6?17目标一阶逻辑表达式生成功能
用例目的	该用例用丁?测试“目标一阶逻辑表达式”功能。
描述	该用例用丁?测试“目标一阶逻辑表达式”功能，是系统的关键步驟。
前提条件	启动后台，打开Web界面。
测试步骤	1）	用户选择推理范围；
2）	用户输入规则定义数据；
3）	点击“提交”按钮。
预期结果	目标翻译成功，生成相应一阶逻辑表达式。
测试结果	测试通过。
2）测试结果
图6.21是翻译目标定义图，图6-22是翻译目标生成的一阶逻辑表达式图。
约束定义
道路
红岭中路
严重拥堵定义：缓速车量比例
拥堵定义：缓速车量比例
轻徹拥堵定义：缓速车■比例
最小故据01
缓速阕值定义
图6?22目标一阶逻辑表达式输出图
2.描述逻辑子句获取功能
1）测试用例
表6-18描述逻辑子句获取功能
用例目的	该用例用于测试“描述逻辑子句获取”功能。
描述	该用例用于测试“描述逻辑子句获取”功能，是系统的关键步骤。
前提条件	提供本体输入流。
測试步骤	1)生成 ParseOWLToDLOntology 对象；
2)调用 parse 接口获取 DLOntology；
3)获取d(Clauses成员变量。
预期结果.	获取成功，输出相应的描述逻辑子句。
测试结果	测试通过。
2）测试结果
图6-23是生成的描述逻辑子句输入图。
图6-23生成的描述逻辑子句输出图
3.Z3函数生成功能。
1）测试用例。
表6-19 Z3函数生成功能
用例目的	该用例用于测试"Z3函数生成”功能。
描述	该用例用丁?测试"Z3函数生成”功能，是系统的关键步骤。
前提条件	已经生成dlClauses集合。
（续上表）
测试步骤	1 ）生成 FuncDeclGenerate 对象；
2）	调用 getFuncDecl 接口;
3）	获取包含Z3函数的全局map。
预期结果	生成止确的Z3函数。
测试结果	测试通过。
2）测试结果。
图6-24是生成的Map输出图，左边是map的Key,对应函数名。右边是对应的Z3 函数。
图6-24 Z3函数输出界面
4. 一阶逻辑表达式转化功能。
1）测试用例。
表6-20 一阶逻辑表达式转化功能
用例目的	该用例用丁?测试“一阶逻辑表达式转化”功能。
描述	该用例用「测试“一阶逻辑表达式转化”功能，是系统的关键步骤。
前提条件	已经生成diClauses集合并生成了 Z3函数。
测试步骤	1）	生成0WLToZ3对象；
2）	调用parse接口；
3）	获取结果。
预期结果	测试成功，生成本体相应一阶逻辑表达式。
测试结果	测试通过。
2）测试结果。
图6-25是通过应用Z3函数生成的布尔表达式。
勰剪"滸風冬.田"徂』￡;^.皿京做史膈￥令(。盘JV
(=(［如 JD：//雄n\ se^3r rl^-wb.pr^t raf f i$H?ntQ.loq^ha5Y；<> |
j<SttP；ZZ5wx '>内。.8￡竖如_5￡0/1*.0拦小9里3的滨35
图6-25应用Z3函数一阶逻辑表达式输出界面
（-）推理模块
1.范围推理功能
1）测试用例
表6-21范围推理功能
用例H的	该用例用于测试“范围推理”的功能。
描述	该用例用于测试“范围推理”的功能，是系统的关键步骤。
前提条件	启动后台，打开Web界面。
测试步骤	1）	用户选择推理范围；
2）	用户输入规则定义数据；
3）	点击“推理”按钮。
预期结果	正确推理出属于目标范围内的事件。
测试结果	测试通过。
2）测试结果
图6-26是推理过程中范围推理输出结果图。
Document{{id=l, time=1303722300000, value=70}} vht￡D：//wx俄■? §応费 anticweb. orq/traf f ic-orrtoloqy偏中路 p4> 在推理范围内 solverList.sizeO : 3
Mon Apr 25 17:10:00 CST 2011 size : 13
solverList.sizeO \ 3
Mon Apr 25 17:15:00 CST 2011
size : 14
Document{{id=l, time=1303722900000, value=70}}
vhtt p * 7/www?sei理yt icweb ? o hi/1 ra f f ic二 ontology^福中路
6-26范围推理输出结果
2,目标一阶表达式推理及结果存储功能
1）测试用例
表6-22目标一阶表达式推理功能测试
用例目的	该用例用丁-测试“目标一阶表达式推理”的功能。
描述	该用例用丁-测试“目标一阶表达式推理”的功能，是系统的关键步骤。
前提条件	用户启动后台，打开Web,进入主页面。
测试步骤	1）	用户选择推理范围；
2）	用户输入规则定义数据：
3）	点击“结果”按钮。
预期结果	推理岀结果并存储到数据库。
测试结果	测试通过。
2）测试结果
图6-27是获得的推理结果输出界面。
MongoDB Enterprise > db.traffic.findO
{ ,,_idn : ObjectId(,,5871ad901e89270e458e2d64"), "id11 < ： Objectld(',5871ad911e89270e458e2d65"), "id" { : Objectld(“5871ad911e89270e458e2d66”)， "id" { " id" : ObjectId("5871ad911e89270e458e2d67H), “id” { H id" : Obj ectld(?,5871ad911e89270e458e2d68H), ”id” { H id” : Objectld(,,5871ad911e89270e458e2d69")/ "id” { ** id1' : Objectld(u5871ad911e89270e458e2d6au), “id” { " id" : Objectld(“5871ad911e89270e458e2d6b“), "id" { "id" : Objectld(,,5871ad931e89270e458e2d6c,')/ ,,idH {，Lid" : Objectld(,,5871ad931e89270e458e2d6d,'), “id”
图6-27推理结果
