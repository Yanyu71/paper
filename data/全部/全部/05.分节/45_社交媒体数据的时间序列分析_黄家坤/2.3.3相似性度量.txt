2.3.3相似性度量
聚类算法的关键是计算两个样本之间的相似性，样本的数据格式可以是任 意类型。
欧式距离欧式距离是最经典的相似性计算方法，假设均为P维的时 间序列，欧式距离的计算方法如下：
& =\ 支（頌-标）2	（2-18）
V k=]
皮尔逊相关系数假设均为P维的时间序列，皮尔逊相关系数的计算 方式如下：
其中//和S分别为均值和残差，计算方式如下
(2-20)
(2-21)
短时间序列距离（Short time series distance, STS）,考虑到时间序列具有 分段性，可以将时间序列先进行分段，然后计算每一段的相似性，再进行求和， 分段的策略直接影响相似性度量的准确性。STS距离的计算方式如下：
动态时间规整距离（Dynamic time warping, DTW） DTW是计算连续时 间序列与非连续时间序列相似性的经典算法。DTW定义了代表两个时间序列 对应关系的时间规整函数通过优化方法，使得两个时间序列的总相似度 最大来优化W（刀）函数。设两个长度为〃、所的时间序列数据。、C：
。=如务，…，①
C …,综
如果它们的长度相等，则直接计算两个序列的距离。但如果长度不相等, 则就需要对齐。平移和缩放是最经典的对齐策略，即通过线性地缩放采样间隔 （或时间间隔），使时间序列具有相同的时间点。然而这种策略假设时间序列的 所有分段在不同的情景都具有相同的特性，即无论如何缩放，不同段的特性是不变的，然而实际并非如此，这就使得聚类效果较差。因此更多的是釆用动态 规划(Dynamic Programming )的方法。
在对齐的过程中，需要构造一个“xm的二维矩阵矩阵中的元素代表两 个时间序列的分段之间的距离：
心。)= (2 -C)2	(2-24)
即矩阵中保存了两个时间序列所有分段相互之间的距离，而动态规划算法则是 通过寻找使得距离最小的分段，所有的分段在刀中构成一条路径，而这条路径 则就是对齐的策略。假设〃为最优的路径，其定义如下：
W =叫，比，…，w,.
1 2 a	(2-25)
max(w.n)< K <m + n-\
其中，所满足= (/,/),,代表。、CZ冋的映射关系。路径/需要满足连续
性和单调性，即如果叫=0狗,那么叫的卜-个元素只有三个方向，即
(z +1,；),(/,； +1),(?+	+	而冃标就是选取上述几个方向中最优的一个。
算法的代价函数为：
(0 O = min ] 纺 /K	(2-26)
其中，K主要是针对长度不同的路径来进行补偿。DTW的思想就是通过 对两个时间序列进行平移和缩放，即寻找使他们的总距离最小的路径。根据这 条路径所计算的距离就是两个时间庁列的相似性。事实上，这个距离就是最优 路径的累积距离(cumulative distances)<,累积距离/(/,j)可以按F面的方式表 示，累积距离y(i,j)为当前格点距离d(i-j),也就是点g,和c,的欧式距离(相 似性)与可以到达该点的最小的邻近兀素的累积距离之和：
河，丿)= d(q,、) + min{y(,；./ -1),/(i 一 1,丿 一 1)}	(2-27)
寻找最优路径的过程中，首先从(0,0)坐标开始匹配时间序列。和C,每添加一 个新元素，之前所有的点计算的距离都会累加。到达终点(〃,《?)后，所得到的 累积距离就是上述总路径的累积距离之和，也就是序列。、C的相似度。
时间序列数据具有自身的特点，因而要将传统的聚类算法应用到时间序列， 就必须针对时间序列作修正，相似性度量是聚类算法的核心，要达到较好的聚 类效果，就必须提出适用于时间序列的相似性度量方法。上述的几种相似性度 量都可以应用于时间序列，不同的方法应用于不同类型的时间序列数据。其中 DTW算法在计算相似度的时候会对时间序列进行缩放，这种方法适用于热点事件的时间序列，因为其到达峰值的时间点是不一致的，DTW方法能得到较 好的聚类效果，本文采用了这种方法。
