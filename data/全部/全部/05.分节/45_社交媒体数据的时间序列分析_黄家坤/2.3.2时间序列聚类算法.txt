2.3.2时间序列聚类算法
迁移聚类算法迁移聚类算法主要分为以下三个步骤：
(1)初始化聚类个数左以及初始聚类中心C;
(2)对于每个时间点计算相异矩阵，并为计算轨迹相似性存储所有时间点 的结式矩阵；
(3)根据广义离差平方和函数计算出比C更优的新聚类中心CL	通过
迁移q中的一个成员到q或者交换q和q中的两个元素得到，其中，
Cp,Cq e C, p,q =	p 二 q	(2-13)
如果新的聚类中心不存在，算法停止；否则将C更新为C'并重复步骤3。 这种算法只适用于等长的时间序列数据，因为当两个时间序列中的一个在 某些时间点具有缺失值的时候，相似性计算方法不适用。
凝聚层次聚类算法层次聚类算法通常具有两种类型，自底向上的凝聚方 式和自顶向下的分裂方式。凝聚层次聚类算法是更为流行的方式，它基于自底向上的策略，算法的基本思想是首先将每个时间序列数据分组成簇（cluster）, 最基本的簇为原子簇，然后通过计算簇之间的相似度，不断地将原子簇合并为 越来越大的簇，直至最后的簇只有一个，最后形成类似树的数据结构。合并过 程通过计算属于两个不同簇中的两个数据的相似度，并把距离最小的两个数据 合并到一起，重复这种合并的过程知道最终形成一个簇。Ward最小离差平方和 算法在合并的过程中，能使聚类过程的离差平方和降到最低。在每一个聚类的 迭代过程中，会遍历所有可能的合并方式，并取其中使离差平方和最小的合并朿略。
层次聚类算法可以适用于非定长的时间序列数据，只需要选择正确的相似 性度量方法，如DTW （dynamic time warping）□然而，无论是凝聚层次聚类算 法还是分裂层次聚类算法，当一次簇合并发生之后，调整策略很难选择，错误 的调整策略很容易导致整个层次聚类性能降低。
k-means 聚类和模糊 c-means （Fuzzy c-means, FCM）聚类算法 k-means 是经典的聚类算法，它的基本思想是最小化一个目标函数，通常是所有样本与 聚类中心点的距离之和。优化的过程依赖于一个迭代过程，首先随机选取初始 的聚类中心，然后通过最小化目标函数来计算新的聚类中心。K-means算法的 核心步骤就是最小化目标函数和更新聚类中心两个步骤，通过不断地迭代这两 个步骤直到目标函数到最小或者到达一定的阈值。
假设有〃个时间序列数据（xA. | k =	, k-means算法通过最小化以下目
标函数来计算聚类中心{v, |z =	:
协WU/） = ￡力*|| 叫一財	（2-14）
/=1 R=1
%k G {0,1）, Vz,^
￡ ufk = Wk
迭代过程的步骤如下：
（1）	初始化聚类中心个数c和迭代停止的阈值8,选择初始聚类中心丫°, 使迭代次数/ = 0；
（2）	对于每个时间序列样本X”，计算其与每个聚类中心的距离，并将样 本划分到最近的聚类中心，从而使得目标函数最小；
（3）	更新聚类中心尸；
（4）	如果目标函数的变化小于& ,则算法停止；否则增加/,重复步骤2 和3；
模糊聚类算法扩展了 k-means算法，使用模糊划分而不是k-means的硬划 分，其目标函数为
11叫-vj|2	(2-15)
/=1 A=1
其中U = [uik]代表模糊划分矩阵，与k-means不同，它的限制条件为
%k e[O,l],VzJ
=1耿
i-\,c
o < 2X < 〃
k=\,n
即样本X*可以被划分到多个类别，而用介于0和1之前的权重值代表划分 到当前类别的可能性大小。通过扩展JgV),可以得到一个通用的目标函数：
M/nJm(tZ,n = Z￡(?,*r II也-v,||2	(2-16)
/=] k=l
通过对丹微分(固定U)和对％微分(固定〃)，可以得到
'一 EW"
? =(1/临-排产T	(2 17)
* 乙(1/|国-5)5
i =	左=1,…,m
FCM算法初始化的时候需要指定聚类中心个数，聚类中心，权重系数和阶 数m,其迭代步骤如下：
(1)初始化c,m,e,选择初始聚类中心尸，使迭代次数/ = 0,初始化模 糊划分矩阵5；
(2)计算聚类中心
(3)如果x^v',,更新模糊划分矩阵UM,否则使褊=1；
(4)目标函数的变化小于￡,则算法停止；否则增加/,重复步骤2和3；
FCM算法在时间序列数据为定长的时候性能最好，因为非定长的时间序列 在计算聚类中心的时候不准确。
自组织映射神经网络(Self-Organizing Map, SOM)算法SOM算法是类 似大脑思维的一种人工神经网络方法，是一种竞争学习算法，可以被认为是一 种从N维(通常是二维)模式空间各点到输出空间少数点的映射。这一映射 由系统本身完成，没有外部的监督，即聚类是以自组织的方式实现的，釆用自 训练的机制建立类别规则，将相似的用户样本划归一类，而将不相似的分离开 来，实现用户样本的类内相似性和类间分离性[28]0 SOM算法适用于定长的时 间序列数据。
