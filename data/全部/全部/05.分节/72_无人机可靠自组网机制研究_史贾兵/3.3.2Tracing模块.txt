3.3.2Tracing模块
从程序中获得仿真信息的方法有很多种，最简单直接的方法是通过std::cout 将仿真信息直接打印到控制台上。在程序逻辑比较简单的情况这种方式是有效的, 但是随着仿真逻辑变的越来越复杂，打印的信息也越来越多，解析和执行输出的 任务就会变得越来越困难。使用标准输出的另外一个不好的地方是每当需要输出
20
新的仿真数据时，NS-3的核心组件会被重新编辑引入新的打印信息。因为没有 一个标准的方式来控制所有的输出信息，所以输出的信息将会无限增长。最终输 出仿真信息需要的带宽限制了仿真的运行时间。当输出文件增长到很大时，解析 这些数据将会成为巨大的问题。NS-3提供了一个简单的日志机制，可以通过日 志组件控制日志的输出，但是这种控制级别并不是很好。一种好的方案是希望在 不对核心系统进行修改和重新编译的情况下，当用户感兴趣的变化和感兴趣的事 件发生后可以及时通知用户。NS-3就是根据这中方案设计出了 Tracing系统，将 属性和配置子系统很好的集合在一起，并且使用场景也很简单。
Tracing子系统在很大程度上依赖于NS-3回调和属性机制。NS-3 Tracing系 统建立在独立的Tracing源和Tracing接收器的概念之上，将Tracing源和接收器 连接到一起，接收器可以快速的响应Tracing源的变化。tracing发送端可以发送 信号通知在仿真中发生的事件，并可以访问感兴趣的底层数据。例如，Tracing源 可以监控到网络设备何时接受到数据包，并可以访问接受到的数据包中的内容。 Tracing源也可以监控到模型中感兴趣的状态的改变。Tracing源本身是没有用的， 他们必须连接到对源提供有用信息的代码段上。使用Tracing源信息的实体是 Tracing接收器。Tracing源是事件发生器，Tracing接收器是事件消费者。
这种明确的划分将大量的Tracing源散布在系统中的各个部分，这样可以更 详尽的监控到仿真的各个角落。只有当用户将Tracing接收器连接到其中一个 Tracing源上才会输出需要的信息，否则什么都不输出。这种Tracing系统的设计 允许新用户将新类型的接收器附加到现有的Tracing源上，而不需要编辑和重新 编译NS-3的核心组件。
Tracing源生成的Tracing事件可以没有Tracing接收器也可以有多个Tracing 接收器，可以把这种形式看成点对多点的信息链接。这种点对多点的形式是通过 回调函数实现的。回调函数是一种允许系统中的两个模块通过函数调用进行通信 的方法，同时将调用函数与被调用类完全分开。
基本上一个Tracing源是一个回调，它可以注册多个功能的Tracing接收器。 当Tracing接收器对某个接收Tracing事件感兴趣，它将回调添加到由Tracing源 保存的回调列表中。当感兴趣的事件发生时，Tracing源会调用。perator()提供零 个或多个参数。依次遍历回调列表中的每个回调方法，通过回调方法将参数传递 给Tracing接收器。
Tracing模块的使用
Tracing系统有三个级别的接随着用户对平台的熟悉，和对仿真结果的 进一步需求，用户的使用级别和层次可以逐渐提升，依次如下：
21
初级用户可以通过API来控制系统己经提供的Tracing对象，决定使用哪些 关心的对象来输出仿真中的Tracing信息；
中级用户可以扩展Tracing系统，修改生成的默认的输出格式或者以不同的 方式使用现有的Tracing源，而不需要修改仿真平台的核心代码。
高级用户可以修改仿真平台核心代码以添加新的Tracing源和Tracing接收 器。
NS-3 Tracing助手提供了丰富的环境，用于配置和选择不同的Tracing事件 并将其写入文件。
目前在NS-3中有两种用于Tracing的助手，设备助手和协议助手。设备助 手查看哪些Tracing应该通过节点上安装的设备启用。如，可以使用指定的节点 上的设备启用pcap跟踪。从使用Tracing助手的流程来看，自然而然的就可以生 成文件的命名约定，即：<prefix>-<node>-<device>o协议助手会考虑通过协议和 接口来指定哪些Tracing应该被启用。从使用跟踪助手的流程来看，自然而然的 就可以生成文件的命名约定，即：〈prefix〉-〈protocol〉-〈interface〉。
NS-3 提供 了两种 tracing 机制，ASCII 码 tracing 和 pcap 级别的 tracingo NS-3也支持创建.pcap格式的trace文件，缩写pcap表示packetcapture,事实上是包 含有定义一个.pcap文件格式的APL Wireshark软件可以读取并且显示这种格式 的内容。然而，有很多其他分析器也使用这个数据包格式。NS-3提供了封装底 层tracing系统的helper功能，用来提供配置简单数据包的更多细节。如果你使 用了这个功能，将在ASCII文件中输出结果一一这就是为什么这种tracing得名 ASCII tracingo对于熟悉NS-2的用户，这种trace与out.tr相似。结果中的每一 行对应了一个trace事件。trace文件的每一行都以一个单独的字符开始，这些字 符的意义都不相同以下列出了每个字符和它们的含义说明。
+ ：设备队列中的入队操作；
-：设备队列中的出队操作；
d ：数据包被丢弃，通常是因为队列己满或者数据包在队列中超时；
r ：数据包被网络设备接收；
