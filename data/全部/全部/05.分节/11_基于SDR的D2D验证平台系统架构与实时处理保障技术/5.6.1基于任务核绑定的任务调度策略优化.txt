5.6.1基于任务核绑定的任务调度策略优化
Linux操作系统允许多个线程在不同的CPU核上进行并行执行，也允许多个 线程在同一个CPU核上以分享时间片的形式并发执行。在并发执行的情况下， CPU需要不断在多个线程之间进行切换，使得多个程序的执行时间甚至超过其单 独执行的时间之和。当流水架构中的各个模块所在的线程以并发形式在一个CPU 核上运行时，模块的处理时间将难以预计。因此为了保证并行流水架构的稳定实
68
现，系统需要避免多个需要并行的线程是以并发的形式运行在同一个CPU核上的 情况。但通常情况下，操作系统通过其任务调度机制决定一个线程在哪个CPU核 上执行，并且可能会动态地将该线程在多个CPU核之间进行迁移。而与在DSP、 FPGA等平台上，任务调度策略由用户定义不同，在GPP平台上，操作系统的任 务调度机制对用户而言是不可见的，如果没有特别的并行性保障机制，不仅D2D 验证平台的多个信道处理线程可能会被调度到同一个CPU核上执行，甚至可能会
< 发生D2D验证平台的信道处理线程与操作系统中其它线程被调度到同一个CPU 核上执行的情况，大大影响D2D验证平台处理的实时性和稳定性。
为此，我们首先通过调节线程CPU亲和性(affinity)的方式实现线程的CPU核 绑定。亲和性是Linux为进程或线程提供的一种在某个CPU上尽量长时间运行而 不会被迁移到其它CPU的倾向性。线程可以通过调用Linux系统提供的 sched_setafGnityO函数指定其倾向的CPU。如果一个线程仅对于一个CPU核具有 亲和性，那么该线程通常不会被调度到其它CPU核上，这就避免了 D2D验证平 台软件系统内的多个线程被操作系统调度到同一个CPU核上执行的问题。
为了将D2D验证平台软件系统与操作系统上运行的其它用户程序隔离，我们 使用isolcpus命令将D2D验证平台软件系统使用的CPU核从负载均衡算法中去 除。该命令在操作系统引导时执行，操作系统启动后，用户进程将不会运行在制 定的CPU上。为实现isolcpus的效果，还需要关闭操作系统的IRQ负载均衡服务， 将IRQ的中断处理操作也绑定到固定的CPU核上，以保证网卡中断等系统中断 的实时处理。
