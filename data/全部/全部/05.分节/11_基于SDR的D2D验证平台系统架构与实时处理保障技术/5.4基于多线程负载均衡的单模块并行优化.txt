5.4基于多线程负载均衡的单模块并行优化
5.1节所述的并行流水架构解决了可能发生在链路前端的延时累积问题。但对 于处理时间很长的链路后端模块，单模块的处理模式仍有可能在其模块线程本身 造成短时的延时累积，造成模块延时的短暂过长。仍以PUSCH解码链路为例， 如表5-1所述，其线程单模块运算延时约为1700us。在系统上下行配置为TDD Config 1时，时序中会有两个上行子帧连续出现的现象。在这种情况下，如果 PUSCH解码线程只有一个，那么当D2D物理层需要在连续两个子帧内进行 PUSCH解码时，如图5-5所示，在第一个子帧的前端处理完成后，接收主线程进 入等待数据的状态，在第二个子帧到来后马上进行第二个子帧的前端处理；而当 第二个子帧的前端处理完成后700us,第一个子帧的PUSCH解码操作才完成，因 此第二个子帧的PUSCH解码操作的延时，会由原来的1700us增加到1700 + 700 = 2400uso
65
图5-5单PUSCH解码线程情况下连续两个子帧接收PUSCH的延时分析
为解决这一问题，我们使用多个相同功能的线程对该模块的信号处理进行负 载均衡操作。如图5-6所示，前端将待解码的消息依次发送给编号为1、2、3的 PUSCH解码线程。
图5-6 PUSCH解码多线程负载均衡示意图
由于编号不同的线程之间不会相互等待,因此即使线程1的解码还没有完成, 线程2的解码也可以马上开始，这样就避免了单解码线程情况下会产生多余延时 的问题，如图5-7所示：
66
图5-7多PUSCH解码线程情况下连续两个子帧接收PUSCH的延时分析
