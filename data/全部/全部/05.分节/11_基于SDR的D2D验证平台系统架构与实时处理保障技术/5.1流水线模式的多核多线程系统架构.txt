5.1流水线模式的多核多线程系统架构
在进行系统集成之前，所有运算模块均经过独立的效率优化和性能测试。在 效率优化完成后，主要产生延时的模块如表5-1所示：
61
表5-1各模块处理延时
处理模块	平均延时
物理层接收前级处理（上行）	850us
物理层接收前级处理（下行，包括D2D-CCCH的解码）	650us
物理层PDCCH盲检测	500us
物理层PDSCH解码	150us
物理层PUSCH解码	1700us
物理层PUSCH发送前端处理	800us
物理层D2D-CCCH发送前端处理	650us
协议栈无线资源调度	lOOus
以PUSCH接收为例，PUSCH接收流程需要执行包括IDFT等操作在内的物 理层上行接收前级处理，然后执行物理层PUSCH解码。对一个上行子帧的解码 操作需要850 + 1700 = 2550uso如果将两部分的处理在一个线程内顺序执行，这 就意味着物理层对该上行子帧接下来的子帧的处理，是在数据被接收到1550us 后才开始的，这1550us的延时又会被累加到接下来的子帧的处理过程中。延时不 断累加会导致信号处理部分的延时越来越高，并影响到对每一个子帧的接收，最 终导致系统因缓冲溢出而崩溃。
在PUSCH接收流程的两个部分中，物理层接收前级处理在每个子帧都要进 行，而PUSCH解码操作则仅在需要执行数据接收的上行子帧进行。因此，我们 如4.3.1.6所述，将这两部分的处理放在两个线程内，前级处理完成后，将处理结 果发送到PUSCH解码线程，此时PUSCH解码即可独立完成剩余的解码操作，而 前级处理线程又可以立刻准备下一子帧信号的接收。这样，这两个线程即形成了 一个并行流水作业的处理模式。虽然PUSCH信道解码的总时间仍然为2550us, 但物理层对接下来的子帧的处理仍然可以按时进行。
并行流水前后的系统时延分析如图5-1所示。从子帧2开始计时，在并行流 水优化前，子帧3的处理开始时就滞后了 1550us,而子帧4的处理开始前已经滞 后了 3100us,不能满足系统实时性要求。而并行流水优化后，子帧3和子帧4的 处理均没有出现滞后，可以满足系统实时性要求。
62
图5-1 PUSCH并行流水前后时延分析
我们将上述并行流水的思想应用于整个软件系统架构的设计中。首先，将物 理层和协议栈分离到不同的线程，将物理层的发送链路和接收链路分离到不同的 线程，然后将物理层接收链路的后端处理，如PUSCH解码、PDCCH盲检测、 PDSCH解码等消耗时间较长的模块与相对统一的前端处理分离到不同的线程。各 个线程之间均使用消息进行通信，各自的数据处理除一些全局性的系统状态变量 外，仅依赖于接收到的消息。这就意味着数据的前级在将消息发送到后端后，不 必等待后端处理完成即可开始随后的数据处理。图5-2从线程关系的角度展示了 物理层和协议栈的软件体系。
图5-2物理层和协议栈软件的线程结构
