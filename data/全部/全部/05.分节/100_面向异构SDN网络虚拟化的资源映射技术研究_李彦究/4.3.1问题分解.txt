4.3.1问题分解
虚拟网络请求可以分解为几个子请求，其中每个请求对应一个子问题， 使用SC.表示。首先根据公式(3-1)计算出虚拟网络请求G”中所有的节点需求，并 随机选择一个虚拟节点进行首先映射，虚拟节点"：映射到物理节点叭上需要满 足节点CPU映射需求，当选择第一个虚拟节点之后，剩余的虚拟节点和链路使 用剩余虚拟网络6"表示，在剩余虚拟网络中，只有一端节点的链路成为悬挂链 路，因此SC。由选择的虚拟节点以及该节点所有的虚拟悬挂链路构成。当SC。映
42
射完毕之后，将会从剩余虚拟网络中减去，即G' ^G'\SCa.不断重复上述 过程，直至G' = 0 °
通过上述问题分解过程，产生了 {SQ}序列，在每次迭代中蚂蚁依次求解子 问题序列，最终完成对于整个问题的求解。图4-3是一个子问题分解和求解的示 意图。
首先虚拟网络请求拓扑如图4-3(1)所示，首先求解第一个子问题SC。，即映 射a节点，由于是第一个节点，没有悬挂虚拟链路，所以子问题S©只需要将虚 拟节点a映射到一个物理节点上，如图4-3(2)所示，映射完毕后的结果如图4-3(3) 所示。接着图4-3(4)中分解出第二个子问题SC?,由于a节点已经映射，因此子 问题SC?包含一个虚拟节点b和一条虚拟链路，如图4-3(5)所示，首先映射虚拟 节点b, —旦虚拟节点b完成映射，其悬挂虚拟链路两端的虚拟节点都已经完成 映射，此时映射虚拟链路(a, b)就等效于在两个已映射的物理节点之间找到一条 “最佳”的物理链路。此时映射完毕后的结果如图4-3(6)所示。最后求解第三个 子问题SC3,此时剩余未处理的虚拟网络请求如图4-3(7)子图所示，由于只剩下 一个虚拟节点，因此将其作为最后一个子问题进行处理，在子问题SC,中，需要
依次处理两条虚拟悬挂链路(c, b)和(c, a),解决子问题SG之后，所有的虚拟节 点和虚拟链路都映射完毕，如图4-3(9)所示。
