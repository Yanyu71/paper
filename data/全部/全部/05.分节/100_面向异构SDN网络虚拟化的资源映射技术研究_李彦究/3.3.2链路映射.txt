3.3.2链路映射
如果不限制节点映射，则链路映射问题可以归为在底层物理网络中寻找一条 可用路径，这是一个不可拆分流问题然而，如果首先进行节点映射，则物理 链路的起点和终点已经被固定下来，由此找到一条路径的问题可以归结为约束最 短路径优先问题(Constrained Shortest Path First, CSPF) |48h 在 CSPF 问题中。 在最短路径问题中，经典Dijkstra算法可以使用跳数或者权重当作最短路径计算 的依据，然而本文的网络是多重图，Dijkstra算法不能很好的适用于多重图中最
26 短路径的计算，特别是多重图约束最短路径⑷〕。因此，本文延续Dijkstra算法的 思想，对其算法松弛环节做出了一定的优化，使其适用于求解多重图约束最短路 问题。
经典算法中路径松弛环节只有一条备选路径，然而多重图中具有多条备选路 径，因此改进松弛算法将从若干条备选路径中选出x条满足带宽约束的路径，然 后选取其中最优的一条更新距离矩阵。在衡量路径权重方面，本文也做岀了相应 的改进。首先是跳数H作为主要的权重决定因素，然后根据先驱字典，查找出其 到父节点(上一跳节点)的路径，并计算异构网络切换权重2S ,最后根据带宽 使用率计算出链路负载系数成/,则总权重为三部分之和，如公式(3-11)所示。
監严號‘+厲,”+ £%	(3-11)
其中链路负载因子£需要设置的足够小，以至于不会影响前两者对于权重的 决定地位，这样路径的选取综合考虑了跳数、切换代价，并且当两者相同时，可 以优先选取链路负载较低的链路。
算法3-2多重图松弛算法RELAXATION-MG
输入:
物理网络G,距离矩阵前驱矩阵/Ved,当前处理节点"
输出:
无
1.	for v\nu的邻接矩阵节点do
2.
w = + oo
3.
for arc in G[u][y] do
4.
依据公式3-11计算arc.weight
5.
if w > arc.weight then
6.
w = arc.weight
7.
end if
8.
end for
9.
if arc 满足约束要求 and Dist[v] > Dist[u] + w then
10.
£)/5/[v] = Dist[u] + arc.weight
11.
Pred [v] = u, arc. type
12.
end if
13. end for
通过以上分析，我们对于路径的权重和经典Dijkstra算法的松弛算法做出了 相应的改进，使得算法适用于本文的网络环境。不难看出，由上述算法计算出的 最短路径，在链路较长是无法得到最优路径，因为链路异构切换代价具有后效性, 即前面所选择的路径对于后续最优解的选取是有影响的，因此，在每次迭代中不 一定能找到全局最优解。
综上所述，本文采用K最短路径算法作为近似算法来减少搜索规模，与最短 路径算法只找到一条可用路径不同，K最短路径算法本质上是一种冗余选路，可 以依次选出最优、次优、再次优的路径。通过前文分析可知，异构网络环境下链
27
路的支出代价不仅仅由跳数决定，还与路径上的链路切换次数有关，因此在这种
情况下，可以通过借鉴K最短路径的集合选优机制从而找到相对更佳的路径，集
合中的每一条路径都具有足够带宽，通过对每一条路径计算链路代价，便可以得
到物理网络支出相对最少的路径，该路径即作为虚拟链路的链路映射解。为了计
算效率和物理网络链路的利用资源,K值不应该过大。算法流程如算法3-3所示。
算法3-3 K约束最短路径映射算法KCSPA
输入：底层物理网络G*{M,G，虚拟网络请求G、'{N、m节点映射结果集
输出：链路映射结果集
1.
ML=0
2.
for lv in L do
3
获取虚拟链路厂源节点n,和目的节点町
4.
根据MN获取”；和”;映射物理节点和
5.
根据nu和町计算最短路径集合梯
6.
重新计算路径集合代价并从小到大排序
7.
吧=0
8.
for 尤 in	do
9.
for r in p：\, do
10.
检查物理链路是否满足带宽约束条件
11.
end for
12.
if p爲满足约束条件then
13.
e7 - p：:1 u P：n.
14.
end if
15.
end for
16.
if	H 0 then
17.
e7=min(c(e7))
1&
19.
M L «	U 叫
20.
更新网络资源
21.
else
22.
虚拟链路厂映射失败
23.
end if
24.
end for
25.
if Z'全部映射成功then
26.
return ML
27.
else
2&
终止服务，回收已分配资源
29.
return 0
30.
end if
28
