4.5.3服务端消息姬I验证
本次实验验证使用了一台八核高性能服务器构建系统服务端应用，服务器配 置信息参数为：CPU主频为8.00GHz,采用Intel(R) Core(TM) i7处理器，16G 内存，IT硬盘。本次实验测试程序使用Java编写，JDK版本为1.8。测试通过 开源压力测试工具Jmeter模拟物联网终端设备大量的数据连接，实验使用多台 压测机器在局域网中对服务端应用进行消息处理的性能测试。压测机器具体为2 台四核CPU的计算机，其配置信息参数为：Intel(R)Core(TM)i5处理器，8G内 存，512G固态硬盘，操作系统为WinlO系统。
本次实验将原生服务端应用、加入RocketMQ中间件的应用以及消息队列与 业务线程池相结合的应用三种方案进行比较。从系统服务端的平均响应时间以及 服务端I/O的吞吐量这两个方面来进行实验结果的比对。实验采用开源的测试工 具Jmeter所模拟的物联网终端设备，每个设备每1s发送20个数据包，三种方案 在不同的并发量条件下的处理情况如图4-18所示。
(SE) U
4000
3000
2000
1000
0
0	1000 2000 3000 4000 5000 6000 7000 8000
并发量(个)
图4T8三种方案的平均响应时间对比
当并发量小于1000时，使用RocketMQ结合业务线程池的方案并没有体现 出较大的优势，这是因为使用RocketMQ消息中间件会在一定程度上产生额外的 系统开销。当并发量大于2000时，使用RocketMQ结合业务线程池的方案开始
51
逐渐体现出优势，因为该方案将复杂耗时间的逻辑交给Consumer去处理，这样 就可以极大程度地缩短系统的平均响应时间。随着请求量的不断增大，在应用侧 加入业务线程池的作用则逐渐开始体现，业务线程池对复杂耗时的操作进行处理, 使得系统服务端处理消息的速度得到明显的提升，进而可以缩短系统的平均响应 时间。
在服务端I/O的吞吐量方面，如图4-19所示，当系统的并发量达到4000时， 原生的服务端应用方案平均吞吐量达到最高值，而当系统并发量进一步增加时， 原生的服务端应用方案的吞吐量呈现下降的态势。当系统的并发量达到5000时， RocketMQ消息中间件会产生消息堆积，使得加入RocketMQ中间件的应用方案 遇到吞吐量增加的瓶颈。而使用RocketMQ中间件结合业务线程池的方案则可以 有效地解决消息堆积这一问题，使得这一方案在系统并发量达到8000时仍然运 行平稳。进一步地进行压力测试之后发现，RocketMQ中间件结合业务线程池的 方案对于系统并发量的极限在于12000左右，导致这一瓶颈的主要原因是实验使 用的硬件性能限制。三种方案的处理速度减缓位置以及承受并发量的极限值对比 如图4-20所示。
O 00
9
O O O 8
o o o O o o o O o o o O 6 5 4 3
O 00
2
00 O
X-
0
0	1000 2000 3000 4000 5000 6000 7000 8000 9000
并发量(个)
图4T9三种方案的平均响应时间对比
52
(4-wt禁架次聒冬节k
12000
10000
8000
6000
4000
2000
0
处理速度减缓位置
承受并发量最大值
图4-20三种方案的性能对比
