3.5.3数据重传设计
在实际的工作环境中，NB-IoT客户端设备往往会存在长周期的监控上报类 任务，而这一类任务的严重的弊端在于较长一段时间内，NB-IoT客户端设备与 上游的服务端仅仅存在一次数据上报的交互，而一旦因为网络拥塞、服务端升级 等问题导致这次数据交互失效，NB-IoT客户端相当于在较长一段时间内与服务 端失联。因此，在系统设计中加入NB-IoT客户端的消息重传设计显得十分有必 要性。
在系统设计中引入NB-IoT设备消息重传机制，该部分包括在嵌入式端的消 息重传机制以及系统服务端的命令下达，通过定义事件要求NB-IoT客户端设备 重传消息。通过引入NB-IoT设备消息重传机制，可以在提升系统性能的同时, 有效地减少资源及功耗的浪费。
根据第二章所介绍的CoAP协议的消息类型，其中CON类型的数据包是需 要被确认的请求，如果发送的CoAP协议数据包为此类型，那么接收方必须对此 做出回应。在嵌入式端加入消息的重传机制，每当NB-IoT客户端设备准备好需 要发送的数据包时，客户端需要向上游服务器发送一个CON请求，而服务器如 果接收到了这个CON请求，则会给NB-IoT客户端返回一个ACK的消息。这个 过程为NB-IoT客户端与对应的服务端之间一次正常的通信过程。
假如在上述的通信过程中遇到信号不良等情况时，就会导致NB-IoT客户端 无法收到来自上游服务器发送的ACK的消息，此时NB-IoT客户端就会认为上 游服务器并没有收到CON请求信息，进而重新发送数据包。
为了避免由于网络信号等原因导致的NB-IoT客户端一直无法收到来自上游 服务器发送的ACK,而使NB-IoT客户端陷入死循环的情形，本文设计了嵌入式 端的消息重传机制在程序中设置了重传次数的计数器，数值为m,每次NB-IoT 客户端重新发送CON请求时，将m的值加1,设置重传次数阈值为n,当m等 于n时，NB-IoT客户端随即停止此次数据的发送。在嵌入式端通过串口监视器 监视设备状态，当设备发送CON请求并收到来自网络侧返回的ACK信号时， 串口打印Succeed字样，结束本次重传；当设备收到来自网络侧返回的RST信 号时，串口打印Error字样，在未达到计数器阈值时继续本次重传；当重传次数 达到阈值时，串口打印Failed字样，结束本次重传。物联网终端数据重传机制如 图3-15所示。
34
机制启动
图3-15物联网终端数据重传机制图
为使得消息重传机制更加合理，设置初始重传间隔时间为t,此后的每一次 重传时间间隔为前一次的2倍，直到重传机制结束。
值得注意的是，即使在设备端加入此消息重传机制，仍无法完全意义上解决 数据上报丢包的问题。因此，本文在嵌入式端的消息重传机制的基础上增加了系 统服务端的命令下行，通过定义事件要求NB-IoT客户端设备重传消息。在系统 服务端应用中加入Timer定时器，通过定时监测服务端数据库对应的NB-IoT客 户端设备数据上报的落库状态，判断是否存在数据上报丢包的情形，如果存在， 则通过CDP Server提供的应用接口触发定义的事件，通过命令下达的方式通知 到NB-IoT客户端设备，使得NB-IoT客户端设备重启消息重传机制，将NB-IoT 终端的缓存数据进行有效上报。
35
