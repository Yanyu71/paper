3.5.4消息处理设计
随着5G时代的到来，万物互联盛况的出现逐渐成为可能。智能物联网设备 的数量迅速地增长，势必会导致设备产生的通讯信息越来越多，对物联网服务器 系统吞吐量、响应能力等方面的要求也就逐渐体现出来。
在基于NB-IoT的物联网系统中，随着NB-IoT设备数量的不断增加，必定 会产生高并发的数据等待系统服务端的处理。当服务端面临高并发数据时，如果 不能迅速处理来自NB-IoT客户端的请求，将会导致大量的请求堆积，进而可能 导致服务器瘫痪，引发大量的经济损失。因此，设计出能够应对高并发场景的服 务端系统具有重要的现实意义。
本节将分别从消息队列以及业务线程池两个方面来提升服务端的消息处理 能力。通过对消息处理机制的优化，服务端的消息处理能力得到了极大的提升， 而来自NB-IoT客户端的数据得到了充分的利用，有效地减少资源及功耗的浪费， 进而节约了功耗。
在考虑通信系统对于消息的处理能力时，通常需要解决以下问题：
1	.消息堆积问题
消息是指在应用与其他应用间传递的数据，而消息的表现形式各式各样，可 以简单到仅仅包含文本，也可以复杂到有一个结构化的对象定义格式。因为消息 的生产者与消费者是两个分开处理消息的系统，所以无法预知二者对于消息处理 能力的快慢，一旦在某个时刻消费者处理消息的速度无法赶上生产者发送消息的 速度，必然会导致消息逐渐积压且得不到释放。而在加入消息队列这一中间件来 暂存和处理消息之后，服务端将实现流量削峰，极大程度地缓解此问题。
2	.消息的顺序性问题
在实际的业务场景中，经常会遇到需要系统严格按照消息生产时的顺序来处 理的情形。例如，网购时候产生的订单，一般都会经过创建订单、完成支付、己 发货、已收货、完成订单等环节，而这些环节的顺序严格固定，否则在业务处理 上面就是不正确的。但是，在物联网的范畴内，一方面由于网络拥塞等问题，物 联网设备的数据上报即使具有顺序性，个别的消息仍会因为网络的不确定因素导 致延时，最终在消息的接收方可能仍然会呈现乱序；另一方面，物联网设备端发 送的消息相互间往往并不存在充分依赖性，在本文基于NB-IoT的物联网系统中， 即使物联网设备端发送的消息不具备严格有序的条件，只要每条消息能够在系统 服务端实现可靠投递，系统服务端对于接收到的消息进行合理的处理和反馈，即 可实现有效的设备交互。
3	.消息处理的效率性问题
它主要反映系统的响应时间和吞吐量。系统的响应时间是指系统处理发件人
36
的请求消息时所需的时间，吞吐量是指系统可以在单位时间内处理的消息数。尽 管在物联网的领域内，很多时候对状态数据的延迟要求不高，例如，环境监测项 目。但是，对于某些突发事件，例如，异常震动报警事件，对状态数据的实时性 有较高的要求。因此，提高系统服务端对消息处理的效率具有必要性。如果在一 定程度上缩短系统的响应时长，则会增加系统的吞吐量，并在一定程度上提高系 统的处理效率。
针对以上问题，本文设计了对应的消息处理方案，基于消息队列的消息处理 方法如图3-16所示。RocketMQ是一种工程中常用的消息队列，引入RocketMQ 这一消息中间件模块，借助RocketMQ可以对数据流量削峰填谷的特性，对来自 于NB-IoT设备端的大量数据进行有效缓冲，完成了数据解析与数据处理的应用 解耦。
图3-16基于消息队列的消息处理方法
系统服务端对消息的处理主要涉及数据库的操作，其中等待I/O处理往往会 占用线程大量的时间。如果使用消息队列中的消费者去处理这些耗时的操作，将 会存在消费者线程被阻塞的风险，一旦消费者拿到了这些上报数据的最终处理权, 却无法在合理的时间范畴内将这些数据消费处理，将会触发数据堆积等严重的不 良后果。
为了解决这个问题，本文系统在服务端业务处理部分加入了业务线程池，采 用多线程的方式处理数据库I/O操作，并设计了线程池调优的方案，有效减少了 I/O等待时间浪费的资源，提高了 CPU的利用率。
通过应用消息队列和业务线程池，一方面可以解除系统消息处理和消息收发 之间的耦合性，提高系统的资源利用率；另一方面也可以保证系统收到的每一条 消息都能得到快速的处理和响应，并且由原来的单位时间处理单个任务变成同时 处理多个任务，进而提高了系统服务端处理消息的性能。
37
