2.4实时操作系统技术
实时操作系统(Real-Time Operating System),简称RTOS[33]o与传统操作系 统的主要区别在于实时操作系统更加会强调操作的实时性，即：对外部中断的响 应和处理速度、任务调度采用抢占式调度方式133随着嵌入式应用需求的发展， 嵌入式实时操作系统因为其在实时性，稳定性，可靠性方面的出色表现，被广泛 应用于通信，军事测量和通信等高科技领域。
实时操作系统中都要包含一个实时任务调度器，这个任务调度器与其它操作 系统的最大不同是强调严格按照优先级来分配CPU时间，并且时间片轮转不是 实时调度器的一个必选项。实时操作系统能够在事先设定的时间限制之内应对并 处理触发中断，快速解决较为紧急的事件，因而特别适合对于实时性要求较高的 场合。
提出实时操作系统的概念，可以解决以下两个问题：一个是早期的CPU任 务切换的开销太大，实时调度器可以避免任务频繁切换时导致的CPU时间的浪 费；另一个是在一些特殊的应用场景中，必须要保证重要的任务优先被系统执行。 在这样的背景下，设计了实时操作系统，典型的实时操作系统有VxWorks, RT-Thread, rC/OS 等等。
实时任务调度器是实时操作系统的一个必选项，但不代表只要设计出来一个 实时调度器就足够了。实时操作系统的特性是在整个操作系统的设计思路上都要 时刻关注实时性。这些设计思路包括：
1	.实时的消息、事件处理机制
在常规操作系统中，消息队列是根据FIFO(先进先出)模式调度的。如果有多 个接收方，则接收方还会根据FIFO原理接收数据。但是，实时操作系统将提供 基于优先级的处理方法，两个任务的优先级分别为5和10,并同时等待信号量。 如果优先级遵循模式，则优先级为5的任务将首先接收信号量，体现出实时操作 系统的不同之处。
2	.提供内核级的优先级翻转处理方式
实时操作系统调度器最经常遇到的问题就是优先级翻转，因此对于类似信号 量一类的APL实时操作系统都会能提供阻止优先级翻转的机制，防止操作系统 出现死锁。
3	.减少粗粒度的锁和长期中断的使用
12
在windows和Linux操作系统的驱动程序中，由于同步的需要，中断可能会 被长时间关闭。在这里，长期可能是毫秒到数百微秒，但实时操作系统通常不允 许长期中断。对于非实时操作系统而言，如果接收到外部中断，在处理中断的整 个过程中，操作系统总是可以关闭中断，但实时操作系统的正常方法是将中断作 为事件通知给另一个任务。处理完关键数据后，中断处理器立即打开中断，被驱 动的中断处理器继续以高优先级任务的方式执行，而低优先级任务则只能继续等 待处理器的使用权。
4	.系统级服务的实时性保证
对于某些系统级服务，例如，文件系统操作，非实时系统缓存用户请求，而 不直接向设备写入数据，或建立一系列线程池来分发文件系统请求，但在实时系 统中允许高优先级数据先写入。在文件系统提供的整个服务期间，首先处理高优 先级请求。此高优先级策略在操作完成之前完成。这种设计实际上牺牲了系统的 性能，但实时系统强调的是整个系统级的实时性，而不是某个模块的实时性，所 以系统服务也要实时。
由于应用程序场景的差异，一些用户需要实时驱动程序，而某些用户则需要 高性能驱动程序。因此，实时操作系统实际上需要提供多种配置形式，以满足具 有不同实时要求的用户。
5	.避免提供实时性不确定的API
大多数实时操作系统不支持虚拟内存。主要原因是页面错误会增加任务调度 的不确定性。许多实时操作系统都支持分页，但虚拟内存很少使用，因为页面故 障的代价非常高，延时通常可以达到毫秒级别，并且会涉及大量代码，导致用户 程序执行中的不确定性增加。实时操作系统的确定性是一个重要指标。在某些极 端情况下，动态内存分配甚至可能被禁用，以确保系统不会受到动态任务更改的 干扰。
随着设备性能的不断提高,许多实时性要求很高的场景被切换到通用的操作 系统中。例如，Linux操作系统在嵌入式设备上推广，许多使用实时操作系统的 嵌入式设备都改为Linux,因为硬件性能的提高会将系统延迟降低到用户可以接 受的水平，但在某些特定的场景下，如物联网、航空航天、军事、工程工业自动 化和其他领域仍然需要实时操作系统。
