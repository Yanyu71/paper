3.3.111cOS
向嵌入式设备移植实时操作系统主要基于以下几点考虑：
1	.嵌入式的实时操作系统可以实现不同任务之间的任务调度，使在系统当 中共存的任务能够以一定的规律有序地运行。
2	.嵌入式实时操作系统可以有效地实现对于底层硬件设备的有效控制，而 通过这一部分功能，系统可以更加有效地完成对系统电源的动态功耗管 理过程。
3	.嵌入式实时操作系统能够实时地采集到系统中各个任务的状态信息，例 如，性能状况、工作条件等需要收集比对的信息，使得系统可以及时地 获取任务进程的工作状态，并进行及时的功耗管理。
gC/OS-ni系统可在多种类型的MCU或者ARM系统上运行。操作系统的代 码可以裁剪，实时性强，可以很方便地进行系统移植。gC/OS-III操作系统在最 大的程度上支持C语言的开发，因而具有良好的嵌入式程序移植性能，支持标 准C语言开发的IDE均可以开发和使用。gC/os-in系统已经实现开源，系统的 结构清晰、程序的架构良好，系统的内核支持编辑，最大程度地方便开发者的使 用。将pC/OS-III引入STM32L系列单片机当中，可提高嵌入式系统的稳定性与 实时性。
将gC/OS-III系统移植到STM32系列开发板。首先，需要对嵌入式系统的 系统时钟进行修改，将FiC/OS-ni系统中原有的系统时钟屏蔽掉，使用Cortex-M3 内核标准中定义的SysTick时钟；之后，需要使用gC/OS-III系统的中断配置函 数代替原有的中断；最后定义系统的任务优先级以及相应的配置。gC/OS-III系 统移植到STM32系列开发板的流程如图3-7所示。
23
图3-7实时操作系统的移植过程图
在将^C/OS-III系统移植到STM32L系列开发板的过程中，首先需要实现的 是系统定时器以及系统终端的相关配置。gC/OS-III系统需要配置一个滴答定时 器，该定时器可以实现每1ms自动中断响应一次，为操作系统提供系统时钟、 任务调度时钟以及软件定时器时钟等。具体的做法是：将tiC/OS-ni系统中原有 的系统时钟屏蔽掉，使用Cortex-M3内核标准中定义的SysTick时钟函数接口， 将该接口嵌入到RC/OS-in操作系统当中，以重新配置系统时钟，具体实现函数 如图3-8所示。
void OS_SysTicklnit(void) r
RCC_ClocksTypeDef clock;
INT32U temp;
RCC_GetClocksFreq(&clock);
temp =(INT32U)clock;
SysTick_Config(temp);
图3-8 系统时钟配置
24
