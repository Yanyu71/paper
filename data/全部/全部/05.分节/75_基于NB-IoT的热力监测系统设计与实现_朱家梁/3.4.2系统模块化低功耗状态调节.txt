3.4.2系统模块化低功耗状态调节
动态电源管理技术在嵌入式系统降低功耗方面有着十分显著的作用，其本质 是对于系统电源管理的一种机制，通过在系统正常运转的时候动态地管理电源， 达到减低嵌入式系统功耗的最终目的。特别令人关注的是，该技术可在确保满足 运行任务实时性的情况下即时调整电源参数。广域物联网系统模块化分一般包括: 控制模块、供电模块、指示模块、通信模块以及传感器模块。具体系统划分简图 如图3-11所示。
图3-11广域物联网系统模块化分简图
正如前文中所提到的，动态电源管理技术在本文中的主要应用对象是 NB-IoT模组（通信模块）,STM32L151的MCU（控制模块）以及各种智能传感器（环 境采集模块）。结合项目的实际工作流程，在系统中运行合理的动态电源管理技 术，可以实现在保证系统正常平稳运行的前提下，合理安排各个模块进入低功耗 模式，从而达到了既保证了系统的性能，又降低了系统功耗的效果。
目前市场上存在多款NB-IoT模组，但是模组根据使用场景不同，通常具有 以下三种不同级别的低功耗功能：
28
NB-IoT模组根据不同的使用场景主要存在以下三种不同级别的低功耗模式: 1.主动模式：在该模式下，模组当中的所有模块的功能是可用的，并且所 有的处理器是可以工作的。数据上报以及网络侧命令下达都可以执行。 而模组只有在主动模式下，才能实现与其他工作模式的转换。
2	.待机模式：在待机模式下，所有处理器均不工作，但所有外围设备接口 都可以工作。同时，由于系统时钟仍在工作，模组可以通过时钟控制和 电源控制来降低功耗。当处理器执行等待中断指令时，模组将进入待机 模式。
3	.深度睡眠模式：在深度睡眠模式下，模组中只有32KHz RTC起作用， RTC中断或RTC生成的外部事件可以更改模块的工作状态。处理器通过 设置深度睡眠，然后执行等待中断指令来设置此模式。
而NB-IoT模组三种工作状态之间的相互转换过程如下所示：
1.	模组发送数据完毕处于Connected态，启动“不活动计时器”，默认时间 跨度为15s,计时器可配置的范围为1s至lho
2.	“不活动计时器”超时，NB-IoT模组会进入IDLE态，启动定时器 (Active-Timer [T3324]),超时时间配置范围为 2s〜186min。
3.	Active-Timer超时，模组进入PSM状态以实现低功耗，1AU周期结束时 进入Connected态，TAU周期【T3412】配置范围为5411山厂31011。
很多单片机有低功耗模式，STM32L系列也不例外，在系统或者电源复位后， 微控制器处于运行状态之下，HCLK总线为系统处理器提供时钟。当系统微控制 器不再需要继续运行时，可以利用STM32L系列自带的多种低功耗模式来节省 系统的功耗。STM32L系列的低功耗模式介绍如下：
1	.停止模式：所有时钟都已停止。
2	.待机模式：1.8V内核电源关闭。
3	.睡眠模式：内核停止，仅存在部分的外设仍然处于运行状态。
STM32L系列低功耗模式具体介绍如表3-2所示。
表3-2 STM32L的低功耗模式介绍
模式	唤醒	对时钟的影响	电压调机器
睡眠	任何中断/唤醒事件	无	开启
停机	任何外部中断(外部中断寄 存器中设置)	HSI以及HSE振 荡器关闭	开启或处于 低功耗模式
待机	WKUP引脚的上升沿、RTC 闹钟事件、NRST引脚上的 外部复位、IWDG复位	HSI以及HSE振 荡器关闭	关闭
STM32L的低功耗模式设置如图3-12所示。
29
void PWR_EnterLowPowerRunMode(FunctionalState NewState)
{ 一
/* Check the parameters */
assert_param(IS_FUNCTIONAL_STATE(NewState));
if (NewState != DISABLE)
(
PWR->CR |=PWR_CR_LPSDSR;
PWR->CR |=PWR_CR_LPRUN;
)
else
{
PWR->CR &= (uint32_t)~((uint32_t)PWR_CR_LPRUN);
PWR->CR &= (uint32_t)~((uint32_t)PWR_CR_LPSDSR);
}
}
图3-12 STM32L的低功耗模式
此外，STM32L系列可以通过下面方式新一步降低功耗：
降低系统工作频率：在工作模式下，通过对预分频器寄存器的修改，实现对 于系统时钟运行速度的降低。而在进入睡眠模式之前，也可以使用预分频器来减 少外围时钟。
关闭APB和AHB总线上未使用的外设时钟：在操作模式下，可以随时停止 为外设和存储器提供时钟(HCLK和PCLKX),从而降低功耗。为了进一步降低 睡眠模式下的功耗，可以在执行WFI或WFE指令之前关闭所有外设时钟。
