5.6.2仿真结果及分析
1)固定6个干扰范围位置和半径的仿真
首先，固定6个干扰范围的圆心位置为(100, 0) (-100, 0) (-300, 0) (300,
0) (0, 200) (0, -200),每个干扰范围的半径都为50m,每个子帧在这6个干 扰范围中各随机出一对D2D的位置，每个子帧在整个小区范围内随机出4个CUE 的位置，并在满足资源块独占性和连续性的前提下随机出各C英所占用的RBO 仿真次数为1000个子帧。
图5-5是各干扰范围及某子帧中各用户的位置示意图：
图5.5各干扰范围及某子帧中各用户的位置示意图
分别使用5.3节及5.4节中的算法进行D2D资源分配，以下是仿真结果。
图5-6和表5-2展示了 5.3小节提出的基于单独复用的理想算法和贪心算法的性 能。
图5-6单独复用的理想算法和贪心算法性能比较图
平均D2D总吞吐(bps)	平均D2D吞吐差值(bps)
单独复用理想算法	7.4415e+07	5.6661e+06
单独复用贪心算法	6.8749e+07
表5-2单独复用的理想算法和贪心算法性能比较表
图中画出了前100次仿真中达到的D2D速率，可以看出各次仿真中理想算 法总是比贪心算法得到的D2D速率高，这也从一方面证明了理想算法的正确性。 从具体数值来看，理想算法比贪心算法得到的D2D速率高8%左右，但根据5.3 小节中的复杂度分析，贪心算法的时间性能要明显优于理想算法。
图5-7和表5-3展示了 5.3小节的单独复用和5.4小节的联合复用中贪心算法 的D2D吞吐性能差异。
图5-7单独复用贪心算法与联合复用贪心算法性能比较图
平均D2D总吞吐(bps)	平均D2D吞吐差值(bps)
单独复用贪心算法	7.3719e+07	7.9796e+07
联合复用贪心算法	1.5351e+08
表5-3单独复用贪心算法与联合复用贪心算法性能比较表
图中画出了前100次仿真中达到的D2D速率，可以看岀联合复用的贪心算 法比单独复用约束下的贪心算法的吞吐性能有明显提升，具体来说，D2D总吞 吐速率提高了 108%左右，因此虽然联合复用的时间性能较单独复用的有所增加, 但速率增益更加明显。
为了更清晰地看出所提出算法的干扰避免和控制的效果，抓取了一个子帧的 资源分配结果，如图5-8和表5-4、5-5所示，其中各CUE和D2D对的编号与前 述用户位置示意图中的各编号一一对应。从仿真结果可以看出，最长的连续空闲 RB段的起始位置是1,长度是16,因此联合复用算法中DUE1、DUE2、DUE5、 DUE6选择了这段空闲RB,而综合考虑D2C干扰和C2D干扰，DUE3选择了复 用CUE4的资源从而获得更长的RB段，DUE4选择占用整个频域资源。单独复 用算法将所有频域资源分配给能达到最大D2D吞吐速率的DUE5o
文献［21］中的单独复用理想算法与本文5.3.1小节的不同之处在于前者不满 足同一子帧中一个用户在其所占用的频域资源上使用相同功率发送这一约束，这 一约束的存在导致一个DUE复用多段连续资源段时某些资源段上的干扰余量可 能不会被用完，5.4节的联合复用算法在满足上述约束的前提下尝试将剩下的干 扰余量继续分配给尚未完成资源分配的DUEo下面的仿真在不同的D2D对数目 下比较文献［21］中的单独复用理想算法与5.4节的联合复用算法的吞吐性能，以 考察联合复用算法在多D2D对之间进行干扰余量分配的性能。如下图所示，D2D 干扰范围的数量从6个增加到15个，它们的圆心都分布在一个以基站为圆心、 半径为300米的圆上，且相邻干扰范围的圆心之间的距离固定为120米。在每种 干扰范围数量下，各仿真1000个子帧，每个子帧随机D2D对在其干扰范围内的 位置、CUE的位置及其资源占用情况。
图5-9 D2 D干扰范围数目为6时示意图	图5-10 D2 D干扰范围数目为15时示意图
图5-11是在每种干扰范围数量下文献［21］中的单独复用理想算法与5.4节的 联合复用算法的平均吞吐性能曲线。
从仿真结果来看，由于本文中的联合复用算法满足的相同功率约束，本文中 联合复用算法的吞吐性能普遍低于文献［21］中的单独复用理想算法；另外，本文 中联合复用算法得到的D2D吞吐速率随着D2D对数目的增加而近似线性地增加, 而文献［21］中的单独复用理想算法得到的吞吐性能几乎不变，因此本文中联合复 用算法与文献［21］中的单独复用理想算法之间的吞吐性能差异会随着D2D对数 目的增加而缩小；并且，满足相同功率约束的资源分配算法才是符合协议标准、 更贴近实际LTE系统的算法。
3）改变D2D链路收发两端距离的仿真
为了考察D2D链路收发两端之间的距离对算法性能的影响，仿真了 25米至 200米之间的多种D2D距离，对于每种D2D距离各算法分别仿真1000个子帧， 在这1000个子帧中使用距离一定的、固定位置的D2D,在每个子帧中随机CUE 的位置及其资源占用情况。图5-12是D2D收发两端距离为100米时的D2D位 置示意图。
图5-12 D2D收发两端距离为100米时的D2D位置示意图
图5-13展示了在不同D2D收发端距离下各算法的性能曲线。
66
图5-13三种资源分配算法与D2D收发端距离曲线
从仿真图可以看出，各算法获得的总D2D吞吐值随着D2D收发端距离的增 加而减小，这是由于D2D链路的路损随着D2D收发端距离的增加而增加，在相 同的D2D发送功率下，D2D接收端接收到的功率随着距离的增加而减小，在噪 声和C2D、D2D干扰值不变的前提下，D2D链路接收端的SINR随着距离的增 加而减小，最终导致D2D吞吐速率随着距离的增加而减小。从图中也可以看出， 在所仿真的各种D2D收发端距离下，单独复用的理想算法和贪心算法性能较为 接近，联合复用贪心算法吞吐性能明显由于单独复用算法。
4）改变相邻干扰范围距离的仿真
改变各相邻D2D干扰范围之间的距离以考察D2D链路之间的干扰大小对算 法性能的影响。这部分的仿真中6个干扰范围的圆心都距离基站300m,每个干 扰范围的半径都是50m,使得D2D链路发送端对基站接收端的干扰强度保持不 变。相邻D2D范围圆心之间的距离从120米到300米之间变化，如图5-14和图 5-15所示，在每种D2D范围距离下仿真1000个子帧，每个子帧随机D2D对在 其干扰范围内的位置、CUE的位置及其资源占用情况。
图5-16展示了在不同相邻D2D干扰范围距离下的各算法的性能:
S 5-16三种资源分配算法与相邻干扰范围距离曲线
仿真结果显示：不同的相邻D2D干扰范围距离对联合复用算法的性能产生 了明显的影响，对单独复用算法的性能几乎没有影响，这是因为不同的D2D干 扰范围距离会带来不同的D2D链路之间的干扰，在联合复用模型中，若多个DUE 复用同一段资源段，这些DUE之间的干扰就会影响最终的D2D速率，但在单独 复用的约束下，同一段资源段上最多只有一个DUE占用，因此D2D链路之间的 干扰不会影响D2D速率。另外，D2D链路之间的干扰强度随着D2D干扰范围之 间的距离的增加而减小，因此联合复用算法中D2D速率随着D2D干扰范围之间 的距离的增加而增加。
5）改变干扰范围到基站距离的仿真
为了考察D2D到基站的远近对算法性能的影响，使6个D2D干扰范围的圆 心均匀分布在以基站为圆心的某个圆上，这个圆的半径在150米到350米之间变 化，图5-17和5-18展示了半径为150米及350米时的干扰范围位置示意图。对 每个半径值仿真1000个子帧，每个干扰范围的半径值固定为50米，在每个子帧 中随机D2D对在其干扰范围内的位置、CUE的位置及其资源占用情况。
图5-19三种资源分配算法与干扰范围-基站距离，性能曲线
由于D2D链路发送端到基站接收端的路损会随着它们之间距离的增加而减 小，在相同的D2D发送功率下，D2C干扰强度也随着此距离的增加而减小，对 于同一段CUE资源，D2D的复用功率会随着此距离的增加而增加，因此所仿真 的三种算法的吞吐性能都随着D2D链路发送端到基站接收端距离的增加而增加。 从图中可以发现联合复用算法的吞吐性能随着此距离的增加而提升的幅度比单 独复用算法的大，这是因为同一段资源段可以被多个DUE复用，每个DUE的 吞吐速率都随着它到基站接收端距离的增加而增加，最终总的D2D吞吐速率的 增加是所有这些DUE速率增加之和，所以联合复用吞吐性能提升比单独复用的 更明显。
6）基于比例公平的算法仿真
北京邮电大学工学硕士学位论文
在仿真中加入5.5小节的公平性考虑，即将目标函数改为比例公平的D2D，总 速率。比较了单独复用的约束下在理想算法中加入公平性考虑对速率的影响，为 了让结果对比更明显，增加了仿真时长，共仿真10000个子帧，每次仿真中固定 了 DUE和CUE的位置，只随机CUE的资源占用，所以各D2D链路的信道质量 和对基站的干扰强度是一定的。仿真结果如图5-20至图5-22所示。
（基于比例公平）
表5-6加入公平性考虑前后的吞吐性能比较
图5-20给出了前100次仿真中加入与不加入公平性的吞吐值,可以看出在有 些子帧加入公平性的算法得到的速率明显低于不加入的算法，从表5-6中的具体 吞吐值也反映了这一速率差异，说明算法牺牲了部分D2D速率以获得公平性增 益。图5-21和图5-22对比了是否加入公平性对各D2D对的平均速率的影响， D2D对6是具有最好的信道环境与干扰情况的D2D对，因此达到的速率明显高 于其他D2D对，但考虑公平性时各D2D对之间速率的不均衡情况要好于不考虑 公平性时，从表5-6中各DUE速率方差也可以得出这个结论。从以上仿真结果 可以看岀，相同的资源分配算法，加入了比例公平的D2D总速率较不加的时候 有所降低，但各D2D获得的速率的方差减小了，说明不同D2D获得资源的公平 性有所提高。
