4.4前端展示模块实现
基于第三章的设计，前端部分具体使用react前端框架和ts语言编写完成， 主要实现依照设计完成，基本实现的组件树结构如图4-19。
图4-19前端整体组件树图
其中最外层组件为Message Window用来包含整个对话框需要的结构，同时 使用react hook中的useReducer和useContext构建了一个小型的数据管理结构， 所有对话的信息由该结构来管理，同时将其当前值以及改变值的dispatch方法作 为上下文context传递给子组件，避免多层的参数嵌套，同时各个子组件只需要 调用dispatch方法就能改变当前的对话值列表，然后显示组件MessageDialog直 接遍历该当前值就能将信息渲染到网页节点上，其包含了信息气泡组件 MessagePop以及下面细分的两种类型的气泡组件TextPop和AudioPop,然后 MessageSender组件主要存在于对话显示框下方，由对话输入框和工具栏组成， 其中输入框为一个TextArea类型的组件，而工具栏包括了三个主要用到的工具，
64
包含选择音色的工具，清空对话框按钮和语音输入组件，具体主要用到的数据结 构如下。
• Messageinfo：为基本的单条对话数据结构，主要包含以下参数。
■ type：主要有用户文本、用户语音、机器人文本、机器人语音四种枚举 值
■ info：具体的文本信息
■ audio：可含参数，如果是音频信息该参数为音频资源url
■ audioIcon：可选参数，值为音频信息显示的图标组件
■ icon：对话头像的图标组件
■ pos：气泡产生位置，左边还是右边
• MessageAction：作为disptch传入的参数，用于改变当前对话存储值，包含 以下参数
■ type:表示动作类型，包含加入一条文本信息、加入一条语音信息、加入 一个数组的信息、替换掉原有所有消息、改变音色选择人。
■ paytoad：具体的信息值，类型为Messageinfo或者Messageinfo数组
■ voicePerson:当前音色选择人
本文实现中主要用到的消息类型主要就由这两个结构以及上下文context （Messageinfo和MessageAction初始化）来完成，一些子组件可以改变通过传 递MessageActkm来改变整体存储的Messageinfo数组，而负责对话框渲染的组 件一旦感知到整体的Messa驴Info数组变化就会重新触发渲染，从而屏幕上显示 的对话就会得到更新。而采用这种上下文的实现具有低耦合高内聚整合的特点， 也便于以后的消息扩展。整体的数据流动如图4-20所示。
65
图4-20前端数据逻辑流转图
由图中可以看到数据的改变和数据的渲染是由不同的组件部分来负责的，相 互隔离，而整体的数据又由上文中提到的管理器来管理。首先由文本输入和语音 输入两种输入方式，语音输入在识别为文本信息后支持再次编辑，这里的数据改 变让ToolBar组件感知到，从而再改变全局的Messageinfo数组触发对话显示框 的组件MessageDialog的渲染再次生成多个MessagePop气泡显示框组件，并能 根据是否为文本消息显示不同的气泡格式。
其基本的页面实现效果如图4-21所示。
66
图4-21前端界面显示图
如图中所示，整体的界面样式和前文第三章的设计相同，包含了对话显示框、 文本输入框、工具栏等一系列组件构成，基本界面保持了简洁美观的需求，使用 不同的头像区分用户输入和机器人回复，并且针对不同的消息区分属于文本消息 还是语音消息，支持语音消息的播放和暂停。
下方工具栏三个按钮分别表示清空对话、选择输出音色和语音输入，其中语 音输入的使用如图4-22,输出音色的选择如图4-23。
图4-23输出音色选择
如上图所示，介绍了工具栏语音输入和音色选择工具的界面显示效果，在点 击时触发一个新的组件（其中语音输入为输入框组件而音色选择为单选框组件）, 达到前端切换音色和语音输入录入转换为文字的需求。
