3.3防止语义漂移公式
每一轮迭代都会产生大量的模板和实体对，但是这些生成的结果如果不加以 限制的话极有可能发生一些问题，导致出现语义偏移。如，实体对之间的模板并 没有描述这个实体对应有的关系，而是描述了另外的关系，这样的话错误的模板 就产生了 0例如根据实体对＜ Jordan^Brooklyn ＞匹配出的句子：Jordan likes to live in Brooklyn.这个句子的依存关系见图3-12。显而易见的是，如果本文使用了这
23
个句子，则抽取出模板〈(Rnsubjpass),likes,(1,xomp),〃ve,(1,prep),in,(1,pobj) ＞。 然而，这个模板抽取的并不是出生地，而是喜欢某地的关系。这个例子体现的就 是典型的语义漂移问题。
图 3-12 '"Jordan likes to live in Brooklyn."的依存关系图
通过分析这个问题，可以发现新增的模板并不能保证满足多数的实体对，因 为这个关系和原始的出生地关系还是有很大的区别的。假设同样的抽取到了一个 Kobe在Brooklyn打球的例子，那这个关系将与出生地关系相差更大。根据这个 结论，本文提出了一个给模板打分的公式，参见式(3-l)o
# match seed.old
p score =	=	 zn 1 \
—	# match _ seed.new+# match _ seed.old	2一丄丿
公式中p_score表示模板的得分，#match_seed.old指的是当前模板能够匹 配的原有实体对的个数，而#match seed.new则表示当前模板匹配的不在原有实 体对集合中的实体对个数。这样当新增的模板匹配了太多的新实体对，而对于原 有实体对中匹配的比较少，本文会认为新增的实体对质量不高，很可能发生了语 义漂移，从而给出较低的分数。
同样的，对于新增的实体对，在实验中也需要进行评估，根据迭代过程的对 偶性，实体对的评估方法与式(3-1)基本一致，只是做了一下对偶，参见式(3-2).
# match pattern .old
—	# match _pattem ,new + # match _pattem .old	乙丿
其中s_score代表种子对的得分，其他的符号与式(3-1)类似，不再赘述。
24
不过，需要指出的一个问题是，第一次得到模板后，这个模板的得分需要在 使用模板的时候才能给出，而如果使用后发现模板分数偏低，则根据规则剔除掉 这个模板。
