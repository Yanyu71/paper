3.3.2负载均衡算法
为了解决由于网络节能操作所引起网络负载不均的问题和更好地保证网络 服务质量，本文重点研究了网络在节能状态下如何适应网络负载的变化，并提出 了负载均衡算法。本文提岀的负载均衡算法是通过为拥塞链路计算最优的均衡链 路(网络新增链路)，然后Dijkstra算法将根据实时的链路权重，为拥塞链路上的流量重新规划路由，实现负载均衡。
负载均衡的伪代码如图3-1所示，对于拥塞链路CLinks,负载均衡算法以迭 代的方式去为每条拥塞链路计算均衡链路。首先利用IBFS算法，根据当前网络拓 扑，网络链路权重和拥塞链路计算出当前链路的均衡链路，其中IBFS算法是对基 本广度优先搜索(Breath First Search： BFS)算法的改进，IBFS通过链路权重和 均衡链路的深度(相对于拥塞链路节点的树的深度)两个参数为拥塞链路计算最 优化的均衡链路。如图3-1中的第五行代码所示，算法也会根据均衡链路是否存 在，区别对待。如果该均衡链路为空，则说明网络活跃链路数己经等于网络最大 链路数，此时只能根据网络实时权重信息重新为拥塞链路上的流量重新计算均衡 路由，实现负载均衡。如果存在均衡链路，则将根据均衡链路、当前网络的实时 权重信息计算均衡路由，实现负载均衡。
G：表示当前网络的拓扑信息
T：表示网络流量矩阵
cost：表示实时网络链路权重
CLinks：表示网络中拥塞链路
Blink：表示计算出的均衡链路
Routes：表示计算出的路由
1.Begin:
2.for Clink in Clinks:
3.cost = updateCost(G, cost)
4.BLink= IBFS(G,cost,CLink)
5.ifBLink is null:
6.route = Dijkstra(G, cost, CLink, true)	〃重新规划路由
7.else:
8.route = Dijkstra(G, cost, BLink, false) 〃增加链路并重新规划路由
9.Routes, put(route)
10.reutrn Routes
11.End
图3-1负载均衡伪代码
