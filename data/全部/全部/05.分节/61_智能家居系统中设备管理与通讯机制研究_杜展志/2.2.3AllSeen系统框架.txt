2.2.3AllSeen系统框架
AUSeen的高层系统框架如图2-3所示，系统和语言绑定层位于最高层，主要用 于屏蔽开发语言的差异性。AUSeen本身使用C++编写，对于其它语言，比如Java、 JavaScript等，AllSeen通过该轻量级转换层-系统和语言绑定层来实现兼容。辅助对 象层通过提供总线附件、总线对象和代理总线对象大大简化了 AllSeen的开发工作。 信息和路由层主要负责消息的转发。终端层位于消息和路由层之下，终端端点是专 门用于负责提供最基本的网络功能的传输实体，所有有关网络的抽象在终端层已经
9
全部实现，所以从终端的角度来看，不管AllSeen的底层网络采用的是无线连接的 Wi-Fi、有线以太网连接的PLC或是其它拓展性的通信协议都不具有任何差异性。本 地传输是客户端、服务端或对等端中唯一使用的网络传输，本地传输用来连接本地 AllSeen总线后台程序进行本地进程通信。在不同的操作系统，本地传输的表现形式 也不一样，比如，在基于Windows的系统中本地传输是一个和本地后台程序连接的 TCP连接，而在基于Linux的系统中，本地传输则为一"基于Unix的socket连接。 此外，AllSeen还提供了一个操作系统抽象层来屏蔽硬件操作系统的差异性，本地系 统位于AllSeen系统的最底层口4
如果进一步抽象AllSeen服务框架，可以发现AllSeen设备由应用、AllSeen的 路由/后台程序和操作系统构成，根据操作系统的不同，可以将AllSeen设备分为 AllSeen标准设备和AllSeen瘦客户端应用两种类型皿，图2/描述了这两种设备 类型的系统框架。一般来说，AllSeen标准设备的功率、内存和CPU相对瘦客户端 设备而言要相对充足。
AllSeen标准设备
AllSeen标准应用
应用代码
AllSeen标准服务框架
AllSeen核心标准库
AllSeen瘦客户端设备
AllSeen瘦应用 ―应用代码—
AllSeen瘦客户端服务框架
AllSeen瘦客户端核心标准库
AllSeen 路由
非嵌入式操作系统 （例如安卓，windows, ios, Linux, Mac OSX）
RTOS,嵌入式操作系统 （例如Arduino, ThreadX等）
图2・4 AllSeen设备类型
10
